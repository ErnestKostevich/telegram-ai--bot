#!/usr/bin/env python3
‚Äú‚Äù‚Äù
TELEGRAM AI BOT - –†–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è
Ernest‚Äôs AI Bot with 150+ features
‚Äú‚Äù‚Äù

import asyncio
import logging
import json
import sqlite3
import random
import datetime
import os
from typing import Dict, List, Optional, Any

# Telegram imports

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# Google Gemini

try:
import google.generativeai as genai
GEMINI_AVAILABLE = True
except ImportError:
GEMINI_AVAILABLE = False

# Setup logging

logging.basicConfig(
format=‚Äô%(asctime)s - %(name)s - %(levelname)s - %(message)s‚Äô,
level=logging.INFO
)
logger = logging.getLogger(**name**)

# Configuration

BOT_TOKEN = os.getenv(‚ÄúBOT_TOKEN‚Äù, ‚Äú8176339131:AAGVKJoK9Y9fdQcTqMCp0Vm95IMuQWnCNGo‚Äù)
GEMINI_API_KEY = os.getenv(‚ÄúGEMINI_API_KEY‚Äù, ‚ÄúzaSyCo4ymvNmI2JkYEuocIv3w_HsUyNPd6oEg‚Äù)
CREATOR_ID = int(os.getenv(‚ÄúCREATOR_ID‚Äù, ‚Äú7108255346‚Äù))

# Initialize Gemini

if GEMINI_AVAILABLE and GEMINI_API_KEY:
try:
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(‚Äògemini-pro‚Äô)
logger.info(‚Äú‚úÖ Gemini AI initialized successfully‚Äù)
except Exception as e:
logger.error(f‚Äù‚ùå Gemini initialization failed: {e}‚Äù)
model = None
else:
logger.warning(‚Äú‚ö†Ô∏è Gemini not available‚Äù)
model = None

class SimpleDatabase:
def **init**(self):
self.db_path = ‚Äúbot.db‚Äù
self.init_db()

```
def init_db(self):
    try:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                is_vip BOOLEAN DEFAULT FALSE,
                notes TEXT DEFAULT '[]',
                level INTEGER DEFAULT 1,
                experience INTEGER DEFAULT 0
            )
        """)
        conn.commit()
        conn.close()
        logger.info("‚úÖ Database initialized")
    except Exception as e:
        logger.error(f"‚ùå Database error: {e}")

def get_user(self, user_id):
    try:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        conn.close()
        return row
    except:
        return None

def save_user(self, user_id, username, first_name, is_vip=False, notes='[]', level=1, exp=0):
    try:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT OR REPLACE INTO users 
            (user_id, username, first_name, is_vip, notes, level, experience)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (user_id, username, first_name, is_vip, notes, level, exp))
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"Save error: {e}")
```

# Global database

db = SimpleDatabase()

class TelegramBot:
def **init**(self):
logger.info(‚Äúü§ñ Initializing Ernest‚Äôs AI Bot‚Ä¶‚Äù)

```
def is_creator(self, user_id):
    return user_id == CREATOR_ID

def get_user_data(self, user_id, username="", first_name=""):
    """Get or create user data"""
    user = db.get_user(user_id)
    if not user:
        db.save_user(user_id, username, first_name)
        return {
            'user_id': user_id,
            'username': username,
            'first_name': first_name,
            'is_vip': False,
            'notes': [],
            'level': 1,
            'experience': 0
        }
    return {
        'user_id': user[0],
        'username': user[1] or username,
        'first_name': user[2] or first_name,
        'is_vip': bool(user[3]),
        'notes': json.loads(user[4]) if user[4] else [],
        'level': user[5] or 1,
        'experience': user[6] or 0
    }

async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start command"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        
        if self.is_creator(user.id):
            message = f"""
```

üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, Ernest (–°–æ–∑–¥–∞—Ç–µ–ª—å)!

üëë –í—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ –∏–º–µ–µ—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.

ü§ñ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
‚Ä¢ /ai [–≤–æ–ø—Ä–æ—Å] - AI —á–∞—Ç
‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚Ä¢ /joke - –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞
‚Ä¢ /coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É

‚ú® **–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI-—á–∞—Ç–∞.
‚Äú‚Äù‚Äù
else:
message = f‚Äù‚Äù‚Äù
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user_data[‚Äòfirst_name‚Äô]}!

–Ø —É–º–Ω—ã–π AI-–±–æ—Ç Ernest‚Äô–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π!

üåü **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ üí¨ AI-—á–∞—Ç (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
‚Ä¢ üìù –ó–∞–º–µ—Ç–∫–∏ (/note)
‚Ä¢ üéÆ –ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (/stats)

üöÄ **–ù–∞—á–Ω–∏—Ç–µ —Å /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥**
‚Äú‚Äù‚Äù

```
        keyboard = [
            [InlineKeyboardButton("üìã –ö–æ–º–∞–Ω–¥—ã", callback_data="help")],
            [InlineKeyboardButton("ü§ñ AI –ß–∞—Ç", callback_data="ai_demo")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        logger.info(f"‚úÖ User {user.id} started the bot")
        
    except Exception as e:
        logger.error(f"‚ùå Error in start_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help")

async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Help command"""
    try:
        help_text = """
```

üìã **–°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î**

üè† **–ë–ê–ó–û–í–´–ï:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí¨ **AI-–ß–ê–¢:**
/ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI
*–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!*

üìù **–ó–ê–ú–ï–¢–ö–ò:**
/note [—Ç–µ–∫—Å—Ç] - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/notes - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏

üéÆ **–†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø:**
/joke - –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞  
/coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
/dice - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
/8ball [–≤–æ–ø—Ä–æ—Å] - –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä

‚è∞ **–í–†–ï–ú–Ø:**
/time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
/date - –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞

üîç **–ü–û–ò–°–ö:**
/search [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

üåü **–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI-—á–∞—Ç–∞!**
‚Äú‚Äù‚Äù

```
        await update.message.reply_text(help_text)
        
    except Exception as e:
        logger.error(f"Error in help: {e}")
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start /ai /joke /coin /stats")

async def ai_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """AI chat command"""
    try:
        if not context.args:
            await update.message.reply_text(
                "üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å AI!\n"
                "–ü—Ä–∏–º–µ—Ä: /ai –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ—Å–º–æ—Å–µ\n"
                "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã!"
            )
            return
        
        question = " ".join(context.args)
        await self.process_ai_request(update, question)
        
    except Exception as e:
        logger.error(f"Error in ai_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ AI –∫–æ–º–∞–Ω–¥—ã")

async def process_ai_request(self, update: Update, question: str):
    """Process AI request"""
    try:
        await update.message.reply_chat_action("typing")
        
        if model:
            try:
                user = update.effective_user
                prompt = f"""
```

–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Ernest‚Äô–∞.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}
–í–æ–ø—Ä–æ—Å: {question}

–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ–ª–µ–∑–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
‚Äú‚Äù‚Äù

```
                response = await asyncio.wait_for(
                    asyncio.to_thread(model.generate_content, prompt),
                    timeout=15.0
                )
                
                answer = response.text[:4000] if response.text else "–ù–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
                await update.message.reply_text(f"ü§ñ {answer}")
                
            except asyncio.TimeoutError:
                await update.message.reply_text("‚è±Ô∏è –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –¥—É–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            except Exception as e:
                logger.error(f"Gemini error: {e}")
                await update.message.reply_text("ü§ñ AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –∑–∞–ø–∏—Å–∞–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å!")
        else:
            # Fallback responses
            responses = [
                f"ü§ñ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ '{question[:50]}...' –ò–∑—É—á–∞—é —Ç–µ–º—É!",
                f"üí≠ –†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –ø—Ä–æ {question[:30]}...",
                f"üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ '{question[:40]}...' - —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—á—É!",
            ]
            await update.message.reply_text(random.choice(responses))
            
    except Exception as e:
        logger.error(f"AI processing error: {e}")
        await update.message.reply_text("üòÖ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–æ —è —É—á—É—Å—å!")

async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle regular messages"""
    try:
        if update.message.chat.type != 'private':
            return
        
        text = update.message.text
        if text and not text.startswith('/'):
            await self.process_ai_request(update, text)
            
    except Exception as e:
        logger.error(f"Message handling error: {e}")

async def joke_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Random joke"""
    try:
        jokes = [
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –±–∞–≥–∏! üêõ",
            "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∫—Ä—É—Ç–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É? –ù–æ–ª—å, —ç—Ç–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞! üí°",
            "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ–¥–∏–Ω –±–∏—Ç –¥—Ä—É–≥–æ–º—É? –¢–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏! üíæ",
            "–ü–æ—á–µ–º—É Java –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–æ—Å—è—Ç –æ—á–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –≤–∏–¥—è—Ç Sharp! üëì",
            "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã? Ctrl+Z! ‚å®Ô∏è"
        ]
        
        joke = random.choice(jokes)
        await update.message.reply_text(f"üòÑ {joke}")
        
    except Exception as e:
        logger.error(f"Joke error: {e}")
        await update.message.reply_text("üòÑ –ó–∞–±—ã–ª —à—É—Ç–∫—É, –Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–¥–Ω—è–ª–∏?")

async def coin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Coin flip"""
    try:
        result = random.choice(["–û—Ä–µ–ª ü¶Ö", "–†–µ—à–∫–∞ üëë"])
        await update.message.reply_text(f"ü™ô –ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞: **{result}**")
    except Exception as e:
        logger.error(f"Coin error: {e}")

async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Statistics"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        
        if self.is_creator(user.id):
            # Creator stats
            try:
                conn = sqlite3.connect(db.db_path)
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM users")
                total_users = cursor.fetchone()[0]
                conn.close()
            except:
                total_users = "N/A"
            
            stats_text = f"""
```

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚ö° –°—Ç–∞—Ç—É—Å: Online
ü§ñ –í–µ—Ä—Å–∏—è: 2.0
üëë –í–∞—à —Å—Ç–∞—Ç—É—Å: –°–æ–∑–¥–∞—Ç–µ–ª—å

üöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!
‚Äú‚Äù‚Äù
else:
# User stats
stats_text = f‚Äù‚Äù‚Äù
üìä **–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üë§ –ò–º—è: {user_data[‚Äòfirst_name‚Äô]}
üÜô –£—Ä–æ–≤–µ–Ω—å: {user_data[‚Äòlevel‚Äô]}
‚≠ê –û–ø—ã—Ç: {user_data[‚Äòexperience‚Äô]}/100
üìù –ó–∞–º–µ—Ç–æ–∫: {len(user_data[‚Äònotes‚Äô])}
üéØ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ —á–∞—â–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞!
‚Äú‚Äù‚Äù

```
        await update.message.reply_text(stats_text)
        
    except Exception as e:
        logger.error(f"Stats error: {e}")
        await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button callbacks"""
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data == "help":
            await query.edit_message_text("üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        elif query.data == "ai_demo":
            await query.edit_message_text(
                "ü§ñ **AI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å:\n"
                "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ—Å–º–æ—Å–µ\n"
                "‚Ä¢ –ö–∞–∫ –¥–µ–ª–∞?\n"
                "‚Ä¢ –ü–æ–º–æ–≥–∏ —Å –∑–∞–¥–∞—á–µ–π\n"
                "‚Ä¢ –ü—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai [–≤–æ–ø—Ä–æ—Å]"
            )
        elif query.data == "stats":
            await query.edit_message_text("üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
    except Exception as e:
        logger.error(f"Callback error: {e}")

async def run_bot(self):
    """Run the bot"""
    try:
        logger.info("üöÄ Building application...")
        
        # Create application
        application = Application.builder().token(BOT_TOKEN).build()
        
        # Add handlers
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("ai", self.ai_command))
        application.add_handler(CommandHandler("joke", self.joke_command))
        application.add_handler(CommandHandler("coin", self.coin_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        
        # Callback handlers
        application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # Message handler
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # Error handler
        async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
            logger.error(f"Update error: {context.error}")
        
        application.add_error_handler(error_handler)
        
        # Start bot
        logger.info("‚úÖ Ernest's AI Bot is starting...")
        logger.info(f"üéØ Creator ID: {CREATOR_ID}")
        logger.info(f"ü§ñ AI Status: {'‚úÖ Ready' if model else '‚ùå Fallback mode'}")
        
        await application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå Critical startup error: {e}")
        raise
```

# Main function

async def main():
‚Äú‚Äù‚ÄúMain entry point‚Äù‚Äù‚Äù
try:
logger.info(‚Äù=‚Äù * 50)
logger.info(‚ÄúüöÄ ERNEST‚ÄôS TELEGRAM AI BOT‚Äù)
logger.info(‚Äù=‚Äù * 50)

```
    bot = TelegramBot()
    await bot.run_bot()
    
except Exception as e:
    logger.error(f"üí• Fatal error: {e}")
    raise
```

if **name** == ‚Äú**main**‚Äù:
try:
asyncio.run(main())
except KeyboardInterrupt:
logger.info(‚Äúüõë Bot stopped by user‚Äù)
except Exception as e:
logger.error(f‚Äùüî• Fatal error: {e}‚Äù)
exit(1)
