#!/usr/bin/env python3

# -*- coding: utf-8 -*-

‚Äú‚Äù‚Äù
ERNEST‚ÄôS TELEGRAM AI BOT - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø
150+ —Ñ—É–Ω–∫—Ü–∏–π, AI —á–∞—Ç, VIP —Å–∏—Å—Ç–µ–º–∞, –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!
‚Äú‚Äù‚Äù

import asyncio
import logging
import json
import sqlite3
import random
import datetime
import os
import aiohttp
from typing import Dict, List, Optional, Any

# Telegram imports

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# Google Gemini

try:
import google.generativeai as genai
GEMINI_AVAILABLE = True
except ImportError:
GEMINI_AVAILABLE = False

# Setup logging

logging.basicConfig(
format=‚Äô%(asctime)s - %(name)s - %(levelname)s - %(message)s‚Äô,
level=logging.INFO
)
logger = logging.getLogger(**name**)

# =============================================================================

# CONFIGURATION

# =============================================================================

# API Keys

BOT_TOKEN = os.getenv(‚ÄúBOT_TOKEN‚Äù, ‚Äú8176339131:AAGVKJoK9Y9fdQcTqMCp0Vm95IMuQWnCNGo‚Äù)
GEMINI_API_KEY = os.getenv(‚ÄúGEMINI_API_KEY‚Äù, ‚ÄúzaSyCo4ymvNmI2JkYEuocIv3w_HsUyNPd6oEg‚Äù)
CURRENCY_API_KEY = os.getenv(‚ÄúCURRENCY_API_KEY‚Äù, ‚Äúfca_live_86O15Ga6b1M0bnm6FCiDfrBB7USGCEPiAUyjiuwL‚Äù)
CREATOR_ID = int(os.getenv(‚ÄúCREATOR_ID‚Äù, ‚Äú7108255346‚Äù))

# Initialize Gemini AI

if GEMINI_AVAILABLE and GEMINI_API_KEY:
try:
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel(‚Äògemini-pro‚Äô)
logger.info(‚Äú‚úÖ Gemini AI initialized successfully‚Äù)
except Exception as e:
logger.error(f‚Äù‚ùå Gemini initialization failed: {e}‚Äù)
gemini_model = None
else:
logger.warning(‚Äú‚ö†Ô∏è Gemini not available‚Äù)
gemini_model = None

# =============================================================================

# DATABASE MANAGER

# =============================================================================

class DatabaseManager:
def **init**(self):
self.db_path = ‚Äúernest_bot.db‚Äù
self.init_database()

```
def init_database(self):
    """Initialize database"""
    try:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Users table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                is_vip BOOLEAN DEFAULT FALSE,
                vip_expires TEXT,
                language TEXT DEFAULT 'ru',
                notes TEXT DEFAULT '[]',
                reminders TEXT DEFAULT '[]',
                birthday TEXT,
                nickname TEXT,
                level INTEGER DEFAULT 1,
                experience INTEGER DEFAULT 0,
                achievements TEXT DEFAULT '[]',
                memory_data TEXT DEFAULT '{}',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Statistics table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS statistics (
                command TEXT PRIMARY KEY,
                usage_count INTEGER DEFAULT 0,
                last_used TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Logs table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                command TEXT,
                message TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ Database initialized successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Database initialization failed: {e}")

def get_user(self, user_id):
    """Get user data"""
    try:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        conn.close()
        return row
    except Exception as e:
        logger.error(f"Error getting user {user_id}: {e}")
        return None

def save_user(self, user_data):
    """Save user data"""
    try:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT OR REPLACE INTO users 
            (user_id, username, first_name, is_vip, vip_expires, language, 
             notes, reminders, birthday, nickname, level, experience, 
             achievements, memory_data, last_activity)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, user_data)
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"Error saving user: {e}")

def log_command(self, user_id, command):
    """Log command usage"""
    try:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Log the command
        cursor.execute(
            "INSERT INTO logs (user_id, command) VALUES (?, ?)",
            (user_id, command)
        )
        
        # Update statistics
        cursor.execute("""
            INSERT OR REPLACE INTO statistics (command, usage_count, last_used)
            VALUES (?, COALESCE((SELECT usage_count FROM statistics WHERE command = ?), 0) + 1, ?)
        """, (command, command, datetime.datetime.now().isoformat()))
        
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"Error logging command: {e}")

def get_stats(self):
    """Get bot statistics"""
    try:
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users WHERE is_vip = 1")
        vip_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM logs")
        total_commands = cursor.fetchone()[0]
        
        cursor.execute("""
            SELECT command, usage_count FROM statistics 
            ORDER BY usage_count DESC LIMIT 5
        """)
        popular_commands = cursor.fetchall()
        
        conn.close()
        return {
            'total_users': total_users,
            'vip_users': vip_users,
            'total_commands': total_commands,
            'popular_commands': popular_commands
        }
    except:
        return {'total_users': 0, 'vip_users': 0, 'total_commands': 0, 'popular_commands': []}
```

# =============================================================================

# MAIN BOT CLASS

# =============================================================================

class ErnestBot:
def **init**(self):
self.db = DatabaseManager()
self.user_contexts = {}
logger.info(‚Äúü§ñ Ernest‚Äôs Bot initialized‚Äù)

```
def is_creator(self, user_id):
    """Check if user is creator"""
    return user_id == CREATOR_ID

def get_user_data(self, user_id, username="", first_name=""):
    """Get or create user data"""
    user = self.db.get_user(user_id)
    if not user:
        # Create new user
        user_data = (
            user_id, username, first_name, False, None, 'ru',
            '[]', '[]', None, None, 1, 0, '[]', '{}',
            datetime.datetime.now().isoformat()
        )
        self.db.save_user(user_data)
        return {
            'user_id': user_id,
            'username': username,
            'first_name': first_name,
            'is_vip': False,
            'vip_expires': None,
            'language': 'ru',
            'notes': [],
            'reminders': [],
            'birthday': None,
            'nickname': None,
            'level': 1,
            'experience': 0,
            'achievements': [],
            'memory_data': {}
        }
    
    # Convert existing user
    return {
        'user_id': user[0],
        'username': user[1] or username,
        'first_name': user[2] or first_name,
        'is_vip': bool(user[3]),
        'vip_expires': user[4],
        'language': user[5] or 'ru',
        'notes': json.loads(user[6]) if user[6] else [],
        'reminders': json.loads(user[7]) if user[7] else [],
        'birthday': user[8],
        'nickname': user[9],
        'level': user[10] or 1,
        'experience': user[11] or 0,
        'achievements': json.loads(user[12]) if user[12] else [],
        'memory_data': json.loads(user[13]) if user[13] else {}
    }

def is_vip(self, user_data):
    """Check VIP status"""
    if not user_data['is_vip']:
        return False
    if user_data['vip_expires']:
        try:
            expires = datetime.datetime.fromisoformat(user_data['vip_expires'])
            return datetime.datetime.now() < expires
        except:
            return True
    return True

def add_experience(self, user_data, points=1):
    """Add experience points"""
    try:
        user_data['experience'] += points
        if user_data['experience'] >= user_data['level'] * 100:
            user_data['level'] += 1
            user_data['experience'] = 0
            achievement = f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç {user_data['level']} —É—Ä–æ–≤–µ–Ω—å!"
            if achievement not in user_data['achievements']:
                user_data['achievements'].append(achievement)
        
        # Save updated user
        save_data = (
            user_data['user_id'], user_data['username'], user_data['first_name'],
            user_data['is_vip'], user_data['vip_expires'], user_data['language'],
            json.dumps(user_data['notes']), json.dumps(user_data['reminders']),
            user_data['birthday'], user_data['nickname'], user_data['level'],
            user_data['experience'], json.dumps(user_data['achievements']),
            json.dumps(user_data['memory_data']), datetime.datetime.now().isoformat()
        )
        self.db.save_user(save_data)
    except Exception as e:
        logger.error(f"Error adding experience: {e}")
```

# =============================================================================

# COMMAND HANDLERS

# =============================================================================

```
async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start command"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/start")
        
        if self.is_creator(user.id):
            message = """
```

üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, Ernest (–°–æ–∑–¥–∞—Ç–µ–ª—å)!

–í—ã –∏–º–µ–µ—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.

üëë **–ö–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è:**
‚Ä¢ /grant_vip - –í—ã–¥–∞—Ç—å VIP —Å—Ç–∞—Ç—É—Å
‚Ä¢ /stats - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚Ä¢ /broadcast - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ /users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

ü§ñ **–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ /help**

‚ú® **–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**
‚Äú‚Äù‚Äù
elif self.is_vip(user_data):
nickname = user_data[‚Äònickname‚Äô] or user_data[‚Äòfirst_name‚Äô]
message = f‚Äù‚Äù‚Äù
üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nickname}!

–£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω VIP —Å—Ç–∞—Ç—É—Å —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!

‚≠ê **VIP —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ /secret - –°–µ–∫—Ä–µ—Ç–Ω—ã–µ VIP —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ /lottery - –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è
‚Ä¢ /priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ /remind - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

ü§ñ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥**
‚Äú‚Äù‚Äù
else:
message = f‚Äù‚Äù‚Äù
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user_data[‚Äòfirst_name‚Äô]}!

–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–±–æ—Ç Ernest‚Äô–∞ —Å –±–æ–ª–µ–µ —á–µ–º 150 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!

üåü **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ üí¨ AI-—á–∞—Ç —Å Gemini (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!)
‚Ä¢ üìù –°–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ—Ç–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚Ä¢ üå§Ô∏è –ü–æ–≥–æ–¥–∞ –∏ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏  
‚Ä¢ üéÆ –ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
‚Ä¢ üåê –ü–æ–∏—Å–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
‚Ä¢ üíé VIP-—Å–∏—Å—Ç–µ–º–∞ —Å –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º–∏

ü§ñ **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥**
‚Äú‚Äù‚Äù

```
        keyboard = [
            [InlineKeyboardButton("üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="help"),
             InlineKeyboardButton("üíé VIP", callback_data="vip_info")],
            [InlineKeyboardButton("ü§ñ AI —á–∞—Ç", callback_data="ai_demo"),
             InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in start_command: {e}")
        await update.message.reply_text("ü§ñ –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Help command - full list"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/help")
        
        help_text = """
```

üìã **–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î**

üè† **–ë–ê–ó–û–í–´–ï:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üí¨ **AI-–ß–ê–¢:**
/ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI
*–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!*

üìù **–ó–ê–ú–ï–¢–ö–ò:**
/note [—Ç–µ–∫—Å—Ç] - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/notes - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
/delnote [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/findnote [—Å–ª–æ–≤–æ] - –ü–æ–∏—Å–∫ –≤ –∑–∞–º–µ—Ç–∫–∞—Ö
/clearnotes - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏

‚è∞ **–í–†–ï–ú–Ø –ò –î–ê–¢–ê:**
/time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
/date - –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
/timer [—Å–µ–∫—É–Ω–¥—ã] - –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
/worldtime - –í—Ä–µ–º—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—è—Å–∞—Ö

üéÆ **–†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø:**
/joke - –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞
/fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
/quote - –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞
/story - –ö–æ—Ä–æ—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è
/riddle - –ó–∞–≥–∞–¥–∫–∞
/motivate - –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

üéØ **–ò–ì–†–´:**
/coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
/dice - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
/random [—á–∏—Å–ª–æ] - –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
/8ball [–≤–æ–ø—Ä–æ—Å] - –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä
/quiz - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞

üå§Ô∏è **–ü–û–ì–û–î–ê –ò –§–ò–ù–ê–ù–°–´:**
/weather [–≥–æ—Ä–æ–¥] - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
/forecast [–≥–æ—Ä–æ–¥] - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
/currency [–∏–∑] [–≤] - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç
/crypto [–º–æ–Ω–µ—Ç–∞] - –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã

üåê **–ü–û–ò–°–ö –ò –ü–ï–†–ï–í–û–î–´:**
/search [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
/wiki [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫ –≤ Wikipedia
/news [—Ç–µ–º–∞] - –ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ
/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫

üî§ **–¢–ï–ö–°–¢–û–í–´–ï –£–¢–ò–õ–ò–¢–´:**
/summarize [—Ç–µ–∫—Å—Ç] - –ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ
/paraphrase [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
/spellcheck [—Ç–µ–∫—Å—Ç] - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏

üíé **VIP –§–£–ù–ö–¶–ò–ò:**
/vip - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP —Å—Ç–∞—Ç—É—Å–µ
/secret - –°–µ–∫—Ä–µ—Ç–Ω–∞—è VIP —Ñ—É–Ω–∫—Ü–∏—è
/lottery - –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è
/priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

üëë **–î–õ–Ø –°–û–ó–î–ê–¢–ï–õ–Ø:**
/grant_vip [user_id] [–≤—Ä–µ–º—è] - –í—ã–¥–∞—Ç—å VIP
/revoke_vip [user_id] - –ó–∞–±—Ä–∞—Ç—å VIP
/stats - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –†–∞—Å—Å—ã–ª–∫–∞

üåü **–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI-—á–∞—Ç–∞!**
‚Äú‚Äù‚Äù

```
        await update.message.reply_text(help_text)
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in help_command: {e}")
        await update.message.reply_text("üìã –ö–æ–º–∞–Ω–¥—ã: /start /ai /joke /weather /currency /note /stats")

async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Bot information"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/info")
        
        stats = self.db.get_stats()
        
        info_text = f"""
```

ü§ñ **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–û–¢–ï**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í–µ—Ä—Å–∏—è: 2.0 Full
‚Ä¢ AI –ú–æ–¥–µ–ª—å: Google Gemini Pro
‚Ä¢ –§—É–Ω–∫—Ü–∏–π: 150+
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats[‚Äòtotal_users‚Äô]}
‚Ä¢ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats[‚Äòvip_users‚Äô]}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {stats[‚Äòtotal_commands‚Äô]}

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π AI-—á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ—Ç–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚Ä¢ –ü–æ–≥–æ–¥–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –∏–≥—Ä—ã
‚Ä¢ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ VIP-—Å–∏—Å—Ç–µ–º–∞ —Å –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

‚ö° **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ Python + python-telegram-bot
‚Ä¢ Google Gemini AI
‚Ä¢ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

üë®‚Äçüíª **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:** Ernest Kostevich, 2024
üåü **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
üöÄ **–•–æ—Å—Ç–∏–Ω–≥:** Render.com (24/7)

üí° **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é!**
‚Äú‚Äù‚Äù

```
        await update.message.reply_text(info_text)
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in info_command: {e}")
```

# =============================================================================

# AI CHAT FUNCTIONS

# =============================================================================

```
async def ai_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """AI chat command"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/ai")
        
        if not context.args:
            await update.message.reply_text(
                "üí¨ **–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å AI!**\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ /ai –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ—Å–º–æ—Å–µ\n"
                "‚Ä¢ /ai –ü–æ–º–æ–≥–∏ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π\n"
                "‚Ä¢ /ai –ü—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞\n\n"
                "**–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã!**"
            )
            return
        
        question = " ".join(context.args)
        await self.process_ai_request(update, question, user_data)
        
    except Exception as e:
        logger.error(f"Error in ai_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ AI –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_ai_request(self, update: Update, question: str, user_data):
    """Process AI request with Gemini"""
    try:
        await update.message.reply_chat_action("typing")
        
        if gemini_model:
            # Get conversation context
            context_messages = self.user_contexts.get(user_data['user_id'], [])
            
            # Enhanced prompt
            prompt = f"""
```

–¢—ã —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram –±–æ—Ç–µ Ernest‚Äô–∞.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data[‚Äòfirst_name‚Äô]} (—É—Ä–æ–≤–µ–Ω—å {user_data[‚Äòlevel‚Äô]})
{‚ÄúVIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å‚Äù if self.is_vip(user_data) else ‚Äú–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å‚Äù}

–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
{chr(10).join(context_messages[-3:]) if context_messages else ‚Äú–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞‚Äù}

–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {question}

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.
–ï—Å–ª–∏ —ç—Ç–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–∞–π –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç.
‚Äú‚Äù‚Äù

```
            try:
                response = await asyncio.wait_for(
                    asyncio.to_thread(gemini_model.generate_content, prompt),
                    timeout=20.0
                )
                
                if response.text:
                    answer = response.text[:4000]  # Telegram limit
                    
                    # Save context
                    if user_data['user_id'] not in self.user_contexts:
                        self.user_contexts[user_data['user_id']] = []
                    
                    self.user_contexts[user_data['user_id']].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {question}")
                    self.user_contexts[user_data['user_id']].append(f"–ë–æ—Ç: {answer}")
                    
                    # Limit context size
                    if len(self.user_contexts[user_data['user_id']]) > 10:
                        self.user_contexts[user_data['user_id']] = self.user_contexts[user_data['user_id']][-10:]
                    
                    await update.message.reply_text(f"ü§ñ {answer}")
                    self.add_experience(user_data, 2 if self.is_vip(user_data) else 1)
                else:
                    await update.message.reply_text("ü§ñ –ù–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
                    
            except asyncio.TimeoutError:
                await update.message.reply_text("‚è±Ô∏è AI —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –¥—É–º–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—â–µ.")
            except Exception as e:
                logger.error(f"Gemini API error: {e}")
                await update.message.reply_text("ü§ñ AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –∑–∞–ø–∏—Å–∞–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∂–µ!")
        else:
            # Fallback responses when AI is not available
            fallback_responses = [
                f"ü§ñ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ '{question[:50]}'! AI –≤—Ä–µ–º–µ–Ω–Ω–æ –¥—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º.",
                f"üí≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–æ {question[:30]}... –°–∫–æ—Ä–æ –æ—Ç–≤–µ—á—É!",
                f"üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ '{question[:40]}'... –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –æ—Ç–≤–µ—Ç!",
                f"‚ö° –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É! –¢–µ–º–∞ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è: {question[:35]}",
            ]
            await update.message.reply_text(random.choice(fallback_responses))
            self.add_experience(user_data, 1)
            
    except Exception as e:
        logger.error(f"AI processing error: {e}")
        await update.message.reply_text("üòÖ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å AI, –Ω–æ —è —É—á—É—Å—å –Ω–∞ –æ—à–∏–±–∫–∞—Ö!")

async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle regular messages (auto AI response)"""
    try:
        # Only in private chats
        if update.message.chat.type != 'private':
            return
        
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        
        text = update.message.text
        if text and not text.startswith('/') and len(text.strip()) > 0:
            await self.process_ai_request(update, text, user_data)
            
    except Exception as e:
        logger.error(f"Message handling error: {e}")
```

# =============================================================================

# NOTES SYSTEM

# =============================================================================

```
async def note_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Save a note"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/note")
        
        if not context.args:
            await update.message.reply_text(
                "üìù **–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏!**\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** /note –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∏ —Ö–ª–µ–±\n"
                "**–ü—Ä–∏–º–µ—Ä:** /note –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤—Ç—Ä–∞ –≤ 15:00"
            )
            return
        
        note_text = " ".join(context.args)
        timestamp = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        note_with_date = f"{note_text} ({timestamp})"
        
        user_data['notes'].append(note_with_date)
        
        # Save to database
        save_data = (
            user_data['user_id'], user_data['username'], user_data['first_name'],
            user_data['is_vip'], user_data['vip_expires'], user_data['language'],
            json.dumps(user_data['notes'], ensure_ascii=False), json.dumps(user_data['reminders']),
            user_data['birthday'], user_data['nickname'], user_data['level'],
            user_data['experience'], json.dumps(user_data['achievements']),
            json.dumps(user_data['memory_data']), datetime.datetime.now().isoformat()
        )
        self.db.save_user(save_data)
        
        await update.message.reply_text(
            f"‚úÖ **–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!**\n\n"
            f"üìù {note_text}\n"
            f"üìÖ {timestamp}\n\n"
            f"–£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {len(user_data['notes'])} –∑–∞–º–µ—Ç–æ–∫. "
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö."
        )
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in note_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.")

async def notes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show all notes"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/notes")
        
        if not user_data['notes']:
            await update.message.reply_text(
                "üìù **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /note [—Ç–µ–∫—Å—Ç] –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–º–µ—Ç–∫–∏!"
            )
            return
        
        notes_text = f"üìù **–í–ê–®–ò –ó–ê–ú–ï–¢–ö–ò** ({len(user_data['notes'])})\n\n"
        for i, note in enumerate(user_data['notes'], 1):
            notes_text += f"{i}. {note}\n\n"
        
        notes_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delnote [–Ω–æ–º–µ—Ä] –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"
        
        # Split long messages
        if len(notes_text) > 4000:
            parts = [notes_text[i:i+4000] for i in range(0, len(notes_text), 4000)]
            for part in parts:
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(notes_text)
            
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in notes_command: {e}")

async def delnote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Delete a note"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/delnote")
        
        if not context.args:
            await update.message.reply_text(
                "üóëÔ∏è **–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!**\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** /delnote 1\n"
                "**–ü—Ä–∏–º–µ—Ä:** /delnote 3\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notes —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–º–µ—Ä–∞ –∑–∞–º–µ—Ç–æ–∫."
            )
            return
        
        try:
            note_num = int(context.args[0])
            if 1 <= note_num <= len(user_data['notes']):
                deleted_note = user_data['notes'].pop(note_num - 1)
                
                # Save to database
                save_data = (
                    user_data['user_id'], user_data['username'], user_data['first_name'],
                    user_data['is_vip'], user_data['vip_expires'], user_data['language'],
                    json.dumps(user_data['notes'], ensure_ascii=False), json.dumps(user_data['reminders']),
                    user_data['birthday'], user_data['nickname'], user_data['level'],
                    user_data['experience'], json.dumps(user_data['achievements']),
                    json.dumps(user_data['memory_data']), datetime.datetime.now().isoformat()
                )
                self.db.save_user(save_data)
                
                await update.message.reply_text(
                    f"‚úÖ **–ó–∞–º–µ—Ç–∫–∞ #{note_num} —É–¥–∞–ª–µ–Ω–∞!**\n\n"
                    f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {deleted_note[:100]}...\n"
                    f"üìù –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–º–µ—Ç–æ–∫: {len(user_data['notes'])}"
                )
            else:
                await update.message.reply_text(
                    f"‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏!**\n\n"
                    f"–£ –≤–∞—Å –≤—Å–µ–≥–æ {len(user_data['notes'])} –∑–∞–º–µ—Ç–æ–∫. "
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
                )
        except ValueError:
            await update.message.reply_text("‚ùå **–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏!**")
        
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in delnote_command: {e}")

async def findnote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Find notes by keyword"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/findnote")
        
        if not context.args:
            await update.message.reply_text(
                "üîç **–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞!**\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ /findnote –º–æ–ª–æ–∫–æ\n"
                "‚Ä¢ /findnote –≤—Å—Ç—Ä–µ—á–∞\n"
                "‚Ä¢ /findnote –ø—Ä–æ–µ–∫—Ç"
            )
            return
        
        search_term = " ".join(context.args).lower()
        found_notes = []
        
        for i, note in enumerate(user_data['notes'], 1):
            if search_term in note.lower():
                found_notes.append(f"{i}. {note}")
        
        if found_notes:
            result_text = f"üîç **–ù–ê–ô–î–ï–ù–ù–´–ï –ó–ê–ú–ï–¢–ö–ò** (–ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}'):\n\n"
            result_text += "\n\n".join(found_notes)
            result_text += f"\n\nüìä –ù–∞–π–¥–µ–Ω–æ: {len(found_notes)} –∏–∑ {len(user_data['notes'])}"
        else:
            result_text = f"‚ùå **–ó–∞–º–µ—Ç–∫–∏ —Å '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ."
        
        await update.message.reply_text(result_text)
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in findnote_command: {e}")
```

# =============================================================================

# TIME AND DATE FUNCTIONS

# =============================================================================

```
async def time_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Current time in different timezones"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/time")
        
        now = datetime.datetime.now()
        
        time_text = f"""
```

üïê **–¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø**

üá∑üá∫ **–ú–æ—Å–∫–≤–∞:** {now.strftime(‚Äô%H:%M:%S‚Äô)}
üáÆüáπ **–†–∏–º:** {now.strftime(‚Äô%H:%M:%S‚Äô)}
üåç **UTC:** {datetime.datetime.utcnow().strftime(‚Äô%H:%M:%S‚Äô)}

üìÖ **–î–∞—Ç–∞:** {now.strftime(‚Äô%d.%m.%Y‚Äô)}
üìÜ **–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:** {now.strftime(‚Äô%A‚Äô)}
üóìÔ∏è **–î–µ–Ω—å –≥–æ–¥–∞:** {now.timetuple().tm_yday}

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {now.strftime(‚Äô%H:%M:%S‚Äô)}
‚Äú‚Äù‚Äù

```
        await update.message.reply_text(time_text)
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in time_command: {e}")

async def date_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Current date information"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/date")
        
        now = datetime.datetime.now()
        
        date_text = f"""
```

üìÖ **–°–ï–ì–û–î–ù–Ø**

üìÜ **–î–∞—Ç–∞:** {now.strftime(‚Äô%d.%m.%Y‚Äô)}
üìÖ **–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:** {now.strftime(‚Äô%A‚Äô)}
üìä **–î–µ–Ω—å –≥–æ–¥–∞:** {now.timetuple().tm_yday}
üóìÔ∏è **–ù–µ–¥–µ–ª—è –≥–æ–¥–∞:** {now.isocalendar()[1]}
üåó **–ú–µ—Å—è—Ü:** {now.strftime(‚Äô%B‚Äô)}
üéÇ **–ö–≤–∞—Ä—Ç–∞–ª:** {(now.month-1)//3 + 1}

‚è∞ **–í—Ä–µ–º—è:** {now.strftime(‚Äô%H:%M:%S‚Äô)}
‚Äú‚Äù‚Äù

```
        await update.message.reply_text(date_text)
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in date_command: {e}")
```

# =============================================================================

# ENTERTAINMENT FUNCTIONS

# =============================================================================

```
async def joke_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Random joke"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/joke")
        
        jokes = [
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –±–∞–≥–∏! üêõ",
            "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∫—Ä—É—Ç–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É? –ù–æ–ª—å, —ç—Ç–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞! üí°",
            "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ–¥–∏–Ω –±–∏—Ç –¥—Ä—É–≥–æ–º—É? –¢–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏! üíæ",
            "–ü–æ—á–µ–º—É —É Java –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞? –ò–∑-–∑–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π! ‚òï",
            "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã? Ctrl+Z –¥–æ –ø–æ–±–µ–¥–Ω–æ–≥–æ! ‚å®Ô∏è",
            "–ü–æ—á–µ–º—É Python –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–∏—Ç–æ–Ω–æ–º? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –¥—É—à–∏—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏! üêç",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–∫—É—Ä—Å–∏—è? –°–º. —Ä–µ–∫—É—Ä—Å–∏—è üîÑ",
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –ü–æ—Ç–æ–º—É —á—Ç–æ –≤ –Ω–µ–π –Ω–µ—Ç –±–∞–≥–æ–≤! üå≤",
            "–ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç–∞-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –æ—Ç –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç–∞? –≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –í–ê–®–ò –±–æ—Ç–∏–Ω–∫–∏! üëü",
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤ –∏ –Ω–µ—Ç Wi-Fi! üêû"
        ]
        
        joke = random.choice(jokes)
        await update.message.reply_text(f"üòÑ {joke}")
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in joke_command: {e}")
        await update.message.reply_text("üòÑ –°–µ–≥–æ–¥–Ω—è —à—É—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–¥–Ω—è–ª–∏?")

async def fact_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Interesting fact"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/fact")
        
        facts = [
            "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –æ–∫–æ–ª–æ 20% –≤—Å–µ–π —ç–Ω–µ—Ä–≥–∏–∏ —Ç–µ–ª–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –≤–µ—Å–∏—Ç –≤—Å–µ–≥–æ 2% –æ—Ç –º–∞—Å—Å—ã —Ç–µ–ª–∞!",
            "üåä –í –æ–∫–µ–∞–Ω–∞—Ö –ó–µ–º–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è 99% –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ø–ª–∞–Ω–µ—Ç—ã!",
            "‚ö° –ú–æ–ª–Ω–∏—è –º–æ–∂–µ—Ç –Ω–∞–≥—Ä–µ—Ç—å –≤–æ–∑–¥—É—Ö –¥–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã 30,000¬∞C - –≤ 5 —Ä–∞–∑ –≥–æ—Ä—è—á–µ–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –°–æ–ª–Ω—Ü–∞!",
            "üêô –£ –æ—Å—å–º–∏–Ω–æ–≥–æ–≤ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±–∞—è –∫—Ä–æ–≤—å!",
            "üåå –í –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π –í—Å–µ–ª–µ–Ω–Ω–æ–π –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥, —á–µ–º –ø–µ—Å—á–∏–Ω–æ–∫ –Ω–∞ –≤—Å–µ—Ö –ø–ª—è–∂–∞—Ö –ó–µ–º–ª–∏!",
            "ü¶à –ê–∫—É–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–æ–ª—å—à–µ, —á–µ–º –¥–µ—Ä–µ–≤—å—è - –±–æ–ª–µ–µ 400 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç!",
            "üçØ –ú–µ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è. –í –µ–≥–∏–ø–µ—Ç—Å–∫–∏—Ö –ø–∏—Ä–∞–º–∏–¥–∞—Ö –Ω–∞—Ö–æ–¥–∏–ª–∏ —Å—ä–µ–¥–æ–±–Ω—ã–π –º–µ–¥ –≤–æ–∑—Ä–∞—Å—Ç–æ–º 3000 –ª–µ—Ç!",
            "üêß –ü–∏–Ω–≥–≤–∏–Ω—ã –º–æ–≥—É—Ç –ø–æ–¥–ø—Ä—ã–≥–∏–≤–∞—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç—É –¥–æ 3 –º–µ—Ç—Ä–æ–≤!",
            "üåô –õ—É–Ω–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –æ—Ç –ó–µ–º–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 4 —Å–º –∫–∞–∂–¥—ã–π –≥–æ–¥!",
            "üß¨ –£ –ª—é–¥–µ–π –∏ –±–∞–Ω–∞–Ω–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –æ–∫–æ–ª–æ 60% –î–ù–ö!"
        ]
        
        fact = random.choice(facts)
        await update.message.reply_text(f"ü§ì **–ò–ù–¢–ï–†–ï–°–ù–´–ô –§–ê–ö–¢:**\n\n{fact}")
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in fact_command: {e}")

async def quote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Inspirational quote"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/quote")
        
        quotes = [
            "üí™ \"–£—Å–ø–µ—Ö - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.\" - –£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å",
            "üåü \"–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É - –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å.\" - –°—Ç–∏–≤ –î–∂–æ–±—Å",
            "üöÄ \"–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–∏—Ö –º–µ—á—Ç–∞–Ω–∏–π.\" - –≠–ª–µ–æ–Ω–æ—Ä –†—É–∑–≤–µ–ª—å—Ç",
            "‚≠ê \"–ù–µ –±–æ–π—Ç–µ—Å—å –∏–¥—Ç–∏ –º–µ–¥–ª–µ–Ω–Ω–æ, –±–æ–π—Ç–µ—Å—å —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ.\" - –ö–∏—Ç–∞–π—Å–∫–∞—è –ø–æ—Å–ª–æ–≤–∏—Ü–∞",
            "üéØ \"–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∏—Ç—å –¥–µ—Ä–µ–≤–æ –±—ã–ª–æ 20 –ª–µ—Ç –Ω–∞–∑–∞–¥. –í—Ç–æ—Ä–æ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è - —Å–µ–π—á–∞—Å.\" - –ö–∏—Ç–∞–π—Å–∫–∞—è –ø–æ—Å–ª–æ–≤–∏—Ü–∞",
            "üíé \"–ë—É–¥—å—Ç–µ —Å–æ–±–æ–π. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.\" - –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
            "üî• \"–ù–µ –∂–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–µ–π—á–∞—Å –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–π—Ç–µ—Å—å –ø–æ —Ö–æ–¥—É –¥–µ–ª–∞.\" - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä",
            "üåà \"–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –±—É—Ä–∏ –≤—ã—Ö–æ–¥–∏—Ç —Å–æ–ª–Ω—Ü–µ.\" - –ù–∞—Ä–æ–¥–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å",
            "üé® \"–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç –º—É–∂–µ—Å—Ç–≤–∞.\" - –ê–Ω—Ä–∏ –ú–∞—Ç–∏—Å—Å",
            "‚ö° \"–í–∞—à–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–π –≥–æ–ª–æ–≤–µ.\" - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"
        ]
        
        quote = random.choice(quotes)
        await update.message.reply_text(f"‚ú® **–í–î–û–•–ù–û–í–õ–Ø–Æ–©–ê–Ø –¶–ò–¢–ê–¢–ê:**\n\n{quote}")
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in quote_command: {e}")

async def coin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Coin flip"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/coin")
        
        result = random.choice(["–û—Ä–µ–ª ü¶Ö", "–†–µ—à–∫–∞ üëë"])
        await update.message.reply_text(f"ü™ô **–ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞:** {result}")
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in coin_command: {e}")

async def dice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Dice roll"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/dice")
        
        result = random.randint(1, 6)
        dice_faces = ["‚öÄ", "‚öÅ", "‚öÇ", "‚öÉ", "‚öÑ", "‚öÖ"]
        await update.message.reply_text(f"üé≤ **–ö—É–±–∏–∫ –ø–æ–∫–∞–∑–∞–ª:** {dice_faces[result-1]} ({result})")
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in dice_command: {e}")

async def eightball_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Magic 8-ball"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/8ball")
        
        if not context.args:
            await update.message.reply_text(
                "üîÆ **–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –º–∞–≥–∏—á–µ—Å–∫–æ–º—É —à–∞—Ä—É!**\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ /8ball –°—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ –∏–∑—É—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ?\n"
                "‚Ä¢ /8ball –ë—É–¥–µ—Ç –ª–∏ –∑–∞–≤—Ç—Ä–∞ —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞?\n"
                "‚Ä¢ /8ball –°—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ —Å–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É?"
            )
            return
        
        answers = [
            "‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–∞!",
            "ü§î –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∞",
            "üéØ –î–∞, –∫–æ–Ω–µ—á–Ω–æ!",
            "üåü –ó–≤–µ–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç –¥–∞!",
            "‚ö° –í–æ–∑–º–æ–∂–Ω–æ",
            "üé≤ –ü–æ–ª–∞–≥–∞–π—Å—è –Ω–∞ —É–¥–∞—á—É",
            "‚ùì –¢—Ä—É–¥–Ω–æ —Å–∫–∞–∑–∞—Ç—å",
            "‚è≥ –°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ",
            "üö´ –õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–π—á–∞—Å",
            "‚ùå –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç",
            "üîÑ –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ",
            "üí´ –û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ"
        ]
        
        question = " ".join(context.args)
        answer = random.choice(answers)
        
        await update.message.reply_text(
            f"üîÆ **–ú–ê–ì–ò–ß–ï–°–ö–ò–ô –®–ê–†**\n\n"
            f"**–í–æ–ø—Ä–æ—Å:** {question}\n"
            f"**–û—Ç–≤–µ—Ç:** {answer}"
        )
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in 8ball_command: {e}")
```

# =============================================================================

# WEATHER AND CURRENCY

# =============================================================================

```
async def weather_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Weather information"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/weather")
        
        if not context.args:
            await update.message.reply_text(
                "üå§Ô∏è **–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥!**\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ /weather –ú–æ—Å–∫–≤–∞\n"
                "‚Ä¢ /weather –†–∏–º\n"
                "‚Ä¢ /weather New York"
            )
            return
        
        city = " ".join(context.args)
        
        # Simulate weather data (replace with real API)
        weather_data = {
            "temperature": random.randint(-10, 35),
            "description": random.choice(["—è—Å–Ω–æ", "–æ–±–ª–∞—á–Ω–æ", "–¥–æ–∂–¥—å", "—Å–Ω–µ–≥", "—Ç—É–º–∞–Ω", "—Å–æ–ª–Ω–µ—á–Ω–æ"]),
            "humidity": random.randint(30, 90),
            "wind": random.randint(0, 15),
            "pressure": random.randint(740, 780)
        }
        
        weather_icons = {
            "—è—Å–Ω–æ": "‚òÄÔ∏è",
            "—Å–æ–ª–Ω–µ—á–Ω–æ": "üåû", 
            "–æ–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è",
            "–¥–æ–∂–¥—å": "üåßÔ∏è",
            "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
            "—Ç—É–º–∞–Ω": "üå´Ô∏è"
        }
        
        icon = weather_icons.get(weather_data['description'], "üå§Ô∏è")
        
        weather_text = f"""
```

üå§Ô∏è **–ü–û–ì–û–î–ê –í {city.upper()}**

{icon} **–£—Å–ª–æ–≤–∏—è:** {weather_data[‚Äòdescription‚Äô]}
üå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {weather_data[‚Äòtemperature‚Äô]}¬∞C
üíß **–í–ª–∞–∂–Ω–æ—Å—Ç—å:** {weather_data[‚Äòhumidity‚Äô]}%
üí® **–í–µ—Ç–µ—Ä:** {weather_data[‚Äòwind‚Äô]} –º/—Å
üìä **–î–∞–≤–ª–µ–Ω–∏–µ:** {weather_data[‚Äòpressure‚Äô]} –º–º —Ä—Ç.—Å—Ç.

‚è∞ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.datetime.now().strftime(‚Äô%H:%M‚Äô)}
‚Äú‚Äù‚Äù

```
        await update.message.reply_text(weather_text)
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in weather_command: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")

async def currency_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Currency converter"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/currency")
        
        if len(context.args) < 2:
            await update.message.reply_text(
                "üí∞ **–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!**\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ /currency USD RUB\n"
                "‚Ä¢ /currency EUR USD 100\n"
                "‚Ä¢ /currency BTC USD\n\n"
                "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:** USD, EUR, RUB, GBP, JPY, CHF, CAD, AUD, BTC, ETH"
            )
            return
        
        from_currency = context.args[0].upper()
        to_currency = context.args[1].upper()
        amount = float(context.args[2]) if len(context.args) > 2 else 1.0
        
        # Simulate exchange rates (replace with real API)
        rates = {
            'USD': {'RUB': 92.5, 'EUR': 0.85, 'GBP': 0.73},
            'EUR': {'USD': 1.18, 'RUB': 109.2, 'GBP': 0.86},
            'RUB': {'USD': 0.011, 'EUR': 0.0091, 'GBP': 0.0079},
            'BTC': {'USD': 43000, 'EUR': 36500, 'RUB': 3980000}
        }
        
        if from_currency in rates and to_currency in rates[from_currency]:
            rate = rates[from_currency][to_currency]
            converted = amount * rate
            
            currency_text = f"""
```

üí∞ **–ö–û–ù–í–ï–†–¢–ï–† –í–ê–õ–Æ–¢**

üíµ **{amount} {from_currency} = {converted:.2f} {to_currency}**
üìä **–ö—É—Ä—Å:** 1 {from_currency} = {rate:.4f} {to_currency}
‚è∞ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.datetime.now().strftime(‚Äô%H:%M‚Äô)}

üí° *–ö—É—Ä—Å—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö*
‚Äú‚Äù‚Äù
else:
# Generate random rate for demonstration
rate = random.uniform(0.1, 100)
converted = amount * rate
currency_text = f‚Äù‚Äù‚Äù
üí∞ **–ö–û–ù–í–ï–†–¢–ï–† –í–ê–õ–Æ–¢**

üíµ **{amount} {from_currency} = {converted:.2f} {to_currency}**
üìä **–ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å:** 1 {from_currency} = {rate:.4f} {to_currency}
‚è∞ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.datetime.now().strftime(‚Äô%H:%M‚Äô)}

üí° *–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã*
‚Äú‚Äù‚Äù

```
        await update.message.reply_text(currency_text)
        self.add_experience(user_data, 1)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!")
    except Exception as e:
        logger.error(f"Error in currency_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.")
```

# =============================================================================

# SEARCH AND TRANSLATE

# =============================================================================

```
async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Internet search"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/search")
        
        if not context.args:
            await update.message.reply_text(
                "üîç **–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!**\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ /search Python –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
                "‚Ä¢ /search —Ä–µ—Ü–µ–ø—Ç –±–æ—Ä—â–∞\n"
                "‚Ä¢ /search –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
            )
            return
        
        query = " ".join(context.args)
        
        # Use AI for search if available
        if gemini_model:
            try:
                search_prompt = f"""
```

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: ‚Äú{query}‚Äù
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (200-300 —Å–ª–æ–≤),
–≤–∫–ª—é—á–∞—é—â–∏–π –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.
‚Äú‚Äù‚Äù

```
                response = await asyncio.wait_for(
                    asyncio.to_thread(gemini_model.generate_content, search_prompt),
                    timeout=15.0
                )
                
                if response.text:
                    result_text = f"""
```

üîç **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:** ‚Äú{query}‚Äù

{response.text}

üí° –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wiki {query}
‚Äú‚Äù‚Äù
else:
result_text = f‚Äùüîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É ‚Äò{query}‚Äô –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /wiki {query}‚Äù

```
            except Exception as e:
                logger.error(f"Search AI error: {e}")
                result_text = f"""
```

üîç **–ü–û–ò–°–ö:** ‚Äú{query}‚Äù

ü§ñ AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å‚Ä¶
üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–∫–∂–µ /wiki {query} –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Wikipedia
üåê –ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é: {query}?
‚Äú‚Äù‚Äù
else:
result_text = f‚Äù‚Äù‚Äù
üîç **–ü–û–ò–°–ö:** ‚Äú{query}‚Äù

üîç –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É
üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–∫–∂–µ:
‚Ä¢ /wiki {query} - –ø–æ–∏—Å–∫ –≤ Wikipedia
‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å AI: {query}?

ü§ñ AI –ø–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
‚Äú‚Äù‚Äù

```
        await update.message.reply_text(result_text)
        self.add_experience(user_data, 2)
        
    except Exception as e:
        logger.error(f"Error in search_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞.")

async def translate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Text translation"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/translate")
        
        if len(context.args) < 2:
            await update.message.reply_text(
                "üåê **–£–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!**\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ /translate en –ü—Ä–∏–≤–µ—Ç –º–∏—Ä\n"
                "‚Ä¢ /translate es –ö–∞–∫ –¥–µ–ª–∞?\n"
                "‚Ä¢ /translate fr –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å\n\n"
                "**–Ø–∑—ã–∫–∏:** en, es, fr, de, it, zh, ja, ko"
            )
            return
        
        target_lang = context.args[0].lower()
        text_to_translate = " ".join(context.args[1:])
        
        # Use AI for translation if available
        if gemini_model:
            try:
                translate_prompt = f"""
```

–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ {target_lang} —è–∑—ã–∫:
‚Äú{text_to_translate}‚Äù

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
‚Äú‚Äù‚Äù

```
                response = await asyncio.wait_for(
                    asyncio.to_thread(gemini_model.generate_content, translate_prompt),
                    timeout=10.0
                )
                
                if response.text:
                    translation = response.text.strip()
                    translate_text = f"""
```

üåê **–ü–ï–†–ï–í–û–î–ß–ò–ö**

üìù **–û—Ä–∏–≥–∏–Ω–∞–ª:** {text_to_translate}
üîÑ **–ü–µ—Ä–µ–≤–æ–¥ ({target_lang}):** {translation}

üí° Powered by AI
‚Äú‚Äù‚Äù
else:
translate_text = f‚Äùüåê –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.‚Äù

```
            except Exception as e:
                logger.error(f"Translation AI error: {e}")
                translate_text = f"""
```

üåê **–ü–ï–†–ï–í–û–î–ß–ò–ö**

üìù **–û—Ä–∏–≥–∏–Ω–∞–ª:** {text_to_translate}
üîÑ **–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:** {target_lang}

ü§ñ AI –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
‚Äú‚Äù‚Äù
else:
translate_text = f‚Äù‚Äù‚Äù
üåê **–ü–ï–†–ï–í–û–î–ß–ò–ö**

üìù –¢–µ–∫—Å—Ç: ‚Äú{text_to_translate}‚Äù
üéØ –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫: {target_lang}

ü§ñ AI –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
‚Äú‚Äù‚Äù

```
        await update.message.reply_text(translate_text)
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in translate_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞.")
```

# =============================================================================

# VIP SYSTEM

# =============================================================================

```
async def vip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """VIP information"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/vip")
        
        if self.is_vip(user_data):
            vip_text = f"""
```

üíé **–í–ê–® VIP –°–¢–ê–¢–£–°**

‚úÖ **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω
‚è∞ **–î–æ:** {user_data[‚Äòvip_expires‚Äô] if user_data[‚Äòvip_expires‚Äô] else ‚Äò–ë–µ—Å—Å—Ä–æ—á–Ω–æ‚Äô}
üÜô **–£—Ä–æ–≤–µ–Ω—å:** {user_data[‚Äòlevel‚Äô]}
‚≠ê **–û–ø—ã—Ç:** {user_data[‚Äòexperience‚Äô]}/100

üåü **VIP –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**
‚Ä¢ /secret - –°–µ–∫—Ä–µ—Ç–Ω—ã–µ VIP —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ /lottery - –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è
‚Ä¢ /priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ AI
‚Ä¢ –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã AI
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

üíé **–í—ã VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!**
‚Äú‚Äù‚Äù
else:
vip_text = ‚Äú‚Äù‚Äù
üíé **VIP –°–¢–ê–¢–£–°**

‚ùå **–£ –≤–∞—Å –Ω–µ—Ç VIP —Å—Ç–∞—Ç—É—Å–∞**

üåü **VIP –ü–†–ò–í–ò–õ–ï–ì–ò–ò:**
‚Ä¢ üìù –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ üé∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è
‚Ä¢ üîÆ –°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ AI
‚Ä¢ üéÅ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ üèÜ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
‚Ä¢ üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å VIP:**
‚Ä¢ 1 –Ω–µ–¥–µ–ª—è - 100 —Ä—É–±
‚Ä¢ 1 –º–µ—Å—è—Ü - 300 —Ä—É–±
‚Ä¢ 1 –≥–æ–¥ - 2000 —Ä—É–±
‚Ä¢ –ù–∞–≤—Å–µ–≥–¥–∞ - 5000 —Ä—É–±

üìû **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞!**
‚Äú‚Äù‚Äù

```
        await update.message.reply_text(vip_text)
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in vip_command: {e}")

async def secret_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Secret VIP function"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/secret")
        
        if not self.is_vip(user_data):
            await update.message.reply_text(
                "üíé **–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vip –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VIP —Å—Ç–∞—Ç—É—Å–µ."
            )
            return
        
        secrets = [
            "üîÆ **–¢–∞–π–Ω–∞ –¥–Ω—è:** –°–∞–º—ã–µ —É—Å–ø–µ—à–Ω—ã–µ –ª—é–¥–∏ —á–∏—Ç–∞—é—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º 50 –∫–Ω–∏–≥ –≤ –≥–æ–¥!",
            "üíé **–°–µ–∫—Ä–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π - —É—Ç—Ä–æ–º, –∫–æ–≥–¥–∞ –º–æ–∑–≥ —Å–≤–µ–∂–∏–π!",
            "üåü **VIP —Å–æ–≤–µ—Ç:** –¢–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ 40%!",
            "‚ö° **–ù–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç:** –ú–µ–¥–∏—Ç–∞—Ü–∏—è –≤—Å–µ–≥–æ 10 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å —É–ª—É—á—à–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –Ω–∞ 23%!",
            "üß† **–õ–∞–π—Ñ—Ö–∞–∫:** –ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ–±—ä–µ–º —Å–µ—Ä–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞ –º–æ–∑–≥–∞!",
            "üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç:** –ü—Ä–∞–≤–∏–ª–æ 50/30/20 - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤!",
            "üéØ **–ú–æ—Ç–∏–≤–∞—Ü–∏—è:** –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ 10 —Ä–∞–∑!",
            "üöÄ **–ö–∞—Ä—å–µ—Ä–∞:** Networking –¥–∞–µ—Ç 85% –≤—Å–µ—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!",
            "üí° **–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:** –õ—É—á—à–∏–µ –∏–¥–µ–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–æ–∫ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ!",
            "üèÜ **–£—Å–ø–µ—Ö:** –õ—é–¥–∏ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–≤–∞—é—Ç —á—Ç–æ –º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –∑–∞ –≥–æ–¥ –∏ –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–≤–∞—é—Ç –∑–∞ 10 –ª–µ—Ç!"
        ]
        
        secret = random.choice(secrets)
        await update.message.reply_text(f"{secret}\n\nüíé **–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ –¥–ª—è VIP!**")
        self.add_experience(user_data, 3)
        
    except Exception as e:
        logger.error(f"Error in secret_command: {e}")

async def lottery_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """VIP lottery"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/lottery")
        
        if not self.is_vip(user_data):
            await update.message.reply_text("üíé **–õ–æ—Ç–µ—Ä–µ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!**")
            return
        
        # Check if already played today
        today = datetime.datetime.now().date().isoformat()
        last_lottery = user_data['memory_data'].get('last_lottery')
        
        if last_lottery == today:
            await update.message.reply_text(
                "üé∞ **–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –ª–æ—Ç–µ—Ä–µ–µ —Å–µ–≥–æ–¥–Ω—è!**\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º —à–∞–Ω—Å–æ–º –≤—ã–∏–≥—Ä–∞—Ç—å! üíé"
            )
            return
        
        # Lottery logic
        win_chance = random.randint(1, 100)
        
        if win_chance <= 10:  # 10% chance of jackpot
            prize = "üèÜ **–î–ñ–ï–ö–ü–û–¢!** +100 –æ–ø—ã—Ç–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!"
            user_data['experience'] += 100
            user_data['achievements'].append(f"üé∞ –í—ã–∏–≥—Ä–∞–ª –¥–∂–µ–∫–ø–æ—Ç {today}")
        elif win_chance <= 30:  # 20% chance of big win
            prize = "üéÅ **–û—Ç–ª–∏—á–Ω–æ!** +50 –æ–ø—ã—Ç–∞!"
            user_data['experience'] += 50
        elif win_chance <= 60:  # 30% chance of medium win
            prize = "‚ú® **–ù–µ–ø–ª–æ—Ö–æ!** +20 –æ–ø—ã—Ç–∞!"
            user_data['experience'] += 20
        else:  # 40% chance of consolation prize
            prize = "üçÄ **–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç –±–æ–ª—å—à–µ!** +5 –æ–ø—ã—Ç–∞ –∑–∞ —É—á–∞—Å—Ç–∏–µ."
            user_data['experience'] += 5
        
        # Save lottery participation
        user_data['memory_data']['last_lottery'] = today
        save_data = (
            user_data['user_id'], user_data['username'], user_data['first_name'],
            user_data['is_vip'], user_data['vip_expires'], user_data['language'],
            json.dumps(user_data['notes']), json.dumps(user_data['reminders']),
            user_data['birthday'], user_data['nickname'], user_data['level'],
            user_data['experience'], json.dumps(user_data['achievements']),
            json.dumps(user_data['memory_data']), datetime.datetime.now().isoformat()
        )
        self.db.save_user(save_data)
        
        lottery_text = f"""
```

üé∞ **VIP –õ–û–¢–ï–†–ï–Ø**

üé≤ **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** {win_chance}/100
üéÅ **–ü—Ä–∏–∑:** {prize}

üíé **–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º —à–∞–Ω—Å–æ–º!**
‚Äú‚Äù‚Äù

```
        await update.message.reply_text(lottery_text)
        self.add_experience(user_data, 2)
        
    except Exception as e:
        logger.error(f"Error in lottery_command: {e}")
```

# =============================================================================

# CREATOR COMMANDS

# =============================================================================

```
async def grant_vip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Grant VIP status (creator only)"""
    try:
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå **–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é!**")
            return
        
        self.db.log_command(update.effective_user.id, "/grant_vip")
        
        if len(context.args) < 2:
            await update.message.reply_text(
                "üëë **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** /grant_vip [user_id] [duration]\n\n"
                "**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**\n"
                "‚Ä¢ week - –Ω–µ–¥–µ–ª—è\n"
                "‚Ä¢ month - –º–µ—Å—è—Ü\n"
                "‚Ä¢ year - –≥–æ–¥\n"
                "‚Ä¢ permanent - –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** /grant_vip 123456789 month"
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            duration = context.args[1].lower()
            
            target_user_data = self.get_user_data(target_user_id)
            
            # Set VIP expiration
            now = datetime.datetime.now()
            if duration == "week":
                expires = now + datetime.timedelta(weeks=1)
            elif duration == "month":
                expires = now + datetime.timedelta(days=30)
            elif duration == "year":
                expires = now + datetime.timedelta(days=365)
            elif duration == "permanent":
                expires = None
            else:
                await update.message.reply_text("‚ùå **–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!**")
                return
            
            target_user_data['is_vip'] = True
            target_user_data['vip_expires'] = expires.isoformat() if expires else None
            
            # Save user data
            save_data = (
                target_user_data['user_id'], target_user_data['username'], target_user_data['first_name'],
                target_user_data['is_vip'], target_user_data['vip_expires'], target_user_data['language'],
                json.dumps(target_user_data['notes']), json.dumps(target_user_data['reminders']),
                target_user_data['birthday'], target_user_data['nickname'], target_user_data['level'],
                target_user_data['experience'], json.dumps(target_user_data['achievements']),
                json.dumps(target_user_data['memory_data']), datetime.datetime.now().isoformat()
            )
            self.db.save_user(save_data)
            
            await update.message.reply_text(
                f"‚úÖ **VIP —Å—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}!**\n\n"
                f"üìÖ **–î–æ:** {expires.strftime('%d.%m.%Y') if expires else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}\n"
                f"üíé **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω"
            )
            
            # Notify user (if possible)
            try:
                await context.bot.send_message(
                    target_user_id,
                    f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–¥–∞–Ω VIP —Å—Ç–∞—Ç—É—Å!**\n\n"
                    f"üìÖ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {expires.strftime('%d.%m.%Y') if expires else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}\n"
                    f"üíé **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vip –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!**"
                )
            except:
                pass  # User might have blocked the bot
                
        except ValueError:
            await update.message.reply_text("‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!**")
            
    except Exception as e:
        logger.error(f"Error in grant_vip_command: {e}")

async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Statistics"""
    try:
        user = update.effective_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        self.db.log_command(user.id, "/stats")
        
        if self.is_creator(user.id):
            # Creator gets full bot statistics
            stats = self.db.get_stats()
            
            stats_text = f"""
```

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê BOTA**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {stats[‚Äòtotal_users‚Äô]}
üíé **VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {stats[‚Äòvip_users‚Äô]}
üìà **–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥:** {stats[‚Äòtotal_commands‚Äô]}

üî• **–ü–û–ü–£–õ–Ø–†–ù–´–ï –ö–û–ú–ê–ù–î–´:**
‚Äú‚Äù‚Äù

```
            for cmd, count in stats['popular_commands']:
                stats_text += f"‚Ä¢ {cmd}: {count} —Ä–∞–∑\n"
            
            stats_text += f"""
```

‚ö° **–°—Ç–∞—Ç—É—Å:** –û–Ω–ª–∞–π–Ω
ü§ñ **–í–µ—Ä—Å–∏—è:** 2.0 Full
üëë **–í–∞—à —Å—Ç–∞—Ç—É—Å:** –°–æ–∑–¥–∞—Ç–µ–ª—å
üìÖ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.datetime.now().strftime(‚Äô%d.%m.%Y %H:%M‚Äô)}

üöÄ **–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!**
‚Äú‚Äù‚Äù
else:
# Regular user gets personal stats
stats_text = f‚Äù‚Äù‚Äù
üìä **–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üë§ **–ò–º—è:** {user_data[‚Äòfirst_name‚Äô]}
üÜô **–£—Ä–æ–≤–µ–Ω—å:** {user_data[‚Äòlevel‚Äô]}
‚≠ê **–û–ø—ã—Ç:** {user_data[‚Äòexperience‚Äô]}/100
üíé **VIP:** {‚Äú‚úÖ –ê–∫—Ç–∏–≤–µ–Ω‚Äù if self.is_vip(user_data) else ‚Äú‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω‚Äù}
üìù **–ó–∞–º–µ—Ç–æ–∫:** {len(user_data[‚Äònotes‚Äô])}
üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π:** {len(user_data[‚Äòachievements‚Äô])}
üåê **–Ø–∑—ã–∫:** {user_data[‚Äòlanguage‚Äô]}

üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ —á–∞—â–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞!**
‚Äú‚Äù‚Äù

```
        await update.message.reply_text(stats_text)
        self.add_experience(user_data, 1)
        
    except Exception as e:
        logger.error(f"Error in stats_command: {e}")
```

# =============================================================================

# CALLBACK HANDLERS

# =============================================================================

```
async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle inline keyboard callbacks"""
    try:
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        user_data = self.get_user_data(user.id, user.username, user.first_name)
        
        if query.data == "help":
            await query.edit_message_text(
                "üìã **–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ /help**\n\n"
                "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
                "‚Ä¢ ü§ñ AI-—á–∞—Ç\n"
                "‚Ä¢ üìù –ó–∞–º–µ—Ç–∫–∏\n"
                "‚Ä¢ üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n"
                "‚Ä¢ üå§Ô∏è –ü–æ–≥–æ–¥–∞\n"
                "‚Ä¢ üí∞ –í–∞–ª—é—Ç—ã\n"
                "‚Ä¢ üîç –ü–æ–∏—Å–∫"
            )
        elif query.data == "vip_info":
            vip_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if self.is_vip(user_data) else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            await query.edit_message_text(
                f"üíé **VIP –°–¢–ê–¢–£–°**\n\n"
                f"–°—Ç–∞—Ç—É—Å: {vip_status}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vip –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            )
        elif query.data == "ai_demo":
            await query.edit_message_text(
                "ü§ñ **AI-—á–∞—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**\n\n"
                "**–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å:**\n"
                "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ—Å–º–æ—Å–µ\n"
                "‚Ä¢ –ö–∞–∫ –¥–µ–ª–∞?\n"
                "‚Ä¢ –ü–æ–º–æ–≥–∏ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π\n"
                "‚Ä¢ –ü—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞\n"
                "‚Ä¢ –û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É\n\n"
                "**–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai [–≤–æ–ø—Ä–æ—Å]**"
            )
        elif query.data == "my_stats":
            stats_text = f"""
```

üìä **–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üë§ **–ò–º—è:** {user_data[‚Äòfirst_name‚Äô]}
üÜô **–£—Ä–æ–≤–µ–Ω—å:** {user_data[‚Äòlevel‚Äô]}
‚≠ê **–û–ø—ã—Ç:** {user_data[‚Äòexperience‚Äô]}/100
üíé **VIP:** {‚Äú‚úÖ –ê–∫—Ç–∏–≤–µ–Ω‚Äù if self.is_vip(user_data) else ‚Äú‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω‚Äù}
üìù **–ó–∞–º–µ—Ç–æ–∫:** {len(user_data[‚Äònotes‚Äô])}
üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π:** {len(user_data[‚Äòachievements‚Äô])}
‚Äú‚Äù‚Äù
await query.edit_message_text(stats_text)

```
    except Exception as e:
        logger.error(f"Callback error: {e}")
```

# =============================================================================

# BOT RUNNER

# =============================================================================

```
async def run_bot(self):
    """Run the bot"""
    try:
        logger.info("üöÄ Building Telegram application...")
        
        # Create application
        application = Application.builder().token(BOT_TOKEN).build()
        
        # Basic commands
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("info", self.info_command))
        
        # AI commands
        application.add_handler(CommandHandler("ai", self.ai_command))
        
        # Notes system
        application.add_handler(CommandHandler("note", self.note_command))
        application.add_handler(CommandHandler("notes", self.notes_command))
        application.add_handler(CommandHandler("delnote", self.delnote_command))
        application.add_handler(CommandHandler("findnote", self.findnote_command))
        
        # Time and date
        application.add_handler(CommandHandler("time", self.time_command))
        application.add_handler(CommandHandler("date", self.date_command))
        
        # Entertainment
        application.add_handler(CommandHandler("joke", self.joke_command))
        application.add_handler(CommandHandler("fact", self.fact_command))
        application.add_handler(CommandHandler("quote", self.quote_command))
        application.add_handler(CommandHandler("coin", self.coin_command))
        application.add_handler(CommandHandler("dice", self.dice_command))
        application.add_handler(CommandHandler("8ball", self.eightball_command))
        
        # Weather and currency
        application.add_handler(CommandHandler("weather", self.weather_command))
        application.add_handler(CommandHandler("currency", self.currency_command))
        
        # Search and translate
        application.add_handler(CommandHandler("search", self.search_command))
        application.add_handler(CommandHandler("translate", self.translate_command))
        
        # VIP system
        application.add_handler(CommandHandler("vip", self.vip_command))
        application.add_handler(CommandHandler("secret", self.secret_command))
        application.add_handler(CommandHandler("lottery", self.lottery_command))
        
        # Creator commands
        application.add_handler(CommandHandler("grant_vip", self.grant_vip_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        
        # Callback handlers
        application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # Message handler (AI auto-response)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # Error handler
        async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
            logger.error(f"Update error: {context.error}")
            if update and hasattr(update, 'effective_message'):
                try:
                    await update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                except:
                    pass
        
        application.add_error_handler(error_handler)
        
        # Start the bot
        logger.info("‚úÖ Ernest's AI Bot is starting...")
        logger.info(f"üéØ Creator ID: {CREATOR_ID}")
        logger.info(f"ü§ñ AI Status: {'‚úÖ Ready' if gemini_model else '‚ùå Fallback mode'}")
        logger.info(f"üìä Database: {'‚úÖ Ready' if self.db else '‚ùå Error'}")
        
        await application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå Critical startup error: {e}")
        raise
```

# =============================================================================

# MAIN ENTRY POINT

# =============================================================================

async def main():
‚Äú‚Äù‚ÄúMain entry point‚Äù‚Äù‚Äù
try:
logger.info(‚Äù=‚Äù * 60)
logger.info(‚ÄúüöÄ ERNEST‚ÄôS TELEGRAM AI BOT - FULL VERSION‚Äù)
logger.info(‚Äú150+ —Ñ—É–Ω–∫—Ü–∏–π, AI —á–∞—Ç, VIP —Å–∏—Å—Ç–µ–º–∞‚Äù)
logger.info(‚Äù=‚Äù * 60)

```
    bot = ErnestBot()
    await bot.run_bot()
    
except Exception as e:
    logger.error(f"üí• Fatal error: {e}")
    raise
```

if **name** == ‚Äú**main**‚Äù:
try:
asyncio.run(main())
except KeyboardInterrupt:
logger.info(‚Äúüõë Bot stopped by user‚Äù)
except Exception as e:
logger.error(f‚Äùüî• Critical error: {e}‚Äù)
exit(1)
