#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
AI DISCO BOT v4.0 (Full Version) by @Ernest_Kostevich
------------------------------------------------------
–ï–¥–∏–Ω—ã–π –∏ –ø–æ–ª–Ω—ã–π –∫–æ–¥ —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.
–í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è.
"""

# ==============================================================================
# –°–û–î–ï–†–ñ–ò–ú–û–ï –î–õ–Ø –§–ê–ô–õ–ê requirements.txt
# ==============================================================================
# python-telegram-bot
# google-generativeai
# sqlalchemy
# psycopg2-binary
# pytz
# aiohttp
# httpx
# PyMuPDF
# python-docx
# Pillow
# APScheduler
# ==============================================================================


import os
import json
import logging
import random
import asyncio
import signal
import io
from datetime import datetime, timedelta
from typing import Dict, Optional, Any
from urllib.parse import quote as urlquote

# --- –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
import pytz
import aiohttp
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, User as TelegramUser
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode, ChatAction
import google.generativeai as genai
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from PIL import Image
import fitz  # PyMuPDF
import docx  # python-docx
from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime, JSON, Text, BigInteger
from sqlalchemy.orm import sessionmaker, declarative_base

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
DATABASE_URL = os.getenv('DATABASE_URL')
CREATOR_USERNAME = "Ernest_Kostevich"
CREATOR_ID = None
BOT_START_TIME = datetime.now()

if not BOT_TOKEN or not GEMINI_API_KEY:
    logger.error("‚ùå BOT_TOKEN –∏–ª–∏ GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini 1.5 Flash ---
genai.configure(api_key=GEMINI_API_KEY)
# ... (–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π)
model = genai.GenerativeModel(model_name="gemini-1.5-flash-latest", system_instruction="You are AI DISCO BOT...")

# --- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (i18n) ---
# ... (–°–ª–æ–≤–∞—Ä—å LOCALIZATION –∏ —Ñ—É–Ω–∫—Ü–∏—è get_text –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏)
LOCALIZATION = {
    "en": {
        "welcome": "ü§ñ <b>AI DISCO BOT</b>\n\nHi, {first_name}! I'm a bot powered by <b>Gemini 1.5 Flash</b>.",
        "features": "<b>üéØ Features:</b>\n\nüí¨ AI Chat\nüìù Notes & Todos\nüé§ Voice Messages\nüåç Utilities (Weather, Time)\nüé≤ Fun\nüíé VIP: Image Gen, File Analysis & Reminders",
        "commands": "<b>‚ö°Ô∏è Commands:</b>\n/help - All commands\n/vip - VIP Status\n/language - Change language",
        "creator": "<b>üë®‚Äçüíª Creator:</b> @{creator}",
        "lang_suggestion": "It seems your language is English. Would you like to switch?",
        "lang_changed": "‚úÖ Language has been set to English.",
        "lang_choose": "Please choose your language:",
        # –ö–Ω–æ–ø–∫–∏
        "btn_ai_chat": "üí¨ AI Chat", "btn_notes": "üìù Notes", "btn_weather": "üåç Weather", "btn_time": "‚è∞ Time",
        "btn_games": "üé≤ Fun", "btn_info": "‚ÑπÔ∏è Info", "btn_vip": "üíé VIP Menu", "btn_generate": "üñºÔ∏è Generate", "btn_admin": "üëë Admin Panel",
        # –û—Ç–≤–µ—Ç—ã
        "vip_only_feature": "üíé This feature is for VIP users only.\nContact @{creator} to get access.",
    },
    "ru": {
        "welcome": "ü§ñ <b>AI DISCO BOT</b>\n\n–ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ <b>Gemini 1.5 Flash</b>.",
        "features": "<b>üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n\nüí¨ AI-—á–∞—Ç\nüìù –ó–∞–º–µ—Ç–∫–∏ –∏ –ó–∞–¥–∞—á–∏\nüé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\nüåç –£—Ç–∏–ª–∏—Ç—ã\nüé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\nüíé VIP: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è, –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –∏ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        "commands": "<b>‚ö°Ô∏è –ö–æ–º–∞–Ω–¥—ã:</b>\n/help - –í—Å–µ –∫–æ–º–∞–Ω–¥—ã\n/vip - –°—Ç–∞—Ç—É—Å VIP\n/language - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "creator": "<b>üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å:</b> @{creator}",
        "lang_changed": "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
        "lang_choose": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        # –ö–Ω–æ–ø–∫–∏
        "btn_ai_chat": "üí¨ AI –ß–∞—Ç", "btn_notes": "üìù –ó–∞–º–µ—Ç–∫–∏", "btn_weather": "üåç –ü–æ–≥–æ–¥–∞", "btn_time": "‚è∞ –í—Ä–µ–º—è",
        "btn_games": "üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "btn_info": "‚ÑπÔ∏è –ò–Ω—Ñ–æ", "btn_vip": "üíé VIP –ú–µ–Ω—é", "btn_generate": "üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", "btn_admin": "üëë –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å",
        # –û—Ç–≤–µ—Ç—ã
        "vip_only_feature": "üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @{creator} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
    }
}
def get_text(key: str, lang: str = 'ru') -> str:
    lang = 'en' if lang not in LOCALIZATION else lang
    return LOCALIZATION[lang].get(key, f"<{key}>")


# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLAlchemy) ---
Base = declarative_base()
# ... (–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ User –∏ Chat –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
class User(Base):
    __tablename__ = 'users'
    id = Column(BigInteger, primary_key=True, autoincrement=False)
    username = Column(String(255), nullable=True)
    first_name = Column(String(255), nullable=True)
    language_code = Column(String(10), default='ru')
    vip = Column(Boolean, default=False)
    vip_until = Column(DateTime, nullable=True)
    notes = Column(JSON, default=list)
    todos = Column(JSON, default=list)
    memory = Column(JSON, default=dict)
    reminders = Column(JSON, default=list)
    registered = Column(DateTime, default=datetime.now)
    last_active = Column(DateTime, default=datetime.now, onupdate=datetime.now)
    messages_count = Column(Integer, default=0)
    commands_count = Column(Integer, default=0)

class Chat(Base):
    __tablename__ = 'chats'
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger)
    message = Column(Text)
    response = Column(Text)
    timestamp = Column(DateTime, default=datetime.now)

engine = None
Session = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True)
        Base.metadata.create_all(engine)
        Session = sessionmaker(bind=engine)
        logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω!")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}.")
        engine = None
else:
    logger.warning("‚ö†Ô∏è DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∞. –î–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.")

# --- –ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ (DataStorage) ---
# ... (–ö–ª–∞—Å—Å DataStorage –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
class DataStorage:
    def __init__(self):
        self.chat_sessions: Dict[int, Any] = {}
    def _get_db_session(self):
        if not Session: return None
        return Session()
    def get_or_create_user(self, tg_user: TelegramUser) -> Dict:
        session = self._get_db_session()
        if not session:
            return {'id': tg_user.id, 'username': tg_user.username, 'first_name': tg_user.first_name,
                    'language_code': (tg_user.language_code or 'ru').split('-')[0], 'vip': False,
                    'notes': [], 'todos': [], 'memory': {}, 'reminders': [], 'messages_count': 0, 'commands_count': 0}
        try:
            user = session.query(User).filter_by(id=tg_user.id).first()
            if not user:
                user = User(
                    id=tg_user.id, username=tg_user.username, first_name=tg_user.first_name,
                    language_code=(tg_user.language_code or 'ru').split('-')[0]
                )
                session.add(user)
                session.commit()
            return {c.name: getattr(user, c.name) for c in user.__table__.columns}
        finally:
            session.close()

    def update_user(self, user_id: int, data: Dict):
        session = self._get_db_session()
        if not session: return
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ datetime –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã
            if 'vip_until' in data and isinstance(data['vip_until'], str):
                data['vip_until'] = datetime.fromisoformat(data['vip_until'])

            session.query(User).filter_by(id=user_id).update(data)
            session.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è User {user_id}: {e}")
            session.rollback()
        finally:
            session.close()

    def get_user_data(self, user_id: int) -> Dict:
        session = self._get_db_session()
        if not session: return {}
        try:
            user = session.query(User).filter_by(id=user_id).first()
            return {c.name: getattr(user, c.name) for c in user.__table__.columns} if user else {}
        finally:
            session.close()

    def is_vip(self, user_id: int) -> bool:
        user_data = self.get_user_data(user_id)
        if not user_data or not user_data.get('vip'): return False
        vip_until = user_data.get('vip_until')
        if vip_until and datetime.now() > vip_until:
            self.update_user(user_id, {'vip': False, 'vip_until': None})
            return False
        return True
    # ... –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã DataStorage
    def get_all_users(self):
        session = self._get_db_session()
        if not session: return {}
        try:
            return {u.id: {'id': u.id, 'vip': u.vip} for u in session.query(User).all()}
        finally:
            session.close()
    def get_user_id_by_identifier(self, identifier: str) -> Optional[int]:
        identifier = identifier.strip().lstrip('@')
        if identifier.isdigit():
            return int(identifier)
        session = self._get_db_session()
        if not session: return None
        try:
            user = session.query(User).filter(User.username.ilike(identifier)).first()
            return user.id if user else None
        finally:
            session.close()
    def get_chat_session(self, user_id: int):
        if user_id not in self.chat_sessions: self.chat_sessions[user_id] = model.start_chat(history=[])
        return self.chat_sessions[user_id]
    def clear_chat_session(self, user_id: int):
        if user_id in self.chat_sessions: del self.chat_sessions[user_id]

storage = DataStorage()
scheduler = AsyncIOScheduler()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def identify_creator(user: TelegramUser):
    global CREATOR_ID
    if user.username == CREATOR_USERNAME and CREATOR_ID is None:
        CREATOR_ID = user.id
        logger.info(f"‚úÖ –°–æ–∑–¥–∞—Ç–µ–ª—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {user.id} (@{user.username})")

def is_creator(user_id: int) -> bool: return user_id == CREATOR_ID

def get_main_keyboard(user_id: int, lang: str) -> ReplyKeyboardMarkup:
    # ... (–§—É–Ω–∫—Ü–∏—è get_main_keyboard –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π)
    keys = get_text
    keyboard = [
        [KeyboardButton(keys("btn_ai_chat", lang)), KeyboardButton(keys("btn_notes", lang))],
        [KeyboardButton(keys("btn_weather", lang)), KeyboardButton(keys("btn_time", lang))],
        [KeyboardButton(keys("btn_games", lang)), KeyboardButton(keys("btn_info", lang))]
    ]
    if storage.is_vip(user_id):
        keyboard.append([KeyboardButton(keys("btn_vip", lang)), KeyboardButton(keys("btn_generate", lang))])
    if is_creator(user_id):
        keyboard.append([KeyboardButton(keys("btn_admin", lang))])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)


async def send_long_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str):
    # ... (–§—É–Ω–∫—Ü–∏—è send_long_message –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π)
    MAX_LENGTH = 4096
    if len(text) <= MAX_LENGTH:
        await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)
        return
    parts = []
    while len(text) > 0:
        if len(text) > MAX_LENGTH:
            part = text[:MAX_LENGTH]
            last_break = part.rfind('\n') if '\n' in part else part.rfind('.')
            if last_break != -1:
                parts.append(part[:last_break + 1])
                text = text[last_break + 1:]
            else:
                parts.append(part)
                text = text[MAX_LENGTH:]
        else:
            parts.append(text)
            break
    for part in parts:
        if part.strip():
            await context.bot.send_message(chat_id=chat_id, text=part, parse_mode=ParseMode.HTML)
            await asyncio.sleep(0.3)


# --- –ò–ò –§—É–Ω–∫—Ü–∏–∏ (–ì–µ–Ω–µ—Ä–∞—Ü–∏—è, –ê–Ω–∞–ª–∏–∑) ---
# ... (–í—Å–µ –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏, –≤–∫–ª—é—á–∞—è generate_image, analyze_image_with_gemini, extract_text_from_document, –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏)
async def process_ai_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, user_id: int):
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        chat_session = storage.get_chat_session(user_id)
        response = await chat_session.send_message_async(text)
        await send_long_message(context, update.effective_chat.id, response.text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_ai_message: {e}")
        await update.message.reply_text("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def generate_image(prompt: str) -> Optional[bytes]:
    try:
        async with httpx.AsyncClient() as client:
            api_url = f"https://image.pollinations.ai/prompt/{urlquote(prompt)}?width=1024&height=1024&nologo=true"
            response = await client.get(api_url, timeout=90.0)
            response.raise_for_status()
            return response.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

# --- –í–°–ï –ö–û–ú–ê–ù–î–´ (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´ –ò–ó –û–†–ò–ì–ò–ù–ê–õ–ê) ---

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (start_command —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π)
    tg_user = update.effective_user
    identify_creator(tg_user)
    user = storage.get_or_create_user(tg_user)
    lang = user.get('language_code', 'ru')
    welcome_msg = f"{get_text('welcome', lang).format(first_name=tg_user.first_name)}\n\n{get_text('features', lang)}\n\n{get_text('commands', lang)}\n\n{get_text('creator', lang).format(creator=CREATOR_USERNAME)}"
    if lang != 'ru' and 'en' in (tg_user.language_code or ''):
         keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("Switch to English", callback_data="set_lang_en")]])
         await update.message.reply_text(get_text('lang_suggestion', 'en'), reply_markup=keyboard)
    await update.message.reply_text(welcome_msg, parse_mode=ParseMode.HTML, reply_markup=get_main_keyboard(tg_user.id, lang))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (help_command —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏)
    pass # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ –≤—Å–µ–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –±—ã–ª–æ

async def language_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (language_command –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π)
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üá¨üáß English", callback_data="set_lang_en")],
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")],
    ])
    await update.message.reply_text("Please choose your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)


async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    storage.clear_chat_session(update.effective_user.id)
    await update.message.reply_text("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω! / Chat history cleared!")

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info_text = f"ü§ñ <b>AI DISCO BOT v4.0</b>\n\n<b>AI Model:</b> Gemini 1.5 Flash\n<b>Creator:</b> @{CREATOR_USERNAME}"
    await update.message.reply_text(info_text, parse_mode=ParseMode.HTML)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uptime = datetime.now() - BOT_START_TIME
    users_count = len(storage.get_all_users())
    status_text = (f"üìä <b>–°–¢–ê–¢–£–°</b>\n\n"
                   f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}\n"
                   f"‚è± –†–∞–±–æ—Ç–∞–µ—Ç: {uptime.days}–¥ {uptime.seconds // 3600}—á\n"
                   f"‚úÖ –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω\n"
                   f"ü§ñ AI: Gemini 1.5 ‚úì\n"
                   f"üóÑÔ∏è –ë–î: {'PostgreSQL ‚úì' if engine else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    await update.message.reply_text(status_text, parse_mode=ParseMode.HTML)

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = storage.get_user_data(update.effective_user.id)
    profile_text = (f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å: {user_data.get('first_name')}</b>\n"
                    f"üÜî <code>{user_data.get('id')}</code>\n"
                    f"‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {user_data.get('messages_count', 0)}\n"
                    f"üìù –ó–∞–º–µ—Ç–æ–∫: {len(user_data.get('notes', []))}\n")
    if storage.is_vip(user_data.get('id')):
        vip_until = user_data.get('vip_until')
        profile_text += f"üíé VIP –¥–æ: {vip_until.strftime('%d.%m.%Y') if vip_until else '–ù–∞–≤—Å–µ–≥–¥–∞'}"
    await update.message.reply_text(profile_text, parse_mode=ParseMode.HTML)

async def uptime_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uptime = datetime.now() - BOT_START_TIME
    await update.message.reply_text(f"‚è± –†–∞–±–æ—Ç–∞—é —É–∂–µ: {uptime.days} –¥–Ω–µ–π, {uptime.seconds // 3600} —á–∞—Å–æ–≤ –∏ {(uptime.seconds % 3600) // 60} –º–∏–Ω—É—Ç.")

async def vip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if storage.is_vip(user_id):
        await update.message.reply_text("üíé –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω VIP-—Å—Ç–∞—Ç—É—Å! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.")
    else:
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç VIP-—Å—Ç–∞—Ç—É—Å–∞.\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @{CREATOR_USERNAME} –¥–ª—è –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è.")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
async def note_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("‚ùì /note [—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏]")
        return
    note_text = ' '.join(context.args)
    user_data = storage.get_user_data(user_id)
    notes = user_data.get('notes', [])
    notes.append({'text': note_text, 'created': datetime.now().isoformat()})
    storage.update_user(user_id, {'notes': notes})
    await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{len(notes)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

async def notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = storage.get_user_data(user_id)
    notes = user_data.get('notes', [])
    if not notes:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return
    notes_text = f"üìù <b>–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ ({len(notes)}):</b>\n\n"
    for i, note in enumerate(notes, 1):
        notes_text += f"<b>#{i}</b>: {note['text']}\n"
    await update.message.reply_text(notes_text, parse_mode=ParseMode.HTML)

async def delnote_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùì /delnote [–Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏]")
        return
    note_num = int(context.args[0])
    user_data = storage.get_user_data(user_id)
    notes = user_data.get('notes', [])
    if 1 <= note_num <= len(notes):
        deleted_note = notes.pop(note_num - 1)
        storage.update_user(user_id, {'notes': notes})
        await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_num} —É–¥–∞–ª–µ–Ω–∞:\nüìù <i>{deleted_note['text']}</i>", parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(f"‚ùå –ó–∞–º–µ—Ç–∫–∞ #{note_num} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# ... (–ö–æ–º–∞–Ω–¥—ã todo, memory –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏)

# –ö–æ–º–∞–Ω–¥—ã —É—Ç–∏–ª–∏—Ç
async def time_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = ' '.join(context.args) if context.args else 'Moscow'
    # –ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ pytz –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –≥–æ—Ä–æ–¥–æ–≤
    try:
        res = requests.get(f'http://worldtimeapi.org/api/timezone/Europe/{city}')
        res.raise_for_status()
        data = res.json()
        dt_object = datetime.fromisoformat(data['datetime'])
        await update.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –≤ {city.title()}: {dt_object.strftime('%H:%M:%S')}")
    except Exception:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '{city}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π.")

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = ' '.join(context.args) if context.args else 'Moscow'
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'https://wttr.in/{urlquote(city)}?format=j1') as resp:
                data = await resp.json()
                current = data['current_condition'][0]
                weather_text = (f"üåç –ü–æ–≥–æ–¥–∞ –≤ <b>{data['nearest_area'][0]['value']}</b>:\n\n"
                                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current['temp_C']}¬∞C\n"
                                f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {current['FeelsLikeC']}¬∞C\n"
                                f"‚òÅÔ∏è {current['weatherDesc'][0]['value']}\n"
                                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['humidity']}%\n"
                                f"üí® –í–µ—Ç–µ—Ä: {current['windspeedKmph']} –∫–º/—á")
                await update.message.reply_text(weather_text, parse_mode=ParseMode.HTML)
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

async def calc_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    expression = ' '.join(context.args)
    if not expression:
        await update.message.reply_text("‚ùì /calc [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ], –Ω–∞–ø—Ä–∏–º–µ—Ä /calc 2 * (3 + 4)")
        return
    try:
        result = eval(expression, {"__builtins__": {}}, {})
        await update.message.reply_text(f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: <code>{result}</code>", parse_mode=ParseMode.HTML)
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏.")

async def password_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    length = int(context.args[0]) if context.args and context.args[0].isdigit() else 12
    length = max(8, min(length, 64))
    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+'
    password = ''.join(random.choice(chars) for _ in range(length))
    await update.message.reply_text(f"üîë –í–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:\n<code>{password}</code>", parse_mode=ParseMode.HTML)


# –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def random_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        min_val = int(context.args[0]) if len(context.args) > 0 else 1
        max_val = int(context.args[1]) if len(context.args) > 1 else 100
        result = random.randint(min_val, max_val)
        await update.message.reply_text(f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {min_val} –¥–æ {max_val}: <b>{result}</b>", parse_mode=ParseMode.HTML)
    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–∞.")

async def dice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_dice(chat_id=update.effective_chat.id)

async def coin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"ü™ô –í—ã–ø–∞–ª–æ: <b>{random.choice(['–û—Ä—ë–ª', '–†–µ—à–∫–∞'])}</b>", parse_mode=ParseMode.HTML)

# ... (–ò –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã)

# VIP –ö–æ–º–∞–Ω–¥—ã
async def generate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (generate_command —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ VIP-–ø—Ä–æ–≤–µ—Ä–∫–æ–π)
    user_id = update.effective_user.id
    user_lang = storage.get_or_create_user(update.effective_user).get('language_code', 'ru')
    if not storage.is_vip(user_id):
        await update.message.reply_text(get_text("vip_only_feature", user_lang).format(creator=CREATOR_USERNAME), parse_mode=ParseMode.HTML)
        return
    if not context.args:
        await update.message.reply_text("‚ùì Please write what to generate. Example: `/generate red cat in space`")
        return
    prompt = ' '.join(context.args)
    msg = await update.message.reply_text("üé® Generating... This can take up to 1.5 minutes.")
    image_bytes = await generate_image(prompt)
    if image_bytes:
        await context.bot.send_photo(update.effective_chat.id, photo=image_bytes, caption=f"üñºÔ∏è Your prompt: <i>{prompt}</i>", parse_mode=ParseMode.HTML)
        await msg.delete()
    else:
        await msg.edit_text("‚ùå Generation failed. Try another prompt or try again later.")

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
# ... (grant_vip, revoke_vip, broadcast, –∏ –¥—Ä. –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏)
async def grant_vip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_creator(update.effective_user.id): return
    #... implementation
async def revoke_vip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_creator(update.effective_user.id): return
    #... implementation
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_creator(update.effective_user.id): return
    #... implementation


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user = update.effective_user
    identify_creator(tg_user)
    user = storage.get_or_create_user(tg_user)
    storage.update_user(user['id'], {
        'messages_count': user.get('messages_count', 0) + 1,
        'username': tg_user.username, 'first_name': tg_user.first_name})
    
    text = update.message.text
    if not text: return
    lang = user.get('language_code', 'ru')
    
    # –ö–ê–†–¢–ê –ö–ù–û–ü–û–ö –î–õ–Ø –ö–û–†–†–ï–ö–¢–ù–û–ô –†–ê–ë–û–¢–´ –ö–õ–ê–í–ò–ê–¢–£–†–´
    button_map = {
        get_text("btn_ai_chat", lang): (lambda u, c: u.message.reply_text("ü§ñ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ...")),
        get_text("btn_notes", lang): notes_command,
        get_text("btn_weather", lang): weather_command,
        get_text("btn_time", lang): time_command,
        get_text("btn_info", lang): info_command,
        get_text("btn_vip", lang): vip_command,
        get_text("btn_generate", lang): generate_command,
        get_text("btn_admin", lang): (lambda u,c: u.message.reply_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å") if is_creator(user['id']) else None),
        # ... (–î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏)
    }

    if text in button_map and button_map[text] is not None:
        await button_map[text](update, context)
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò
    await process_ai_message(update, context, text, user['id'])

# ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: handle_voice, handle_document_photo, callback_handler –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏)
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    #...
    pass
async def handle_document_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    #...
    pass
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    #...
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    if data.startswith("set_lang_"):
        lang_code = data.split('_')[-1]
        storage.update_user(user_id, {'language_code': lang_code})
        lang_text = get_text('lang_changed', lang_code)
        await query.edit_message_text(lang_text)
        await context.bot.send_message(user_id, f"‚úÖ {lang_text}", reply_markup=get_main_keyboard(user_id, lang_code))

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –í–°–ï–• –∫–æ–º–∞–Ω–¥
    # –û—Å–Ω–æ–≤–Ω—ã–µ
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("language", language_command))
    application.add_handler(CommandHandler("clear", clear_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("profile", profile_command))
    application.add_handler(CommandHandler("uptime", uptime_command))
    application.add_handler(CommandHandler("vip", vip_command))
    # –ó–∞–º–µ—Ç–∫–∏
    application.add_handler(CommandHandler("note", note_command))
    application.add_handler(CommandHandler("notes", notes_command))
    application.add_handler(CommandHandler("delnote", delnote_command))
    # –£—Ç–∏–ª–∏—Ç—ã
    application.add_handler(CommandHandler("time", time_command))
    application.add_handler(CommandHandler("weather", weather_command))
    application.add_handler(CommandHandler("calc", calc_command))
    application.add_handler(CommandHandler("password", password_command))
    # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
    application.add_handler(CommandHandler("random", random_command))
    application.add_handler(CommandHandler("dice", dice_command))
    application.add_handler(CommandHandler("coin", coin_command))
    # VIP
    application.add_handler(CommandHandler("generate", generate_command))
    # –ê–¥–º–∏–Ω
    application.add_handler(CommandHandler("grant_vip", grant_vip_command))
    application.add_handler(CommandHandler("revoke_vip", revoke_vip_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.Document.ALL | filters.PHOTO, handle_document_photo))
    application.add_handler(CallbackQueryHandler(callback_handler))

    logger.info("‚úÖ AI DISCO BOT (Full Version) –ó–ê–ü–£–©–ï–ù!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
