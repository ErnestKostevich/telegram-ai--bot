#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ Telegram AI Bot with Gemini 2.0
–°–æ–∑–¥–∞—Ç–µ–ª—å: @Ernest_Kostevich
–ë–æ—Ç: @AI_DISCO_BOT
"""

import os
import json
import logging
import random
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pytz

# Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode

# Google Gemini AI
import google.generativeai as genai

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import aiohttp
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ====================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ====================

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
OPENWEATHER_API_KEY = os.getenv('OPENWEATHER_API_KEY', '')
CURRENCY_API_KEY = os.getenv('CURRENCY_API_KEY', '')

# ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞
CREATOR_USERNAME = "Ernest_Kostevich"
CREATOR_ID = None  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
genai.configure(api_key=GEMINI_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ Gemini
generation_config = {
    "temperature": 0.9,
    "top_p": 0.95,
    "top_k": 40,
    "max_output_tokens": 2048,
}

safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

model = genai.GenerativeModel(
    model_name='gemini-2.0-flash-exp',
    generation_config=generation_config,
    safety_settings=safety_settings
)

# ====================
# –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–•
# ====================

class DataStorage:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.users_file = 'users.json'
        self.stats_file = 'statistics.json'
        self.users = self.load_users()
        self.stats = self.load_stats()
        self.chat_sessions = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    def load_users(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if os.path.exists(self.users_file):
                with open(self.users_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return {int(k): v for k, v in data.items()}
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return {}
    
    def save_users(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with open(self.users_file, 'w', encoding='utf-8') as f:
                json.dump(self.users, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def load_stats(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            if os.path.exists(self.stats_file):
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {
                'total_messages': 0,
                'total_commands': 0,
                'ai_requests': 0,
                'start_date': datetime.now().isoformat()
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(self.stats, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def get_user(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.users:
            self.users[user_id] = {
                'id': user_id,
                'username': '',
                'first_name': '',
                'vip': False,
                'vip_until': None,
                'notes': [],
                'memory': {},
                'reminders': [],
                'registered': datetime.now().isoformat(),
                'last_active': datetime.now().isoformat(),
                'messages_count': 0,
                'commands_count': 0
            }
            self.save_users()
        return self.users[user_id]
    
    def update_user(self, user_id: int, data: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.get_user(user_id)
        user.update(data)
        user['last_active'] = datetime.now().isoformat()
        self.save_users()
    
    def is_vip(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ VIP —Å—Ç–∞—Ç—É—Å–∞"""
        user = self.get_user(user_id)
        if not user['vip']:
            return False
        if user['vip_until'] is None:  # –í–µ—á–Ω—ã–π VIP
            return True
        vip_until = datetime.fromisoformat(user['vip_until'])
        if datetime.now() > vip_until:
            user['vip'] = False
            user['vip_until'] = None
            self.save_users()
            return False
        return True
    
    def get_chat_session(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if user_id not in self.chat_sessions:
            self.chat_sessions[user_id] = model.start_chat(history=[])
        return self.chat_sessions[user_id]
    
    def clear_chat_session(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
        if user_id in self.chat_sessions:
            del self.chat_sessions[user_id]

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
storage = DataStorage()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# ====================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ====================

def is_creator(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º"""
    global CREATOR_ID
    return user_id == CREATOR_ID

def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = [
        [KeyboardButton("üí¨ AI –ß–∞—Ç"), KeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∏")],
        [KeyboardButton("üåç –ü–æ–≥–æ–¥–∞"), KeyboardButton("‚è∞ –í—Ä–µ–º—è")],
        [KeyboardButton("üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"), KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ")]
    ]
    
    if storage.is_vip(user_id):
        keyboard.append([KeyboardButton("üíé VIP –ú–µ–Ω—é")])
    
    if is_creator(user_id):
        keyboard.append([KeyboardButton("üëë –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å")])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def format_user_info(user: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    info = f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.get('first_name', 'Unknown')}\n"
    info += f"üÜî <b>ID:</b> <code>{user['id']}</code>\n"
    if user.get('username'):
        info += f"üì± <b>Username:</b> @{user['username']}\n"
    
    info += f"üìÖ <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> {user['registered'][:10]}\n"
    info += f"üìä <b>–°–æ–æ–±—â–µ–Ω–∏–π:</b> {user['messages_count']}\n"
    info += f"üéØ <b>–ö–æ–º–∞–Ω–¥:</b> {user['commands_count']}\n"
    
    if user['vip']:
        if user['vip_until']:
            vip_until = datetime.fromisoformat(user['vip_until'])
            info += f"üíé <b>VIP –¥–æ:</b> {vip_until.strftime('%d.%m.%Y %H:%M')}\n"
        else:
            info += f"üíé <b>VIP:</b> –ù–∞–≤—Å–µ–≥–¥–∞ ‚ôæÔ∏è\n"
    
    return info

# ====================
# –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´
# ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
    global CREATOR_ID
    if user.username == CREATOR_USERNAME and CREATOR_ID is None:
        CREATOR_ID = user.id
        logger.info(f"–°–æ–∑–¥–∞—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω: {user.id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = storage.get_user(user.id)
    storage.update_user(user.id, {
        'username': user.username or '',
        'first_name': user.first_name or '',
        'commands_count': user_data['commands_count'] + 1
    })
    
    welcome_text = f"""
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI DISCO BOT!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –Ω–∞ –±–∞–∑–µ <b>Google Gemini 2.0</b>.

<b>üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
üí¨ –£–º–Ω—ã–π AI-—á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
üìù –°–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ—Ç–æ–∫
üåç –ü–æ–≥–æ–¥–∞ –∏ –≤—Ä–µ–º—è
üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –∏–≥—Ä—ã
üíé VIP —Ñ—É–Ω–∫—Ü–∏–∏

<b>‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>
‚Ä¢ –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ - —è –æ—Ç–≤–µ—á—É!
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ

<b>üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å:</b> @{CREATOR_USERNAME}
"""
    
    await update.message.reply_text(
        welcome_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_keyboard(user.id)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    user_id = update.effective_user.id
    user_data = storage.get_user(user_id)
    storage.update_user(user_id, {
        'commands_count': user_data['commands_count'] + 1
    })
    
    help_text = """
üìö <b>–°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î</b>

<b>üè† –û—Å–Ω–æ–≤–Ω—ã–µ:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/profile - –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å

<b>üí¨ AI –∏ –ü–∞–º—è—Ç—å:</b>
/ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
/memorysave [–∫–ª—é—á] [–∑–Ω–∞—á–µ–Ω–∏–µ] - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å
/memoryget [–∫–ª—é—á] - –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–∞–º—è—Ç–∏
/memorylist - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å
/memorydel [–∫–ª—é—á] - –£–¥–∞–ª–∏—Ç—å –∏–∑ –ø–∞–º—è—Ç–∏

<b>üìù –ó–∞–º–µ—Ç–∫–∏:</b>
/note [—Ç–µ–∫—Å—Ç] - –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É
/notes - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
/delnote [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É

<b>üåç –£—Ç–∏–ª–∏—Ç—ã:</b>
/time [–≥–æ—Ä–æ–¥] - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
/weather [–≥–æ—Ä–æ–¥] - –ü–æ–≥–æ–¥–∞
/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–æ–¥

<b>üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:</b>
/random [min] [max] - –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
/dice - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
/coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É
/joke - –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞
/quote - –ú—É–¥—Ä–∞—è —Ü–∏—Ç–∞—Ç–∞

<b>üíé VIP –ö–æ–º–∞–Ω–¥—ã:</b>
/vip - –¢–≤–æ–π VIP —Å—Ç–∞—Ç—É—Å
/remind [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç] - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/reminders - –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""
    
    if is_creator(user_id):
        help_text += """
<b>üëë –ö–æ–º–∞–Ω–¥—ã –°–æ–∑–¥–∞—Ç–µ–ª—è:</b>
/grant_vip [id] [—Å—Ä–æ–∫] - –í—ã–¥–∞—Ç—å VIP
/revoke_vip [id] - –ó–∞–±—Ä–∞—Ç—å VIP
/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/broadcast [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞
/stats - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/backup - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
"""
    
    help_text += "\n<i>üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å - —è –æ—Ç–≤–µ—á—É!</i>"
    
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /info"""
    info_text = """
ü§ñ <b>AI DISCO BOT</b>

<b>–í–µ—Ä—Å–∏—è:</b> 2.0
<b>AI –ú–æ–¥–µ–ª—å:</b> Google Gemini 2.0 Flash
<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> @Ernest_Kostevich

<b>üéØ –û –±–æ—Ç–µ:</b>
–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –¥–ª—è Telegram. –£–º–µ–µ—Ç –æ–±—â–∞—Ç—å—Å—è, –ø–æ–º–æ–≥–∞—Ç—å, —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

<b>‚ö° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π AI-–¥–∏–∞–ª–æ–≥
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏
‚Ä¢ VIP —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ –ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
‚Ä¢ –ü–æ–≥–æ–¥–∞ –∏ –≤—Ä–µ–º—è

<b>üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:</b>
–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ. –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.

<b>üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @Ernest_Kostevich
"""
    
    await update.message.reply_text(info_text, parse_mode=ParseMode.HTML)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status"""
    stats = storage.stats
    total_users = len(storage.users)
    vip_users = sum(1 for u in storage.users.values() if u['vip'])
    
    uptime = datetime.now() - datetime.fromisoformat(stats.get('start_date', datetime.now().isoformat()))
    uptime_str = f"{uptime.days}–¥ {uptime.seconds // 3600}—á {(uptime.seconds % 3600) // 60}–º"
    
    status_text = f"""
üìä <b>–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´</b>

<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ VIP: {vip_users}

<b>üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}
‚Ä¢ –ö–æ–º–∞–Ω–¥: {stats.get('total_commands', 0)}
‚Ä¢ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('ai_requests', 0)}

<b>‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {uptime_str}

<b>‚úÖ –°—Ç–∞—Ç—É—Å:</b> –û–Ω–ª–∞–π–Ω
<b>ü§ñ AI:</b> Gemini 2.0 ‚úì
"""
    
    await update.message.reply_text(status_text, parse_mode=ParseMode.HTML)

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /profile"""
    user_id = update.effective_user.id
    user = storage.get_user(user_id)
    
    profile_text = format_user_info(user)
    profile_text += f"\nüìù <b>–ó–∞–º–µ—Ç–æ–∫:</b> {len(user['notes'])}\n"
    profile_text += f"üß† <b>–ó–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏:</b> {len(user['memory'])}\n"
    
    if storage.is_vip(user_id):
        profile_text += f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:</b> {len(user['reminders'])}\n"
    
    await update.message.reply_text(profile_text, parse_mode=ParseMode.HTML)

# ====================
# AI –§–£–ù–ö–¶–ò–ò
# ====================

async def ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /ai"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ai [–≤–∞—à –≤–æ–ø—Ä–æ—Å]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /ai –†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"
        )
        return
    
    question = ' '.join(context.args)
    await process_ai_message(update, question, user_id)

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /clear - –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    user_id = update.effective_user.id
    storage.clear_chat_session(user_id)
    
    await update.message.reply_text(
        "üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω! –ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞."
    )

async def process_ai_message(update: Update, text: str, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ AI —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
        await update.message.chat.send_action("typing")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        chat = storage.get_chat_session(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
        response = chat.send_message(text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        storage.stats['ai_requests'] = storage.stats.get('ai_requests', 0) + 1
        storage.save_stats()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(
            response.text,
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI: {e}")
        await update.message.reply_text(
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )

# ====================
# –°–ò–°–¢–ï–ú–ê –ü–ê–ú–Ø–¢–ò
# ====================

async def memory_save_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /memorysave - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å"""
    user_id = update.effective_user.id
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /memorysave [–∫–ª—é—á] [–∑–Ω–∞—á–µ–Ω–∏–µ]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /memorysave –ª—é–±–∏–º—ã–π_—Ü–≤–µ—Ç —Å–∏–Ω–∏–π"
        )
        return
    
    key = context.args[0]
    value = ' '.join(context.args[1:])
    
    user = storage.get_user(user_id)
    user['memory'][key] = value
    storage.save_users()
    
    await update.message.reply_text(
        f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å:\n"
        f"üîë <b>{key}</b> = <code>{value}</code>",
        parse_mode=ParseMode.HTML
    )

async def memory_get_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /memoryget - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /memoryget [–∫–ª—é—á]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /memoryget –ª—é–±–∏–º—ã–π_—Ü–≤–µ—Ç"
        )
        return
    
    key = context.args[0]
    user = storage.get_user(user_id)
    
    if key in user['memory']:
        await update.message.reply_text(
            f"üîç –ù–∞–π–¥–µ–Ω–æ:\n"
            f"üîë <b>{key}</b> = <code>{user['memory'][key]}</code>",
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(f"‚ùå –ö–ª—é—á '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏.")

async def memory_list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /memorylist - —Å–ø–∏—Å–æ–∫ –≤—Å–µ–π –ø–∞–º—è—Ç–∏"""
    user_id = update.effective_user.id
    user = storage.get_user(user_id)
    
    if not user['memory']:
        await update.message.reply_text("üì≠ –í–∞—à–∞ –ø–∞–º—è—Ç—å –ø—É—Å—Ç–∞.")
        return
    
    memory_text = "üß† <b>–í–∞—à–∞ –ø–∞–º—è—Ç—å:</b>\n\n"
    for key, value in user['memory'].items():
        memory_text += f"üîë <b>{key}</b>: <code>{value}</code>\n"
    
    await update.message.reply_text(memory_text, parse_mode=ParseMode.HTML)

async def memory_del_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /memorydel - —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /memorydel [–∫–ª—é—á]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /memorydel –ª—é–±–∏–º—ã–π_—Ü–≤–µ—Ç"
        )
        return
    
    key = context.args[0]
    user = storage.get_user(user_id)
    
    if key in user['memory']:
        del user['memory'][key]
        storage.save_users()
        await update.message.reply_text(f"‚úÖ –ö–ª—é—á '{key}' —É–¥–∞–ª—ë–Ω –∏–∑ –ø–∞–º—è—Ç–∏.")
    else:
        await update.message.reply_text(f"‚ùå –ö–ª—é—á '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏.")

# ====================
# –ó–ê–ú–ï–¢–ö–ò
# ====================

async def note_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /note - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /note [—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /note –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"
        )
        return
    
    note_text = ' '.join(context.args)
    user = storage.get_user(user_id)
    
    note = {
        'text': note_text,
        'created': datetime.now().isoformat()
    }
    
    user['notes'].append(note)
    storage.save_users()
    
    await update.message.reply_text(
        f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{len(user['notes'])} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        f"üìù {note_text}"
    )

async def notes_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /notes - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏"""
    user_id = update.effective_user.id
    user = storage.get_user(user_id)
    
    if not user['notes']:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return
    
    notes_text = f"üìù <b>–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ ({len(user['notes'])}):</b>\n\n"
    
    for i, note in enumerate(user['notes'], 1):
        created = datetime.fromisoformat(note['created'])
        notes_text += f"<b>#{i}</b> ({created.strftime('%d.%m.%Y %H:%M')})\n"
        notes_text += f"{note['text']}\n\n"
    
    await update.message.reply_text(notes_text, parse_mode=ParseMode.HTML)

async def delnote_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /delnote - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delnote [–Ω–æ–º–µ—Ä]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /delnote 1"
        )
        return
    
    try:
        note_num = int(context.args[0])
        user = storage.get_user(user_id)
        
        if 1 <= note_num <= len(user['notes']):
            deleted_note = user['notes'].pop(note_num - 1)
            storage.save_users()
            await update.message.reply_text(
                f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_num} —É–¥–∞–ª–µ–Ω–∞:\n\n"
                f"üìù {deleted_note['text']}"
            )
        else:
            await update.message.reply_text(f"‚ùå –ó–∞–º–µ—Ç–∫–∞ #{note_num} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.")

# ====================
# –£–¢–ò–õ–ò–¢–´
# ====================

async def time_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /time - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    city = ' '.join(context.args) if context.args else 'Moscow'
    
    timezones = {
        'moscow': 'Europe/Moscow',
        'london': 'Europe/London',
        'new york': 'America/New_York',
        'tokyo': 'Asia/Tokyo',
        'paris': 'Europe/Paris',
        'berlin': 'Europe/Berlin',
        'dubai': 'Asia/Dubai',
        'sydney': 'Australia/Sydney',
        'los angeles': 'America/Los_Angeles',
        'beijing': 'Asia/Shanghai'
    }
    
    city_lower = city.lower()
    tz_name = timezones.get(city_lower, 'Europe/Moscow')
    
    try:
        tz = pytz.timezone(tz_name)
        current_time = datetime.now(tz)
        
        time_text = f"""
‚è∞ <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è</b>

üìç <b>–ì–æ—Ä–æ–¥:</b> {city.title()}
üïê <b>–í—Ä–µ–º—è:</b> {current_time.strftime('%H:%M:%S')}
üìÖ <b>–î–∞—Ç–∞:</b> {current_time.strftime('%d.%m.%Y')}
üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {tz_name}
"""
        await update.message.reply_text(time_text, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'.\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: Moscow, London, New York, Tokyo, Paris, Berlin, Dubai, Sydney, Los Angeles, Beijing"
        )

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /weather - –ø–æ–≥–æ–¥–∞"""
    if not OPENWEATHER_API_KEY:
        await update.message.reply_text("‚ùå API –∫–ª—é—á –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return
    
    city = ' '.join(context.args) if context.args else 'Moscow'
    
    try:
        async with aiohttp.ClientSession() as session:
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    
                    temp = data['main']['temp']
                    feels_like = data['main']['feels_like']
                    description = data['weather'][0]['description']
                    humidity = data['main']['humidity']
                    wind_speed = data['wind']['speed']
                    
                    weather_text = f"""
üå§ <b>–ü–æ–≥–æ–¥–∞ –≤ {city.title()}</b>

üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}¬∞C
ü§î <b>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:</b> {feels_like}¬∞C
‚òÅÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}
üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {humidity}%
üí® <b>–í–µ—Ç–µ—Ä:</b> {wind_speed} –º/—Å
"""
                    await update.message.reply_text(weather_text, parse_mode=ParseMode.HTML)
                else:
                    await update.message.reply_text(f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")

async def translate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /translate - –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /translate en –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
        )
        return
    
    target_lang = context.args[0]
    text = ' '.join(context.args[1:])
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ {target_lang}: {text}"
        chat = storage.get_chat_session(update.effective_user.id)
        response = chat.send_message(prompt)
        
        await update.message.reply_text(
            f"üåê <b>–ü–µ—Ä–µ–≤–æ–¥:</b>\n\n{response.text}",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞.")

# ====================
# –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø
# ====================

async def random_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /random - —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ"""
    try:
        if len(context.args) >= 2:
            min_val = int(context.args[0])
            max_val = int(context.args[1])
        else:
            min_val = 1
            max_val = 100
        
        result = random.randint(min_val, max_val)
        await update.message.reply_text(
            f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {min_val} –¥–æ {max_val}:\n\n"
            f"<b>{result}</b>",
            parse_mode=ParseMode.HTML
        )
    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞.")

async def dice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /dice - –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫"""
    result = random.randint(1, 6)
    dice_emoji = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'][result - 1]
    
    await update.message.reply_text(
        f"üé≤ –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫...\n\n"
        f"{dice_emoji} –í—ã–ø–∞–ª–æ: <b>{result}</b>",
        parse_mode=ParseMode.HTML
    )

async def coin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /coin - –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É"""
    result = random.choice(['–û—Ä—ë–ª', '–†–µ—à–∫–∞'])
    emoji = 'ü¶Ö' if result == '–û—Ä—ë–ª' else 'üí∞'
    
    await update.message.reply_text(
        f"ü™ô –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—É...\n\n"
        f"{emoji} –í—ã–ø–∞–ª–æ: <b>{result}</b>",
        parse_mode=ParseMode.HTML
    )

async def joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /joke - —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞"""
    jokes = [
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ª–æ–∂–∏—Ç—Å—è —Å–ø–∞—Ç—å. –ñ–µ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç: ‚Äî –î–æ—Ä–æ–≥–æ–π, –∑–∞–∫—Ä–æ–π –æ–∫–Ω–æ, –Ω–∞ —É–ª–∏—Ü–µ —Ö–æ–ª–æ–¥–Ω–æ! –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: ‚Äî –ò —á—Ç–æ, –µ—Å–ª–∏ —è –∑–∞–∫—Ä–æ—é –æ–∫–Ω–æ, –Ω–∞ —É–ª–∏—Ü–µ —Å—Ç–∞–Ω–µ—Ç —Ç–µ–ø–ª–æ? üòÑ",
        "‚Äî –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? ‚Äî –ü–æ—Ç–æ–º—É —á—Ç–æ 31 OCT = 25 DEC! üéÉüéÑ",
        "–ó–∞—á–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É –æ—á–∫–∏? –ß—Ç–æ–±—ã –ª—É—á—à–µ C++! üëì",
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–º–µ–Ω–∏—Ç —á–µ–ª–æ–≤–µ–∫–∞. –û–Ω —Å–ª–∏—à–∫–æ–º —É–º–Ω—ã–π –¥–ª—è —ç—Ç–æ–≥–æ! ü§ñ",
        "‚Äî –°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∫—Ä—É—Ç–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É? ‚Äî –ù–∏ –æ–¥–Ω–æ–≥–æ, —ç—Ç–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞! üí°"
    ]
    
    joke = random.choice(jokes)
    await update.message.reply_text(f"üòÑ <b>–®—É—Ç–∫–∞ –¥–Ω—è:</b>\n\n{joke}", parse_mode=ParseMode.HTML)

async def quote_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /quote - –º—É–¥—Ä–∞—è —Ü–∏—Ç–∞—Ç–∞"""
    quotes = [
        "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫—É—é —Ä–∞–±–æ—Ç—É ‚Äî –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ. ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å",
        "–ò–Ω–Ω–æ–≤–∞—Ü–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç –ª–∏–¥–µ—Ä–∞ –æ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è. ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å",
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –∫–æ—Ñ–µ –≤ –∫–æ–¥. ‚Äî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä",
        "–õ—É—á—à–∏–π –∫–æ–¥ ‚Äî —ç—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–∞. ‚Äî –î–∂–µ—Ñ—Ñ –≠—Ç–≤—É–¥",
        "–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —ç—Ç–æ, –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞–π –ª—É—á—à–µ. ‚Äî –ê–¥–¥–∏ –û—Å–º–∞–Ω–∏"
    ]
    
    quote = random.choice(quotes)
    await update.message.reply_text(f"üí≠ <b>–¶–∏—Ç–∞—Ç–∞:</b>\n\n<i>{quote}</i>", parse_mode=ParseMode.HTML)

# ====================
# VIP –§–£–ù–ö–¶–ò–ò
# ====================

async def vip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /vip - —Å—Ç–∞—Ç—É—Å VIP"""
    user_id = update.effective_user.id
    user = storage.get_user(user_id)
    
    if storage.is_vip(user_id):
        vip_text = "üíé <b>VIP –°–¢–ê–¢–£–°</b>\n\n"
        vip_text += "‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω VIP —Å—Ç–∞—Ç—É—Å!\n\n"
        
        if user['vip_until']:
            vip_until = datetime.fromisoformat(user['vip_until'])
            vip_text += f"‚è∞ <b>–ê–∫—Ç–∏–≤–µ–Ω –¥–æ:</b> {vip_until.strftime('%d.%m.%Y %H:%M')}\n\n"
        else:
            vip_text += "‚è∞ <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> –ù–∞–≤—Å–µ–≥–¥–∞ ‚ôæÔ∏è\n\n"
        
        vip_text += "<b>üéÅ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ VIP:</b>\n"
        vip_text += "‚Ä¢ ‚è∞ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        vip_text += "‚Ä¢ üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
        vip_text += "‚Ä¢ üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n"
        vip_text += "‚Ä¢ üí¨ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç AI\n"
    else:
        vip_text = "üíé <b>VIP –°–¢–ê–¢–£–°</b>\n\n"
        vip_text += "‚ùå –£ –≤–∞—Å –Ω–µ—Ç VIP —Å—Ç–∞—Ç—É—Å–∞.\n\n"
        vip_text += "–°–≤—è–∂–∏—Ç–µ—Å—å —Å @Ernest_Kostevich –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP."
    
    await update.message.reply_text(vip_text, parse_mode=ParseMode.HTML)

async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /remind - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (VIP)"""
    user_id = update.effective_user.id
    
    if not storage.is_vip(user_id):
        await update.message.reply_text(
            "üíé –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å @Ernest_Kostevich –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP."
        )
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /remind 30 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É"
        )
        return
    
    try:
        minutes = int(context.args[0])
        text = ' '.join(context.args[1:])
        
        remind_time = datetime.now() + timedelta(minutes=minutes)
        
        user = storage.get_user(user_id)
        reminder = {
            'text': text,
            'time': remind_time.isoformat(),
            'created': datetime.now().isoformat()
        }
        
        user['reminders'].append(reminder)
        storage.save_users()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        scheduler.add_job(
            send_reminder,
            'date',
            run_date=remind_time,
            args=[context.bot, user_id, text]
        )
        
        await update.message.reply_text(
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"üìù {text}\n"
            f"üïê –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç ({remind_time.strftime('%H:%M')})"
        )
    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç.")

async def reminders_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /reminders - —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (VIP)"""
    user_id = update.effective_user.id
    
    if not storage.is_vip(user_id):
        await update.message.reply_text(
            "üíé –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
        )
        return
    
    user = storage.get_user(user_id)
    
    if not user['reminders']:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    
    reminders_text = f"‚è∞ <b>–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ({len(user['reminders'])}):</b>\n\n"
    
    for i, reminder in enumerate(user['reminders'], 1):
        remind_time = datetime.fromisoformat(reminder['time'])
        reminders_text += f"<b>#{i}</b> {remind_time.strftime('%d.%m %H:%M')}\n"
        reminders_text += f"üìù {reminder['text']}\n\n"
    
    await update.message.reply_text(reminders_text, parse_mode=ParseMode.HTML)

async def send_reminder(bot, user_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"‚è∞ <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï</b>\n\nüìù {text}",
            parse_mode=ParseMode.HTML
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        user = storage.get_user(user_id)
        user['reminders'] = [r for r in user['reminders'] if r['text'] != text]
        storage.save_users()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# ====================
# –ö–û–ú–ê–ù–î–´ –°–û–ó–î–ê–¢–ï–õ–Ø
# ====================

async def grant_vip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /grant_vip - –≤—ã–¥–∞—Ç—å VIP (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)"""
    if not is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_vip [user_id] [—Å—Ä–æ–∫]\n\n"
            "–°—Ä–æ–∫–∏: week, month, year, forever\n"
            "–ü—Ä–∏–º–µ—Ä: /grant_vip 123456789 month"
        )
        return
    
    try:
        target_id = int(context.args[0])
        duration = context.args[1].lower()
        
        durations = {
            'week': timedelta(weeks=1),
            'month': timedelta(days=30),
            'year': timedelta(days=365),
            'forever': None
        }
        
        if duration not in durations:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ä–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: week, month, year, forever")
            return
        
        user = storage.get_user(target_id)
        user['vip'] = True
        
        if durations[duration]:
            vip_until = datetime.now() + durations[duration]
            user['vip_until'] = vip_until.isoformat()
            duration_text = f"–¥–æ {vip_until.strftime('%d.%m.%Y')}"
        else:
            user['vip_until'] = None
            duration_text = "–Ω–∞–≤—Å–µ–≥–¥–∞"
        
        storage.save_users()
        
        await update.message.reply_text(
            f"‚úÖ VIP —Å—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω!\n\n"
            f"üë§ ID: <code>{target_id}</code>\n"
            f"‚è∞ –°—Ä–æ–∫: {duration_text}",
            parse_mode=ParseMode.HTML
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=target_id,
                text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–¥–∞–Ω VIP —Å—Ç–∞—Ç—É—Å {duration_text}!",
                parse_mode=ParseMode.HTML
            )
        except:
            pass
            
    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.")

async def revoke_vip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /revoke_vip - –∑–∞–±—Ä–∞—Ç—å VIP (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)"""
    if not is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke_vip [user_id]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /revoke_vip 123456789"
        )
        return
    
    try:
        target_id = int(context.args[0])
        user = storage.get_user(target_id)
        user['vip'] = False
        user['vip_until'] = None
        storage.save_users()
        
        await update.message.reply_text(
            f"‚úÖ VIP —Å—Ç–∞—Ç—É—Å –æ—Ç–æ–∑–≤–∞–Ω!\n\n"
            f"üë§ ID: <code>{target_id}</code>",
            parse_mode=ParseMode.HTML
        )
    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.")

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)"""
    if not is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
        return
    
    users_text = f"üë• <b>–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ({len(storage.users)}):</b>\n\n"
    
    for user_id, user in list(storage.users.items())[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 20
        vip_badge = "üíé" if user['vip'] else ""
        users_text += f"{vip_badge} <code>{user_id}</code> - {user.get('first_name', 'Unknown')}\n"
        if user.get('username'):
            users_text += f"   @{user['username']}\n"
    
    if len(storage.users) > 20:
        users_text += f"\n<i>... –∏ –µ—â—ë {len(storage.users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>"
    
    await update.message.reply_text(users_text, parse_mode=ParseMode.HTML)

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)"""
    if not is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!"
        )
        return
    
    message_text = ' '.join(context.args)
    
    success = 0
    failed = 0
    
    status_msg = await update.message.reply_text("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for user_id in storage.users.keys():
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è:</b>\n\n{message_text}",
                parse_mode=ParseMode.HTML
            )
            success += 1
            await asyncio.sleep(0.05)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        except Exception as e:
            failed += 1
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {e}")
    
    await status_msg.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}"
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)"""
    if not is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
        return
    
    stats = storage.stats
    total_users = len(storage.users)
    vip_users = sum(1 for u in storage.users.values() if u['vip'])
    active_users = sum(1 for u in storage.users.values() 
                      if (datetime.now() - datetime.fromisoformat(u['last_active'])).days < 7)
    
    total_notes = sum(len(u['notes']) for u in storage.users.values())
    total_memory = sum(len(u['memory']) for u in storage.users.values())
    
    stats_text = f"""
üìä <b>–ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>

<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ VIP: {vip_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {active_users}

<b>üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}
‚Ä¢ –ö–æ–º–∞–Ω–¥: {stats.get('total_commands', 0)}
‚Ä¢ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('ai_requests', 0)}

<b>üìù –î–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –ó–∞–º–µ—Ç–æ–∫: {total_notes}
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏: {total_memory}

<b>üìÖ –ó–∞–ø—É—â–µ–Ω:</b> {stats.get('start_date', 'N/A')[:10]}
"""
    
    await update.message.reply_text(stats_text, parse_mode=ParseMode.HTML)

async def backup_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /backup - —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)"""
    if not is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é.")
        return
    
    try:
        # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
        backup_data = {
            'users': storage.users,
            'stats': storage.stats,
            'backup_date': datetime.now().isoformat()
        }
        
        backup_filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(backup_filename, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, ensure_ascii=False, indent=2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await update.message.reply_document(
            document=open(backup_filename, 'rb'),
            caption=f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\nüìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(backup_filename)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.")

# ====================
# –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
# ====================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    chat_type = update.message.chat.type
    text = update.message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user = storage.get_user(user_id)
    storage.update_user(user_id, {
        'messages_count': user['messages_count'] + 1,
        'username': update.effective_user.username or '',
        'first_name': update.effective_user.first_name or ''
    })
    storage.stats['total_messages'] = storage.stats.get('total_messages', 0) + 1
    storage.save_stats()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if text in ["üí¨ AI –ß–∞—Ç", "üìù –ó–∞–º–µ—Ç–∫–∏", "üåç –ü–æ–≥–æ–¥–∞", "‚è∞ –í—Ä–µ–º—è", "üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "‚ÑπÔ∏è –ò–Ω—Ñ–æ", "üíé VIP –ú–µ–Ω—é", "üëë –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å"]:
        await handle_menu_button(update, context, text)
        return
    
    # –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if chat_type in ['group', 'supergroup']:
        bot_username = context.bot.username
        if f"@{bot_username}" not in text:
            return
        # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        text = text.replace(f"@{bot_username}", "").strip()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI
    if text:
        await process_ai_message(update, text, user_id)

async def handle_menu_button(update: Update, context: ContextTypes.DEFAULT_TYPE, button: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    
    if button == "üí¨ AI –ß–∞—Ç":
        await update.message.reply_text(
            "ü§ñ <b>AI –ß–∞—Ç —Ä–µ–∂–∏–º</b>\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /clear —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.",
            parse_mode=ParseMode.HTML
        )
    
    elif button == "üìù –ó–∞–º–µ—Ç–∫–∏":
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="note_create")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", callback_data="note_list")]
        ]
        await update.message.reply_text(
            "üìù <b>–°–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ—Ç–æ–∫</b>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif button == "üåç –ü–æ–≥–æ–¥–∞":
        await update.message.reply_text(
            "üåç <b>–ü–æ–≥–æ–¥–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π: /weather [–≥–æ—Ä–æ–¥]\n"
            "–ü—Ä–∏–º–µ—Ä: /weather London",
            parse_mode=ParseMode.HTML
        )
    
    elif button == "‚è∞ –í—Ä–µ–º—è":
        await update.message.reply_text(
            "‚è∞ <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π: /time [–≥–æ—Ä–æ–¥]\n"
            "–ü—Ä–∏–º–µ—Ä: /time Tokyo",
            parse_mode=ParseMode.HTML
        )
    
    elif button == "üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è":
        keyboard = [
            [InlineKeyboardButton("üé≤ –ö—É–±–∏–∫", callback_data="game_dice"),
             InlineKeyboardButton("ü™ô –ú–æ–Ω–µ—Ç–∞", callback_data="game_coin")],
            [InlineKeyboardButton("üòÑ –®—É—Ç–∫–∞", callback_data="game_joke"),
             InlineKeyboardButton("üí≠ –¶–∏—Ç–∞—Ç–∞", callback_data="game_quote")]
        ]
        await update.message.reply_text(
            "üé≤ <b>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif button == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
        await info_command(update, context)
    
    elif button == "üíé VIP –ú–µ–Ω—é":
        if storage.is_vip(user_id):
            keyboard = [
                [InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="vip_reminders")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="vip_stats")]
            ]
            await update.message.reply_text(
                "üíé <b>VIP –ú–µ–Ω—é</b>",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await vip_command(update, context)
    
    elif button == "üëë –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å":
        if is_creator(user_id):
            keyboard = [
                [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
                [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")]
            ]
            await update.message.reply_text(
                "üëë <b>–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å</b>",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if data == "note_create":
        await query.message.reply_text(
            "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π: /note [—Ç–µ–∫—Å—Ç]\n"
            "–ü—Ä–∏–º–µ—Ä: /note –ö—É–ø–∏—Ç—å —Ö–ª–µ–±",
            parse_mode=ParseMode.HTML
        )
    
    elif data == "note_list":
        await notes_command(update, context)
    
    elif data == "game_dice":
        result = random.randint(1, 6)
        dice_emoji = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'][result - 1]
        await query.message.reply_text(f"üé≤ {dice_emoji} –í—ã–ø–∞–ª–æ: <b>{result}</b>", parse_mode=ParseMode.HTML)
    
    elif data == "game_coin":
        result = random.choice(['–û—Ä—ë–ª', '–†–µ—à–∫–∞'])
        emoji = 'ü¶Ö' if result == '–û—Ä—ë–ª' else 'üí∞'
        await query.message.reply_text(f"ü™ô {emoji} –í—ã–ø–∞–ª–æ: <b>{result}</b>", parse_mode=ParseMode.HTML)
    
    elif data == "game_joke":
        await joke_command(update, context)
    
    elif data == "game_quote":
        await quote_command(update, context)
    
    elif data == "vip_reminders":
        await reminders_command(update, context)
    
    elif data == "admin_users":
        await users_command(update, context)
    
    elif data == "admin_stats":
        await stats_command(update, context)

# ====================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ====================

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    if not BOT_TOKEN or not GEMINI_API_KEY:
        logger.error("–û—à–∏–±–∫–∞: BOT_TOKEN –∏–ª–∏ GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ - –ë–∞–∑–æ–≤—ã–µ
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("profile", profile_command))
    
    # AI –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("ai", ai_command))
    application.add_handler(CommandHandler("clear", clear_command))
    
    # –ü–∞–º—è—Ç—å
    application.add_handler(CommandHandler("memorysave", memory_save_command))
    application.add_handler(CommandHandler("memoryget", memory_get_command))
    application.add_handler(CommandHandler("memorylist", memory_list_command))
    application.add_handler(CommandHandler("memorydel", memory_del_command))
    
    # –ó–∞–º–µ—Ç–∫–∏
    application.add_handler(CommandHandler("note", note_command))
    application.add_handler(CommandHandler("notes", notes_command))
    application.add_handler(CommandHandler("delnote", delnote_command))
    
    # –£—Ç–∏–ª–∏—Ç—ã
    application.add_handler(CommandHandler("time", time_command))
    application.add_handler(CommandHandler("weather", weather_command))
    application.add_handler(CommandHandler("translate", translate_command))
    
    # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
    application.add_handler(CommandHandler("random", random_command))
    application.add_handler(CommandHandler("dice", dice_command))
    application.add_handler(CommandHandler("coin", coin_command))
    application.add_handler(CommandHandler("joke", joke_command))
    application.add_handler(CommandHandler("quote", quote_command))
    
    # VIP –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("vip", vip_command))
    application.add_handler(CommandHandler("remind", remind_command))
    application.add_handler(CommandHandler("reminders", reminders_command))
    
    # –ö–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è
    application.add_handler(CommandHandler("grant_vip", grant_vip_command))
    application.add_handler(CommandHandler("revoke_vip", revoke_vip_command))
    application.add_handler(CommandHandler("users", users_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("backup", backup_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
