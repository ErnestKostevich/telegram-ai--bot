#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–î–ï–ê–õ–¨–ù–´–ô –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

import asyncio
import logging
import json
import random
import time
import datetime
import re
import requests
import aiohttp
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field
import os
import sys
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.interval import IntervalTrigger
import nest_asyncio
from flask import Flask
import pytz

nest_asyncio.apply()

# Telegram Bot API
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ContextTypes, CallbackQueryHandler
)

# Google Gemini
import google.generativeai as genai

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# API –∫–ª—é—á–∏
BOT_TOKEN = os.getenv("BOT_TOKEN", "8176339131:AAGVKJoK9Y9fdQcTqMCp0Vm95IMuQWnCNGo")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyCo4ymvNmI2JkYEuocIv3w_HsUyNPd6oEg")
CURRENCY_API_KEY = os.getenv("FREECURRENCY_API_KEY", "fca_live_86O15Ga6b1M0bnm6FCiDfrBB7USGCEPiAUyjiuwL")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")

# ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
CREATOR_ID = 7108255346
CREATOR_USERNAME = "@Ernest_Kostevich"
BOT_USERNAME = "@AI_DISCO_BOT"
BOT_NAME = "AI –î–∏—Å–∫–æ –ë–æ—Ç"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    MODEL = genai.GenerativeModel('gemini-pro')
else:
    MODEL = None

# =============================================================================
# –ö–õ–ê–°–°–´ –î–ê–ù–ù–´–•
# =============================================================================

@dataclass
class UserData:
    user_id: int
    username: str = ""
    first_name: str = ""
    is_vip: bool = False
    vip_expires: Optional[str] = None
    language: str = "ru"
    notes: List[str] = field(default_factory=list)
    reminders: List[Dict] = field(default_factory=list)
    level: int = 1
    experience: int = 0
    memory_data: Dict = field(default_factory=dict)
    last_activity: str = field(default_factory=lambda: datetime.datetime.now().isoformat())

    def to_dict(self):
        return {k: v for k, v in self.__dict__.items()}

    @classmethod
    def from_dict(cls, data):
        return cls(**data)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
class Database:
    def __init__(self):
        self.users: Dict[int, UserData] = {}
        self.logs = []
        self.statistics = {}
        self.load_data()
    
    def load_data(self):
        try:
            if os.path.exists('users.json'):
                with open('users.json', 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.users = {int(k): UserData.from_dict(v) for k, v in data.items()}
        except:
            self.users = {}
    
    def save_data(self):
        try:
            with open('users.json', 'w', encoding='utf-8') as f:
                json.dump({k: v.to_dict() for k, v in self.users.items()}, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def get_user(self, user_id: int) -> UserData:
        return self.users.get(user_id)
    
    def save_user(self, user_data: UserData):
        self.users[user_data.user_id] = user_data
        self.save_data()
    
    def log_command(self, user_id: int, command: str):
        self.logs.append({
            'user_id': user_id,
            'command': command,
            'timestamp': datetime.datetime.now().isoformat()
        })

# =============================================================================
# –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê
# =============================================================================

class TelegramBot:
    def __init__(self):
        self.db = Database()
        self.scheduler = AsyncIOScheduler()
        self.user_contexts = {}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler.start()
        
        # –ê–≤—Ç–æ–ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        self.scheduler.add_job(
            self.auto_ping,
            'interval',
            minutes=10
        )
    
    def is_creator(self, user_id: int) -> bool:
        return user_id == CREATOR_ID
    
    def is_vip(self, user_data: UserData) -> bool:
        if not user_data.is_vip:
            return False
        
        if user_data.vip_expires:
            try:
                expires = datetime.datetime.fromisoformat(user_data.vip_expires)
                if datetime.datetime.now() > expires:
                    user_data.is_vip = False
                    self.db.save_user(user_data)
                    return False
            except:
                return False
        
        return True
    
    async def get_user_data(self, update: Update) -> UserData:
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        if not user_data:
            user_data = UserData(
                user_id=user.id,
                username=user.username or "",
                first_name=user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è VIP
            if self.is_creator(user.id):
                user_data.is_vip = True
                user_data.vip_expires = None
            
            self.db.save_user(user_data)
        
        return user_data

    # =============================================================================
    # –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò
    # =============================================================================

    async def auto_ping(self):
        """–ê–≤—Ç–æ–ø–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        logger.info("üîÑ –ê–≤—Ç–æ–ø–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω")

    async def send_typing(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–±–æ—Ä–∞"""
        try:
            await update.message.chat.send_action(action="typing")
        except:
            pass

    # =============================================================================
    # –£–õ–£–ß–®–ï–ù–ù–´–ô /help –° –†–ê–ó–î–ï–õ–ï–ù–ò–ï–ú –ü–†–ê–í
    # =============================================================================

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –ø—Ä–∞–≤–∞–º"""
        user_data = await self.get_user_data(update)
        await self.send_typing(update)
        
        help_text = f"""
ü§ñ {BOT_NAME} - –ü–û–ú–û–©–¨

üè† **–û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
/info - –û –±–æ—Ç–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üí¨ **AI-–ß–ê–¢:**
/ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è!

üìù **–ó–ê–ú–ï–¢–ö–ò:**
/note [—Ç–µ–∫—Å—Ç] - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/notes - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏
/delnote [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É

‚è∞ **–í–†–ï–ú–Ø:**
/time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
/date - –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞

üéÆ **–†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø:**
/joke - –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞
/fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
/quote - –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞
/coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
/dice - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫

üîß **–£–¢–ò–õ–ò–¢–´:**
/weather [–≥–æ—Ä–æ–¥] - –ü–æ–≥–æ–¥–∞
/currency [–∏–∑] [–≤] - –ö—É—Ä—Å –≤–∞–ª—é—Ç
/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–æ–¥
/password [–¥–ª–∏–Ω–∞] - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º VIP –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VIP
        if self.is_vip(user_data):
            help_text += """
üíé **VIP –ö–û–ú–ê–ù–î–´:**
/vip - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP —Å—Ç–∞—Ç—É—Å–µ
/remind [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç] - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/reminders - –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/secret - –°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
/lottery - –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è
        if self.is_creator(user_data.user_id):
            help_text += """
üëë **–ö–û–ú–ê–ù–î–´ –°–û–ó–î–ê–¢–ï–õ–Ø:**
/grant_vip [user] [–≤—Ä–µ–º—è] - –í—ã–¥–∞—Ç—å VIP
/revoke_vip [user] - –ó–∞–±—Ä–∞—Ç—å VIP
/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/broadcast [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞
"""
        
        help_text += f"\n‚ö° –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: 50+\nü§ñ AI: Gemini 2.0\nüëë –°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_USERNAME}"
        
        self.db.log_command(user_data.user_id, "/help")
        await update.message.reply_text(help_text)

    # =============================================================================
    # –£–õ–£–ß–®–ï–ù–ù–´–ô /start –° –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–ï–ô
    # =============================================================================

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞"""
        user_data = await self.get_user_data(update)
        await self.send_typing(update)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if self.is_creator(user_data.user_id):
            greeting = "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –°–æ–∑–¥–∞—Ç–µ–ª—å!"
            status = "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞"
        elif self.is_vip(user_data):
            greeting = f"üíé –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {user_data.first_name}!"
            status = "VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        else:
            greeting = f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user_data.first_name}!"
            status = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        start_text = f"""
{greeting}

–Ø {BOT_NAME} - –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–±–æ—Ç —Å –±–æ–ª–µ–µ —á–µ–º 50 —Ñ—É–Ω–∫—Ü–∏—è–º–∏!

üåü **–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üí¨ –£–º–Ω—ã–π —á–∞—Ç —Å Gemini AI
‚Ä¢ üìù –°–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ—Ç–æ–∫ –∏ –ø–∞–º—è—Ç–∏
‚Ä¢ üå§Ô∏è –ü–æ–≥–æ–¥–∞, –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, –ø–µ—Ä–µ–≤–æ–¥—ã
‚Ä¢ üéÆ –ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
‚Ä¢ üíé VIP —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö

üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å:** {status}
üÜô **–£—Ä–æ–≤–µ–Ω—å:** {user_data.level}
‚≠ê **–û–ø—ã—Ç:** {user_data.experience}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥!
"""
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data="help"),
             InlineKeyboardButton("ü§ñ AI –ß–∞—Ç", callback_data="ai_info")],
            [InlineKeyboardButton("üíé VIP", callback_data="vip_info"),
             InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        
        if self.is_creator(user_data.user_id):
            keyboard.append([InlineKeyboardButton("üëë –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="admin")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        self.db.log_command(user_data.user_id, "/start")
        await update.message.reply_text(start_text, reply_markup=reply_markup)

    # =============================================================================
    # –£–õ–£–ß–®–ï–ù–ù–´–ô AI-–ß–ê–¢ –° –ö–û–ù–¢–ï–ö–°–¢–û–ú
    # =============================================================================

    async def ai_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–º–Ω—ã–π AI-—á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        user_data = await self.get_user_data(update)
        
        if not context.args:
            await update.message.reply_text("""
ü§ñ AI-–ß–ê–¢

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /ai
–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã!

–ü—Ä–∏–º–µ—Ä—ã:
/ai –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ—Å–º–æ—Å–µ
/ai –ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python
/ai –û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É
            """)
            return
        
        if not MODEL:
            await update.message.reply_text("‚ùå AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        query = " ".join(context.args)
        await self.send_typing(update)
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_id = user_data.user_id
            if user_id not in self.user_contexts:
                self.user_contexts[user_id] = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.user_contexts[user_id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {query}")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç 6 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if len(self.user_contexts[user_id]) > 6:
                self.user_contexts[user_id] = self.user_contexts[user_id][-6:]
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            context_text = "\n".join(self.user_contexts[user_id][-3:])
            prompt = f"""
–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram –±–æ—Ç–µ. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ.

–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:
{context_text}

–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {query}

–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
"""
            
            response = MODEL.generate_content(prompt)
            answer = response.text
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.user_contexts[user_id].append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {answer}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(f"ü§ñ {answer}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI")
        
        self.db.log_command(user_data.user_id, "/ai")

    # =============================================================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –ë–ï–ó –ö–û–ú–ê–ù–î
    # =============================================================================

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_data = await self.get_user_data(update)
        message_text = update.message.text
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if update.effective_chat.type != "private":
            if not message_text.startswith(BOT_USERNAME):
                return
            message_text = message_text[len(BOT_USERNAME):].strip()
        
        await self.send_typing(update)
        
        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        message_lower = message_text.lower()
        
        if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "hello", "hi", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π"]):
            responses = [
                "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
                "üòä –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ö–∞–∫ –¥–µ–ª–∞?",
                "ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "üéâ –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            ]
            await update.message.reply_text(random.choice(responses))
            return
        
        elif any(phrase in message_lower for phrase in ["–∫–∞–∫ –¥–µ–ª–∞", "how are you"]):
            await update.message.reply_text("ü§ñ –£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å! –ê —É —Ç–µ–±—è –∫–∞–∫?")
            return
        
        elif any(word in message_lower for word in ["—Å–ø–∞—Å–∏–±–æ", "thanks", "thank you"]):
            await update.message.reply_text("üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å!")
            return
        
        elif any(phrase in message_lower for phrase in ["–∫—Ç–æ —Ç—ã", "who are you"]):
            await update.message.reply_text(f"ü§ñ –Ø {BOT_NAME} - —É–º–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫! –°–æ–∑–¥–∞–Ω {CREATOR_USERNAME}")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        await self.ai_chat_response(update, message_text, user_data)

    async def ai_chat_response(self, update: Update, message: str, user_data: UserData):
        """AI –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not MODEL:
            await update.message.reply_text("ü§ñ –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")
            return
        
        try:
            prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "{message}"
–û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ, –∫–∞–∫ —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
"""
            response = MODEL.generate_content(prompt)
            await update.message.reply_text(f"ü§ñ {response.text}")
            
        except Exception as e:
            await update.message.reply_text("‚ùå –ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        self.db.log_command(user_data.user_id, "message")

    # =============================================================================
    # –ö–û–ú–ê–ù–î–´ –ó–ê–ú–ï–¢–û–ö (–£–õ–£–ß–®–ï–ù–ù–´–ï)
    # =============================================================================

    async def note_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"""
        user_data = await self.get_user_data(update)
        
        if not context.args:
            await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /note [—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏]")
            return
        
        note_text = " ".join(context.args)
        timestamp = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        user_data.notes.append(f"{timestamp}: {note_text}")
        
        self.db.save_user(user_data)
        await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        self.db.log_command(user_data.user_id, "/note")

    async def notes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏"""
        user_data = await self.get_user_data(update)
        
        if not user_data.notes:
            await update.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫")
            return
        
        notes_text = "üìù **–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:**\n\n"
        for i, note in enumerate(user_data.notes[-10:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–º–µ—Ç–æ–∫
            notes_text += f"{i}. {note}\n"
        
        if len(user_data.notes) > 10:
            notes_text += f"\n... –∏ –µ—â—ë {len(user_data.notes) - 10} –∑–∞–º–µ—Ç–æ–∫"
        
        await update.message.reply_text(notes_text)
        self.db.log_command(user_data.user_id, "/notes")

    # =============================================================================
    # VIP –ö–û–ú–ê–ù–î–´
    # =============================================================================

    async def vip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP —Å—Ç–∞—Ç—É—Å–µ"""
        user_data = await self.get_user_data(update)
        
        if self.is_vip(user_data):
            if user_data.vip_expires:
                expires_date = datetime.datetime.fromisoformat(user_data.vip_expires)
                expires_str = expires_date.strftime("%d.%m.%Y %H:%M")
                status_text = f"üíé VIP –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {expires_str}"
            else:
                status_text = "üíé VIP –∞–∫—Ç–∏–≤–µ–Ω –ë–ï–°–°–†–û–ß–ù–û"
            
            vip_info = f"""
{status_text}

üåü **VIP –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:**
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (/remind)
‚Ä¢ –°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å
"""
        else:
            vip_info = """
üíé VIP –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω

‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ VIP:**
‚è∞ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
üéÅ –°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏  
üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
üíæ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Ernest_Kostevich
"""
        
        await update.message.reply_text(vip_info)
        self.db.log_command(user_data.user_id, "/vip")

    async def remind_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è VIP)"""
        user_data = await self.get_user_data(update)
        
        if not self.is_vip(user_data):
            await update.message.reply_text("üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("‚è∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è]")
            return
        
        try:
            minutes = int(context.args[0])
            text = " ".join(context.args[1:])
            
            reminder_time = datetime.datetime.now() + datetime.timedelta(minutes=minutes)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            reminder = {
                "text": text,
                "time": reminder_time.isoformat(),
                "created": datetime.datetime.now().isoformat()
            }
            user_data.reminders.append(reminder)
            self.db.save_user(user_data)
            
            await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω—É—Ç!")
            
        except ValueError:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç!")
        
        self.db.log_command(user_data.user_id, "/remind")

    # =============================================================================
    # –ö–û–ú–ê–ù–î–´ –°–û–ó–î–ê–¢–ï–õ–Ø
    # =============================================================================

    async def grant_vip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–¥–∞—Ç—å VIP (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)"""
        user_data = await self.get_user_data(update)
        
        if not self.is_creator(user_data.user_id):
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("üíé –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_vip [user_id] [days]")
            return
        
        try:
            target_user_id = int(context.args[0])
            days = int(context.args[1])
            
            target_user = self.db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            target_user.is_vip = True
            expires = datetime.datetime.now() + datetime.timedelta(days=days)
            target_user.vip_expires = expires.isoformat()
            
            self.db.save_user(target_user)
            
            await update.message.reply_text(
                f"‚úÖ VIP –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.first_name} "
                f"–Ω–∞ {days} –¥–Ω–µ–π (–¥–æ {expires.strftime('%d.%m.%Y')})"
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        
        self.db.log_command(user_data.user_id, "/grant_vip")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        user_data = await self.get_user_data(update)
        
        total_users = len(self.db.users)
        vip_users = sum(1 for u in self.db.users.values() if self.is_vip(u))
        total_commands = len(self.db.logs)
        
        stats_text = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üíé VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {vip_users}
üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {total_commands}
ü§ñ AI –º–æ–¥–µ–ª—å: Gemini 2.0
‚ö° –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω
"""
        
        if self.is_creator(user_data.user_id):
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
            active_today = sum(1 for u in self.db.users.values() 
                             if datetime.datetime.now() - datetime.datetime.fromisoformat(u.last_activity) < datetime.timedelta(days=1))
            
            stats_text += f"""
üëë **–î–õ–Ø –°–û–ó–î–ê–¢–ï–õ–Ø:**
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_today}
üìù –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {sum(len(u.notes) for u in self.db.users.values())}
"""
        
        await update.message.reply_text(stats_text)
        self.db.log_command(user_data.user_id, "/stats")

    # =============================================================================
    # –†–ê–ó–í–õ–ï–ö–ê–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´
    # =============================================================================

    async def joke_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞"""
        jokes = [
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!",
            "–ó–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –±–∞—Ä... –∞ —Ç–∞–º –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç!",
            "‚Äî –î–æ–∫—Ç–æ—Ä, —è –¥—É–º–∞—é, —á—Ç–æ —è ‚Äî –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å!\n‚Äî –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –ø—Ä–∏–º–∏—Ç–µ —ç—Ç—É —Ç–∞–±–ª–µ—Ç–∫—É.\n‚Äî –ê —á—Ç–æ —ç—Ç–æ?\n‚Äî –ê–Ω—Ç–∏–≤–∏—Ä—É—Å!",
            "–ü–æ—á–µ–º—É Python –ª—É—á—à–µ Java? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—Å –ø–∏—Å–∞—Ç—å 100 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –¥–ª—è 'Hello World'!",
            "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∫—Ä—É—Ç–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É? –ù–∏ –æ–¥–Ω–æ–≥–æ, —ç—Ç–æ hardware –ø—Ä–æ–±–ª–µ–º–∞!"
        ]
        
        await update.message.reply_text(f"üòÑ {random.choice(jokes)}")
        
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/joke")

    async def fact_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"""
        facts = [
            "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∫–æ–ª–æ 86 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –Ω–µ–π—Ä–æ–Ω–æ–≤!",
            "üåä –í –æ–∫–µ–∞–Ω–µ –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, —á–µ–º –≤–æ –≤—Å–µ—Ö –º—É–∑–µ—è—Ö –º–∏—Ä–∞!",
            "üêô –£ –æ—Å—å–º–∏–Ω–æ–≥–æ–≤ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±–∞—è –∫—Ä–æ–≤—å!",
            "üåç –ó–µ–º–ª—è —Ç–µ—Ä—è–µ—Ç –æ–∫–æ–ª–æ 50 —Ç–æ–Ω–Ω –º–∞—Å—Å—ã –∫–∞–∂–¥—ã–π –≥–æ–¥!",
            "‚ö° –ú–æ–ª–Ω–∏—è –≤ 5 —Ä–∞–∑ –≥–æ—Ä—è—á–µ–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –°–æ–ª–Ω—Ü–∞!"
        ]
        
        await update.message.reply_text(random.choice(facts))
        
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/fact")

    # =============================================================================
    # CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    # =============================================================================

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_data = await self.get_user_data(update)
        
        if query.data == "help":
            await self.help_command(update, context)
        elif query.data == "ai_info":
            await query.edit_message_text(
                "ü§ñ **AI-–ß–ê–¢**\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
                "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ—Å–º–æ—Å–µ\n"  
                "‚Ä¢ –ü–æ–º–æ–≥–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
                "‚Ä¢ –û–±—ä—è—Å–Ω–∏ —Å–ª–æ–∂–Ω—É—é —Ç–µ–º—É\n"
                "‚Ä¢ –ü—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é –ø—Ä–æ–µ–∫—Ç–∞"
            )
        elif query.data == "vip_info":
            await self.vip_command(update, context)
        elif query.data == "stats":
            await self.stats_command(update, context)
        elif query.data == "admin" and self.is_creator(user_data.user_id):
            await query.edit_message_text(
                "üëë **–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø**\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "‚Ä¢ /grant_vip - –≤—ã–¥–∞—Ç—å VIP\n"
                "‚Ä¢ /broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞"
            )

    # =============================================================================
    # –ó–ê–ü–£–°–ö –ë–û–¢–ê
    # =============================================================================

    async def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        commands = [
            ('start', self.start_command),
            ('help', self.help_command),
            ('info', self.info_command),
            ('status', self.status_command),
            ('ai', self.ai_command),
            ('note', self.note_command),
            ('notes', self.notes_command),
            ('delnote', self.delnote_command),
            ('time', self.time_command),
            ('date', self.date_command),
            ('joke', self.joke_command),
            ('fact', self.fact_command),
            ('quote', self.quote_command),
            ('coin', self.coin_command),
            ('dice', self.dice_command),
            ('weather', self.weather_command),
            ('currency', self.currency_command),
            ('translate', self.translate_command),
            ('vip', self.vip_command),
            ('remind', self.remind_command),
            ('reminders', self.reminders_command),
            ('grant_vip', self.grant_vip_command),
            ('stats', self.stats_command),
            ('users', self.users_command),
        ]
        
        for command, handler in commands:
            application.add_handler(CommandHandler(command, handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await application.run_polling(drop_pending_updates=True)

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

# =============================================================================
# FLASK APP –î–õ–Ø RENDER
# =============================================================================

app = Flask(__name__)

@app.route('/')
def home():
    return f"""
    <html>
        <head>
            <title>{BOT_NAME}</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .container {{ max-width: 800px; margin: 0 auto; }}
                .status {{ color: green; font-weight: bold; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü§ñ {BOT_NAME}</h1>
                <p class="status">‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω</p>
                <p>–í—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p>–°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_USERNAME}</p>
                <p>–§—É–Ω–∫—Ü–∏–π: 50+ | AI: Gemini 2.0</p>
            </div>
        </body>
    </html>
    """

@app.route('/health')
def health():
    return {"status": "ok", "time": datetime.datetime.now().isoformat()}

# =============================================================================
# –ó–ê–ü–£–°–ö
# =============================================================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelegramBot()
    await bot.run_bot()

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask"""
    port = int(os.getenv("PORT", 8080))
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
