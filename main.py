#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import logging
import random
import asyncio
import signal
from datetime import datetime, timedelta
from typing import Dict, Optional
import pytz
import requests
import io
from urllib.parse import quote as urlquote

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode

import google.generativeai as genai
import aiohttp
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bs4 import BeautifulSoup
from PIL import Image
import fitz  # PyMuPDF
import docx  # python-docx

# ---------- SQLAlchemy (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è) ----------
from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime, JSON, Text, BigInteger
from sqlalchemy.orm import declarative_base, sessionmaker
# --------------------------------------------------------------

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
DATABASE_URL = os.getenv('DATABASE_URL')

CREATOR_USERNAME = "Ernest_Kostevich"
CREATOR_ID = None
BOT_START_TIME = datetime.now()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not BOT_TOKEN or not GEMINI_API_KEY:
    logger.error("‚ùå BOT_TOKEN –∏–ª–∏ GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    raise ValueError("Required environment variables missing")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini 2.5 Flash
genai.configure(api_key=GEMINI_API_KEY)

generation_config = {
    "temperature": 0.9,
    "top_p": 0.95,
    "top_k": 40,
    "max_output_tokens": 8192,
}

safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

system_instruction = (
    "You are AI DISCO BOT, an extremely intelligent, helpful, and multilingual AI assistant built with Gemini 2.5. "
    "Always respond in the user's preferred language. Be engaging, use emojis appropriately, and provide detailed, "
    "insightful answers. Break down complex topics logically. If a response is long, structure it with headings and lists. "
    "Your creator is @Ernest_Kostevich. Detect and adapt to the user's language if not specified."
)

model = genai.GenerativeModel(
    model_name='gemini-2.5-flash-latest',
    generation_config=generation_config,
    safety_settings=safety_settings,
    system_instruction=system_instruction
)

vision_model = genai.GenerativeModel(
    model_name='gemini-2.5-flash-latest',
    generation_config=generation_config,
    safety_settings=safety_settings
)

# ---------- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ----------
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(BigInteger, primary_key=True)
    username = Column(String(255))
    first_name = Column(String(255))
    vip = Column(Boolean, default=False)
    vip_until = Column(DateTime)
    notes = Column(JSON, default=list)
    todos = Column(JSON, default=list)
    memory = Column(JSON, default=dict)
    reminders = Column(JSON, default=list)
    registered = Column(DateTime, default=datetime.now)
    last_active = Column(DateTime, default=datetime.now)
    messages_count = Column(Integer, default=0)
    commands_count = Column(Integer, default=0)
    language = Column(String(10), default='ru')

class Chat(Base):
    __tablename__ = 'chats'
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger)
    message = Column(Text)
    response = Column(Text)
    timestamp = Column(DateTime, default=datetime.now)

class Statistics(Base):
    __tablename__ = 'statistics'
    key = Column(String(50), primary_key=True)
    value = Column(JSON)
    updated_at = Column(DateTime, default=datetime.now)

engine = None
Session = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, echo=False, pool_pre_ping=True)
        Base.metadata.create_all(engine)
        Session = sessionmaker(bind=engine)
        logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω!")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}. Fallback –Ω–∞ JSON.")
else:
    logger.warning("‚ö†Ô∏è –ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JSON.")

# ---------- –ü–µ—Ä–µ–≤–æ–¥—ã ----------
SUPPORTED_LANGUAGES = ['ru', 'en', 'es', 'de', 'it', 'fr']

TRANSLATIONS = {
    'ru': {
        'welcome': "ü§ñ <b>AI DISCO BOT</b>\n\n–ü—Ä–∏–≤–µ—Ç, {name}! –Ø –±–æ—Ç –Ω–∞ <b>Gemini 2.5 Flash</b>.\n\n<b>üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\nüí¨ AI-—á–∞—Ç\nüìù –ó–∞–º–µ—Ç–∫–∏\nüåç –ü–æ–≥–æ–¥–∞\n‚è∞ –í—Ä–µ–º—è\nüé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\nüìé –ê–Ω–∞–ª–∏–∑ (VIP)\nüîç –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ (VIP)\nüñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ (VIP)\n\n<b>‚ö° –ö–æ–º–∞–Ω–¥—ã:</b>\n/help\n/vip\n\n<b>üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å:</b> @{CREATOR_USERNAME}",
        'help_menu': "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏:</b>",
        'vip_status_active': "üíé <b>VIP –°–¢–ê–¢–£–°</b>\n\n‚úÖ –ê–∫—Ç–∏–≤–µ–Ω –¥–æ {until}\n\n<b>üéÅ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n‚Ä¢ üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è\n‚Ä¢ üîç –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ\n‚Ä¢ üìé –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        'vip_status_inactive': "üíé <b>VIP –°–¢–ê–¢–£–°</b>\n\n‚ùå –ù–µ—Ç VIP.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @Ernest_Kostevich",
        'image_gen_error': "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        'voice_processing': "üîä –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...",
        'voice_error': "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {error}",
        'set_language': "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {lang}.",
        'invalid_language': "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: ru, en, es, de, it, fr.",
        'ai_chat_button': "üí¨ AI –ß–∞—Ç",
        'notes_button': "üìù –ó–∞–º–µ—Ç–∫–∏",
        'weather_button': "üåç –ü–æ–≥–æ–¥–∞",
        'time_button': "‚è∞ –í—Ä–µ–º—è",
        'entertainment_button': "üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        'info_button': "‚ÑπÔ∏è –ò–Ω—Ñ–æ",
        'vip_menu_button': "üíé VIP –ú–µ–Ω—é",
        'generation_button': "üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è",
        'admin_panel_button': "üëë –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å",
        'voice_vip_only': "üíé –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è VIP.",
        'status_text': "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\nüü¢ –†–∞–±–æ—Ç–∞–µ—Ç\n‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages}\nü§ñ AI-–∑–∞–ø—Ä–æ—Å–æ–≤: {ai}",
        'profile_text': "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\nüÜî ID: <code>{id}</code>\nüìõ –ò–º—è: {name}\nüíé VIP: {vip}\nüìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg}\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {msg}\n‚ö° –ö–æ–º–∞–Ω–¥: {cmd}",
        'uptime_text': "‚è± <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞</b>\n\n{uptime}",
    },
    # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏ –æ–ø—É—â–µ–Ω—ã ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    'en': { ... },
    'es': { ... },
    'de': { ... },
    'it': { ... },
    'fr': { ... },
}

def get_translation(lang: str, key: str, **kwargs):
    lang = lang if lang in SUPPORTED_LANGUAGES else 'en'
    text = TRANSLATIONS[lang].get(key, TRANSLATIONS['en'].get(key, key))
    return text.format(**kwargs)

# ---------- –•—Ä–∞–Ω–∏–ª–∏—â–µ ----------
class DataStorage:
    # ... (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –±—ã–ª –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) ...
    pass  # <-- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å DataStorage

storage = DataStorage()
scheduler = AsyncIOScheduler()

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
def identify_creator(user):
    global CREATOR_ID
    if user.username == CREATOR_USERNAME and CREATOR_ID is None:
        CREATOR_ID = user.id
        logger.info(f"–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.id}")

def is_creator(user_id: int) -> bool:
    return user_id == CREATOR_ID

def format_uptime(start: datetime) -> str:
    delta = datetime.now() - start
    hours, remainder = divmod(int(delta.total_seconds()), 3600)
    minutes, seconds = divmod(remainder, 60)
    return f"{hours} —á {minutes} –º–∏–Ω {seconds} —Å–µ–∫"

def get_main_keyboard(user_id: int, lang: str) -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(get_translation(lang, 'ai_chat_button')), KeyboardButton(get_translation(lang, 'notes_button'))],
        [KeyboardButton(get_translation(lang, 'weather_button')), KeyboardButton(get_translation(lang, 'time_button'))],
        [KeyboardButton(get_translation(lang, 'entertainment_button')), KeyboardButton(get_translation(lang, 'info_button'))]
    ]
    if storage.is_vip(user_id):
        keyboard.append([KeyboardButton(get_translation(lang, 'vip_menu_button')), KeyboardButton(get_translation(lang, 'generation_button'))])
    if is_creator(user_id):
        keyboard.append([KeyboardButton(get_translation(lang, 'admin_panel_button'))])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    identify_creator(user)
    user_data = storage.get_user(user.id)
    lang = user_data.get('language', 'ru')
    storage.update_user(user.id, {
        'username': user.username or '',
        'first_name': user.first_name or '',
        'commands_count': user_data.get('commands_count', 0) + 1
    })
    await update.message.reply_text(
        get_translation(lang, 'welcome', name=user.first_name),
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_keyboard(user.id, lang)
    )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = storage.get_user(update.effective_user.id)
    lang = user_data.get('language', 'ru')
    uptime = format_uptime(BOT_START_TIME)
    stats = storage.stats
    text = get_translation(lang, 'status_text',
                           uptime=uptime,
                           users=len(storage.get_all_users()),
                           messages=stats.get('total_messages', 0),
                           ai=stats.get('ai_requests', 0))
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_data = storage.get_user(user.id)
    lang = user_data.get('language', 'ru')
    vip = "‚úÖ –î–∞" if storage.is_vip(user.id) else "‚ùå –ù–µ—Ç"
    reg = user_data.get('registered', '').split('T')[0]
    text = get_translation(lang, 'profile_text',
                           id=user.id,
                           name=user.full_name,
                           vip=vip,
                           reg=reg,
                           msg=user_data.get('messages_count', 0),
                           cmd=user_data.get('commands_count', 0))
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

async def uptime_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = storage.get_user(update.effective_user.id)
    lang = user_data.get('language', 'ru')
    await update.message.reply_text(
        get_translation(lang, 'uptime_text', uptime=format_uptime(BOT_START_TIME)),
        parse_mode=ParseMode.HTML
    )

# ---------- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∑–∞–≥–ª—É—à–∫–∏, –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) ----------
async def vip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = storage.get_user(user_id).get('language', 'ru')
    if storage.is_vip(user_id):
        until = storage.get_user(user_id).get('vip_until')
        until_str = datetime.fromisoformat(until).strftime('%d.%m.%Y %H:%M') if until else "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"
        await update.message.reply_text(get_translation(lang, 'vip_status_active', until=until_str), parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(get_translation(lang, 'vip_status_inactive'), parse_mode=ParseMode.HTML)

# ... (–¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: note_command, weather_command, time_command –∏ —Ç.–¥.) ...

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ----------
async def send_long_message(update: Update, text: str, parse_mode=None):
    max_len = 4096
    for i in range(0, len(text), max_len):
        await update.message.reply_text(text[i:i+max_len], parse_mode=parse_mode)

async def process_ai_message(update: Update, text: str, user_id: int):
    try:
        await update.message.chat.send_action("typing")
        chat = storage.get_chat_session(user_id)
        response = chat.send_message(text)
        storage.stats['ai_requests'] = storage.stats.get('ai_requests', 0) + 1
        storage.save_stats()
        storage.save_chat(user_id, text, response.text)
        await send_long_message(update, response.text)
    except Exception as e:
        logger.error(f"AI error: {e}")
        await update.message.reply_text("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    identify_creator(update.effective_user)
    user_id = update.effective_user.id
    user = storage.get_user(user_id)
    lang = user.get('language', 'ru')
    storage.update_user(user_id, {
        'messages_count': user.get('messages_count', 0) + 1,
        'username': update.effective_user.username or '',
        'first_name': update.effective_user.first_name or ''
    })
    storage.stats['total_messages'] = storage.stats.get('total_messages', 0) + 1
    storage.save_stats()

    text = update.message.text
    if text in [get_translation(lang, k) for k in ['ai_chat_button','notes_button','weather_button','time_button','entertainment_button','info_button','vip_menu_button','generation_button','admin_panel_button']]:
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (–∑–∞–≥–ª—É—à–∫–∞)
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        return

    await process_ai_message(update, text, user_id)

# ---------- –ó–∞–ø—É—Å–∫ ----------
def signal_handler(signum, frame):
    logger.info("–°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
    scheduler.shutdown()
    raise SystemExit

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("profile", profile_command))
    application.add_handler(CommandHandler("uptime", uptime_command))
    application.add_handler(CommandHandler("vip", vip_command))
    # ... –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ CommandHandler ...

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ MessageHandler ...

    scheduler.start()

    logger.info("AI DISCO BOT –∑–∞–ø—É—â–µ–Ω!")
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
