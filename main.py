async def note_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/note")
        
        if not context.args:
            await update.message.reply_text("üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏!\n–ü—Ä–∏–º–µ—Ä: /note –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ")
            return
        
        note = " ".join(context.args)
        user_data.notes.append(note)
        self.db.save_user(user_data)
        await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! (–í—Å–µ–≥–æ: {len(user_data.notes)})")
        await self.add_experience(user_data, 1)

    async def notes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/notes")
        
        if not user_data.notes:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫!")
            return
        
        notes_text = "\n".join(f"{i+1}. {note}" for i, note in enumerate(user_data.notes))
        await update.message.reply_text(f"üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n{notes_text}")
        await self.add_experience(user_data, 1)

    async def delnote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/delnote")
        
        if not context.args or not context.args[0].isdigit():
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏!\n–ü—Ä–∏–º–µ—Ä: /delnote 1")
            return
        
        index = int(context.args[0]) - 1
        if 0 <= index < len(user_data.notes):
            deleted_note = user_data.notes.pop(index)
            self.db.save_user(user_data)
            await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {deleted_note[:50]}...")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏!")
        
        await self.add_experience(user_data, 1)

    async def findnote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/findnote")
        
        if not context.args:
            await update.message.reply_text("üîç –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞!\n–ü—Ä–∏–º–µ—Ä: /findnote —Ä–∞–±–æ—Ç–∞")
            return
        
        keyword = " ".join(context.args).lower()
        found = [(i+1, note) for i, note in enumerate(user_data.notes) if keyword in note.lower()]
        
        if found:
            notes_text = "\n".join(f"{i}. {note}" for i, note in found)
            await update.message.reply_text(f"üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫ ({len(found)}):\n{notes_text}")
        else:
            await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        
        await self.add_experience(user_data, 1)

    async def clearnotes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/clearnotes")
        
        notes_count = len(user_data.notes)
        user_data.notes = []
        self.db.save_user(user_data)
        await update.message.reply_text(f"‚úÖ –û—á–∏—â–µ–Ω–æ {notes_count} –∑–∞–º–µ—Ç–æ–∫!")
        await self.add_experience(user_data, 1)

    async def memorysave_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/memorysave")
        
        if len(context.args) < 2:
            await update.message.reply_text("üß† /memorysave [–∫–ª—é—á] [–∑–Ω–∞—á–µ–Ω–∏–µ]\n–ü—Ä–∏–º–µ—Ä: /memorysave –ª—é–±–∏–º—ã–π_—Ü–≤–µ—Ç —Å–∏–Ω–∏–π")
            return
        
        key = context.args[0]
        value = " ".join(context.args[1:])
        user_data.memory_data[key] = value
        self.db.save_user(user_data)
        await update.message.reply_text(f"üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {key} = {value}")
        await self.add_experience(user_data, 1)

    async def memoryget_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/memoryget")
        
        if not context.args:
            await update.message.reply_text("üß† /memoryget [–∫–ª—é—á]\n–ü—Ä–∏–º–µ—Ä: /memoryget –ª—é–±–∏–º—ã–π_—Ü–≤–µ—Ç")
            return
        
        key = context.args[0]
        value = user_data.memory_data.get(key)
        
        if value:
            await update.message.reply_text(f"üß† {key}: {value}")
        else:
            await update.message.reply_text(f"‚ùå –ö–ª—é—á '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        await self.add_experience(user_data, 1)

    async def memorylist_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/memorylist")
        
        if not user_data.memory_data:
            await update.message.reply_text("üß† –ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞!")
            return
        
        memory_text = "\n".join(f"‚Ä¢ {key}: {value}" for key, value in user_data.memory_data.items())
        await update.message.reply_text(f"üß† –í–∞—à–∞ –ø–∞–º—è—Ç—å:\n{memory_text}")
        await self.add_experience(user_data, 1)

    async def memorydel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/memorydel")
        
        if not context.args:
            await update.message.reply_text("üß† /memorydel [–∫–ª—é—á]\n–ü—Ä–∏–º–µ—Ä: /memorydel –ª—é–±–∏–º—ã–π_—Ü–≤–µ—Ç")
            return
        
        key = context.args[0]
        if key in user_data.memory_data:
            del user_data.memory_data[key]
            self.db.save_user(user_data)
            await update.message.reply_text(f"üß† –£–¥–∞–ª–µ–Ω–æ: {key}")
        else:
            await update.message.reply_text(f"‚ùå –ö–ª—é—á '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        await self.add_experience(user_data, 1)

    # =============================================================================
    # –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø
    # =============================================================================

    async def joke_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/joke")
        
        if not self.gemini_model:
            jokes = [
                "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!",
                "–ó–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –±–∞—Ä, –∞ —Ç–∞–º –Ω–µ—Ç –º–µ—Å—Ç...",
                "- –î–æ–∫—Ç–æ—Ä, —è –¥—É–º–∞—é, —á—Ç–æ —è ‚Äî –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å!\n- –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –ø—Ä–∏–º–∏—Ç–µ —ç—Ç—É —Ç–∞–±–ª–µ—Ç–∫—É.\n- –ê —á—Ç–æ —ç—Ç–æ?\n- –ê–Ω—Ç–∏–≤–∏—Ä—É—Å!",
                "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã —Å—á–∏—Ç–∞—é—Ç –æ–≤–µ—Ü? 0 –æ–≤–µ—Ü, 1 –æ–≤—Ü–∞, 2 –æ–≤—Ü—ã, 3 –æ–≤—Ü—ã...",
                "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç - —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, –æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –Ω–µ –∑–Ω–∞–ª–∏, —Å–ø–æ—Å–æ–±–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ."
            ]
            await update.message.reply_text(random.choice(jokes))
        else:
            try:
                response = self.gemini_model.generate_content("–†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Å–º–µ—à–Ω—É—é —à—É—Ç–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
                await update.message.reply_text(f"üòÑ {response.text}")
            except:
                await update.message.reply_text("üòÑ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–≥—É –ø—Ä–∏–¥—É–º–∞—Ç—å —à—É—Ç–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!")
        
        await self.add_experience(user_data, 1)

    async def fact_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/fact")
        
        if not self.gemini_model:
            facts = [
                "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∫–æ–ª–æ 86 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –Ω–µ–π—Ä–æ–Ω–æ–≤!",
                "üåä –í –æ–∫–µ–∞–Ω–µ –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, —á–µ–º –≤–æ –≤—Å–µ—Ö –º—É–∑–µ—è—Ö –º–∏—Ä–∞!",
                "üêô –£ –æ—Å—å–º–∏–Ω–æ–≥–æ–≤ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±–∞—è –∫—Ä–æ–≤—å!",
                "üåç –ó–∞ —Å–µ–∫—É–Ω–¥—É –ó–µ–º–ª—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–∫–æ–ª–æ 30 –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –ø–æ –æ—Ä–±–∏—Ç–µ!",
                "üí° –ü–µ—Ä–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –±–∞–≥ –±—ã–ª –Ω–∞—Å—Ç–æ—è—â–µ–π –±–∞–±–æ—á–∫–æ–π, –∑–∞—Å—Ç—Ä—è–≤—à–µ–π –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ!"
            ]
            await update.message.reply_text(random.choice(facts))
        else:
            try:
                response = self.gemini_model.generate_content("–†–∞—Å—Å–∫–∞–∂–∏ –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –Ω–∞—É—á–Ω—ã–π –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
                await update.message.reply_text(f"üß† {response.text}")
            except:
                await update.message.reply_text("üß† Python –±—ã–ª –Ω–∞–∑–≤–∞–Ω –≤ —á–µ—Å—Ç—å –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–π –∫–æ–º–µ–¥–∏–π–Ω–æ–π –≥—Ä—É–ø–ø—ã Monty Python!")
        
        await self.add_experience(user_data, 1)

    async def quote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/quote")
        
        if not self.gemini_model:
            quotes = [
                "üí´ '–ë—É–¥—å —Å–æ–±–æ–π. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.' - –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
                "üöÄ '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫—É—é —Ä–∞–±–æ—Ç—É - –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—à—å.' - –°—Ç–∏–≤ –î–∂–æ–±—Å",
                "‚≠ê '–£—Å–ø–µ—Ö - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.' - –ß–µ—Ä—á–∏–ª–ª—å",
                "üíª '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É, —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä—É.' - –î–æ–Ω–∞–ª—å–¥ –ö–Ω—É—Ç"
            ]
            await update.message.reply_text(random.choice(quotes))
        else:
            try:
                response = self.gemini_model.generate_content("–î–∞–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é —Ü–∏—Ç–∞—Ç—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞")
                await update.message.reply_text(f"üí´ {response.text}")
            except:
                await update.message.reply_text("üí´ '–õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –±—É–¥—É—â–µ–µ - —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.' - –ü–∏—Ç–µ—Ä –î—Ä—É–∫–µ—Ä")
        
        await self.add_experience(user_data, 1)

    async def coin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/coin")
        
        result = random.choice(["ü™ô –û—Ä—ë–ª!", "ü™ô –†–µ—à–∫–∞!"])
        await update.message.reply_text(result)
        await self.add_experience(user_data, 1)

    async def dice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/dice")
        
        result = random.randint(1, 6)
        dice_faces = ["‚öÄ", "‚öÅ", "‚öÇ", "‚öÉ", "‚öÑ", "‚öÖ"]
        await update.message.reply_text(f"üé≤ {dice_faces[result-1]} –í—ã–ø–∞–ª–æ: {result}")
        await self.add_experience(user_data, 1)

    async def eightball_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/8ball")
        
        if not context.args:
            await update.message.reply_text("üîÆ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –º–∞–≥–∏—á–µ—Å–∫–æ–º—É —à–∞—Ä—É!\n–ü—Ä–∏–º–µ—Ä: /8ball –°—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ –∏–∑—É—á–∞—Ç—å Python?")
            return
        
        answers = [
            "‚úÖ –î–∞, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ!",
            "‚ùå –ù–µ—Ç, –Ω–µ —Å—Ç–æ–∏—Ç",
            "ü§î –í–æ–∑–º–æ–∂–Ω–æ",
            "‚è≥ –°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ",
            "üéØ –ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏–π!",
            "üí≠ –í–µ—Å—å–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ",
            "üö´ –ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç",
            "üåü –ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –¥–∞"
        ]
        
        result = random.choice(answers)
        await update.message.reply_text(f"üîÆ {result}")
        await self.add_experience(user_data, 1)

    # =============================================================================
    # –£–¢–ò–õ–ò–¢–´
    # =============================================================================

    async def time_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/time")
        
        now = datetime.datetime.now()
        moscow_tz = pytz.timezone('Europe/Moscow')
        moscow_time = now.astimezone(moscow_tz)
        
        time_text = f"""
‚è∞ –í–†–ï–ú–Ø

üåç UTC: {now.strftime('%H:%M:%S %d.%m.%Y')}
üá∑üá∫ –ú–æ—Å–∫–≤–∞: {moscow_time.strftime('%H:%M:%S %d.%m.%Y')}
        """
        
        await update.message.reply_text(time_text)
        await self.add_experience(user_data, 1)

    async def date_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/date")
        
        now = datetime.datetime.now()
        await update.message.reply_text(f"üìÖ –°–µ–≥–æ–¥–Ω—è: {now.strftime('%d.%m.%Y')}")
        await self.add_experience(user_data, 1)

    async def weather_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/weather")
        
        if not context.args:
            await update.message.reply_text("üå§Ô∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥!\n–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")
            return
            
        if not OPENWEATHER_API_KEY:
            await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á.")
            return
        
        city = " ".join(context.args)
        try:
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            response = requests.get(url, timeout=10).json()
            
            if response.get("cod") == 200:
                weather = response["weather"][0]["description"]
                temp = round(response["main"]["temp"])
                feels_like = round(response["main"]["feels_like"])
                humidity = response["main"]["humidity"]
                
                weather_text = f"""
üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}:
üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)
‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {weather.capitalize()}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%
                """
                await update.message.reply_text(weather_text)
            else:
                await update.message.reply_text("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.")
            logger.error(f"–û—à–∏–±–∫–∞ weather API: {e}")
        
        await self.add_experience(user_data, 2)

    async def currency_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/currency")
        
        if len(context.args) < 2:
            await update.message.reply_text("üí∞ –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—ã!\n–ü—Ä–∏–º–µ—Ä: /currency USD RUB")
            return
            
        if not CURRENCY_API_KEY:
            await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        
        from_cur, to_cur = context.args[0].upper(), context.args[1].upper()
        
        try:
            url = f"https://api.freecurrencyapi.com/v1/latest?apikey={CURRENCY_API_KEY}&currencies={to_cur}&base_currency={from_cur}"
            response = requests.get(url, timeout=10).json()
            rate = response.get("data", {}).get(to_cur)
            
            if rate:
                await update.message.reply_text(f"üí∞ 1 {from_cur} = {rate:.4f} {to_cur}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å!")
        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
            logger.error(f"–û—à–∏–±–∫–∞ currency API: {e}")
        
        await self.add_experience(user_data, 2)

    async def translate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/translate")
        
        if len(context.args) < 2:
            await update.message.reply_text("üåê /translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç]\n–ü—Ä–∏–º–µ—Ä: /translate en –ü—Ä–∏–≤–µ—Ç –º–∏—Ä")
            return
        
        if not self.gemini_model:
            await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        
        target_lang = context.args[0]
        text = " ".join(context.args[1:])
        
        try:
            prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ {target_lang}: {text}"
            response = self.gemini_model.generate_content(prompt)
            await update.message.reply_text(f"üåê –ü–µ—Ä–µ–≤–æ–¥:\n{response.text}")
        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        
        await self.add_experience(user_data, 2)

    async def rank_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/rank")
        
        required_exp = user_data.level * 100
        progress = (user_data.experience / required_exp) * 100 if required_exp > 0 else 0
        
        rank_text = f"""
üèÖ –í–ê–® –£–†–û–í–ï–ù–¨

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.first_name}
üÜô –£—Ä–æ–≤–µ–Ω—å: {user_data.level}
‚≠ê –û–ø—ã—Ç: {user_data.experience}/{required_exp}
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%

üíé VIP: {"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if self.is_vip(user_data) else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
        """
        
        await update.message.reply_text(rank_text)
        await self.add_experience(user_data, 1)

    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/profile")
        
        vip_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if self.is_vip(user_data) else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        vip_expires = "–ë–µ—Å—Å—Ä–æ—á–Ω–æ" if not user_data.vip_expires else user_data.vip_expires[:10]
        
        profile_text = f"""
üë§ –ü–†–û–§–ò–õ–¨

–ò–º—è: {user_data.first_name}
Username: @{user_data.username if user_data.username else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
–ù–∏–∫–Ω–µ–π–º: {user_data.nickname if user_data.nickname else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

üÜô –£—Ä–æ–≤–µ–Ω—å: {user_data.level}
‚≠ê –û–ø—ã—Ç: {user_data.experience}/{user_data.level * 100}
üíé VIP: {vip_status}
üìÖ VIP –¥–æ: {vip_expires}

üìù –ó–∞–º–µ—Ç–æ–∫: {len(user_data.notes)}
üß† –ó–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏: {len(user_data.memory_data)}
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(user_data.reminders)}
üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user_data.achievements)}

üåê –Ø–∑—ã–∫: {user_data.language}
üé® –¢–µ–º–∞: {user_data.theme}
        """
        
        await update.message.reply_text(profile_text)
        await self.add_experience(user_data, 1)

    # =============================================================================
    # VIP –ö–û–ú–ê–ù–î–´
    # =============================================================================

    async def vip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/vip")
        
        if not self.is_vip(user_data):
            await update.message.reply_text(f"üíé –í—ã –Ω–µ VIP!\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @{CREATOR_USERNAME}")
            return
        
        expires_text = '–±–µ—Å—Å—Ä–æ—á–Ω–æ'
        if user_data.vip_expires:
            try:
                expires_date = datetime.datetime.fromisoformat(user_data.vip_expires)
                expires_text = expires_date.strftime('%d.%m.%Y')
            except:
                expires_text = '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
        
        vip_text = f"""
üíé VIP –°–¢–ê–¢–£–°

‚úÖ VIP –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {expires_text}

–í–∞—à–∏ VIP –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:
‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ üé® –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
‚Ä¢ üîî –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ üéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        """
        
        await update.message.reply_text(vip_text)
        await self.add_experience(user_data, 1)

    async def remind_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        
        if not self.is_vip(user_data):
            await update.message.reply_text("üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP!")
            return
        
        self.db.log_command(user_data.user_id, "/remind")
        
        if len(context.args) < 2:
            await update.message.reply_text("‚è∞ /remind [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç]\n–ü—Ä–∏–º–µ—Ä: /remind 30 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ")
            return
        
        try:
            minutes = int(context.args[0])
            text = " ".join(context.args[1:])
            
            if minutes <= 0:
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                return
            
            run_date = datetime.datetime.now() + datetime.timedelta(minutes=minutes)
            
            job = self.scheduler.add_job(
                self.send_notification,
                trigger=DateTrigger(run_date=run_date),
                args=[context, user_data.user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}"],
                id=f"reminder_{user_data.user_id}_{int(time.time())}"
            )
            
            reminder_data = {
                "id": job.id,
                "text": text,
                "time": run_date.isoformat(),
                "minutes": minutes
            }
            user_data.reminders.append(reminder_data)
            self.db.save_user(user_data)
            
            await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω—É—Ç!")
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        
        await self.add_experience(user_data, 2)

    async def reminders_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        
        if not self.is_vip(user_data):
            await update.message.reply_text("üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP!")
            return
        
        self.db.log_command(user_data.user_id, "/reminders")
        
        if not user_data.reminders:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!")
            return
        
        reminders_text = "\n".join([
            f"{i+1}. {rem['text']} ({rem.get('time', '').split('T')[0] if rem.get('time') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})" 
            for i, rem in enumerate(user_data.reminders)
        ])
        
        await update.message.reply_text(f"‚è∞ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{reminders_text}")
        await self.add_experience(user_data, 1)

    async def delreminder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        
        if not self.is_vip(user_data):
            await update.message.reply_text("üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP!")
            return
        
        self.db.log_command(user_data.user_id, "/delreminder")
        
        if not context.args or not context.args[0].isdigit():
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!\n–ü—Ä–∏–º–µ—Ä: /delreminder 1")
            return
        
        index = int(context.args[0]) - 1
        if 0 <= index < len(user_data.reminders):
            deleted_reminder = user_data.reminders.pop(index)
            self.db.save_user(user_data)
            await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {deleted_reminder.get('text', '')}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")
        
        await self.add_experience(user_data, 1)

    async def nickname_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        
        if not self.is_vip(user_data):
            await update.message.reply_text("üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP!")
            return
        
        self.db.log_command(user_data.user_id, "/nickname")
        
        if not context.args:
            await update.message.reply_text("üìù /nickname [–∏–º—è]\n–ü—Ä–∏–º–µ—Ä: /nickname –°—É–ø–µ—Ä –≠—Ä–Ω–µ—Å—Ç")
            return
        
        nickname = " ".join(context.args)
        user_data.nickname = nickname
        self.db.save_user(user_data)
        await update.message.reply_text(f"‚úÖ –ù–∏–∫–Ω–µ–π–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {nickname}")
        await self.add_experience(user_data, 1)

    async def theme_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        
        if not self.is_vip(user_data):
            await update.message.reply_text("üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP!")
            return
        
        self.db.log_command(user_data.user_id, "/theme")
        
        if not context.args:
            await update.message.reply_text(f"üé® –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {user_data.theme}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n‚Ä¢ default\n‚Ä¢ dark\n‚Ä¢ light\n‚Ä¢ colorful\n\n–ü—Ä–∏–º–µ—Ä: /theme dark")
            return
        
        theme = context.args[0].lower()
        themes = ['default', 'dark', 'light', 'colorful']
        
        if theme in themes:
            user_data.theme = theme
            self.db.save_user(user_data)
            await update.message.reply_text(f"‚úÖ –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {theme}")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ç–µ–º–∞! –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(themes)}")
        
        await self.add_experience(user_data, 1)

    # =============================================================================
    # –ö–û–ú–ê–ù–î–´ –°–û–ó–î–ê–¢–ï–õ–Ø
    # =============================================================================

    async def grant_vip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é!")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("üíé /grant_vip [user_id/@username] [week/month/year/permanent]\n–ü—Ä–∏–º–µ—Ä: /grant_vip @username month")
            return
        
        try:
            target = context.args[0]
            duration = context.args[1].lower()
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ username —Å @
            if target.startswith('@'):
                username = target[1:]
                target_user = self.db.get_user_by_username(username)
                if not target_user:
                    await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (/start)")
                    return
            else:
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ user_id
                target_id = int(target)
                target_user = self.db.get_user(target_id)
                if not target_user:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (/start)")
                    return
            
            target_user.is_vip = True
            
            if duration == "week":
                target_user.vip_expires = (datetime.datetime.now() + datetime.timedelta(weeks=1)).isoformat()
                duration_text = "1 –Ω–µ–¥–µ–ª—é"
            elif duration == "month":
                target_user.vip_expires = (datetime.datetime.now() + datetime.timedelta(days=30)).isoformat()
                duration_text = "1 –º–µ—Å—è—Ü"
            elif duration == "year":
                target_user.vip_expires = (datetime.datetime.now() + datetime.timedelta(days=365)).isoformat()
                duration_text = "1 –≥–æ–¥"
            elif duration == "permanent":
                target_user.vip_expires = None
                duration_text = "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: week/month/year/permanent")
                return
            
            self.db.save_user(target_user)
            
            username_display = f"@{target_user.username}" if target_user.username else f"ID:{target_user.user_id}"
            await update.message.reply_text(f"‚úÖ VIP –≤—ã–¥–∞–Ω!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_user.first_name} ({username_display})\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    target_user.user_id, 
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ VIP —Å—Ç–∞—Ç—É—Å!\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vip –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π"
                )
            except:
                pass
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ user_id (—á–∏—Å–ª–æ) –∏–ª–∏ @username")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ VIP: {e}")

    async def revoke_vip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é!")
            return
        
        if not context.args:
            await update.message.reply_text("üíé /revoke_vip [user_id/@username]\n–ü—Ä–∏–º–µ—Ä: /revoke_vip @username")
            return
        
        try:
            target = context.args[0]
            
            if target.startswith('@'):
                username = target[1:]
                target_user = self.db.get_user_by_username(username)
                if not target_user:
                    await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return
            else:
                target_id = int(target)
                target_user = self.db.get_user(target_id)
                if not target_user:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return
            
            if not target_user.is_vip:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.first_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è VIP!")
                return
            
            target_user.is_vip = False
            target_user.vip_expires = None
            self.db.save_user(target_user)
            
            username_display = f"@{target_user.username}" if target_user.username else f"ID:{target_user.user_id}"
            await update.message.reply_text(f"‚úÖ VIP –æ—Ç–æ–∑–≤–∞–Ω —É {target_user.first_name} ({username_display})")
            
            try:
                await context.bot.send_message(
                    target_user.user_id,
                    "üíé –í–∞—à VIP —Å—Ç–∞—Ç—É—Å –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
            except:
                pass
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ user_id (—á–∏—Å–ª–æ) –∏–ª–∏ @username")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é!")
            return
        
        users = self.db.get_all_users()
        if not users:
            await update.message.reply_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç!")
            return
            
        users_text = "üë• –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n\n"
        for user_id, first_name, level, last_activity in users[:20]:
            vip_status = "üíé" if any(u.get('user_id') == user_id and u.get('is_vip') for u in self.db.users) else "üë§"
            users_text += f"{vip_status} {first_name} (ID: {user_id}) - –£—Ä.{level}\n"
        
        if len(users) > 20:
            users_text += f"\n... –∏ –µ—â—ë {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
        await update.message.reply_text(users_text)

    async def vipusers_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é!")
            return
        
        vip_users = self.db.get_vip_users()
        if not vip_users:
            await update.message.reply_text("üíé VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç!")
            return
            
        vip_text = "üíé VIP –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n\n"
        for user_id, first_name, vip_expires in vip_users:
            expires_text = "–ë–µ—Å—Å—Ä–æ—á–Ω–æ" if not vip_expires else vip_expires[:10]
            vip_text += f"‚Ä¢ {first_name} (ID: {user_id})\n  –î–æ: {expires_text}\n"
            
        await update.message.reply_text(vip_text)

    async def broadcast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é!")
            return
        
        if not context.args:
            await update.message.reply_text("üì¢ /broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ]\n–ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!")
            return
        
        message = " ".join(context.args)
        users = self.db.get_all_users()
        sent_count = 0
        failed_count = 0
        
        await update.message.reply_text(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for user_id, first_name, level, last_activity in users:
            try:
                await context.bot.send_message(user_id, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è:\n\n{message}")
                sent_count += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                failed_count += 1
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"–ù–µ—É–¥–∞—á–Ω–æ: {failed_count}"
        )

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        
        if self.is_creator(user_data.user_id):
            total_users = self.db.get_growth_stats()
            vip_users = len(self.db.get_vip_users())
            total_commands = len(self.db.logs)
            popular_commands = self.db.get_popular_commands()[:5]
            
            stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üíé VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {vip_users}
üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {total_commands}

üî• –¢–û–ü-5 –ö–û–ú–ê–ù–î:
"""
            for cmd, data in popular_commands:
                stats_text += f"‚Ä¢ {cmd}: {data['usage_count']} —Ä–∞–∑\n"
            
            stats_text += f"\n‚ö° –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω\nüìÖ {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"
            
        else:
            stats_text = f"""
üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üë§ –ò–º—è: {user_data.first_name}
üÜô –£—Ä–æ–≤–µ–Ω—å: {user_data.level}
‚≠ê –û–ø—ã—Ç: {user_data.experience}/{user_data.level * 100}
üíé VIP: {"‚úÖ" if self.is_vip(user_data) else "‚ùå"}
üìù –ó–∞–º–µ—Ç–æ–∫: {len(user_data.notes)}
üß† –ü–∞–º—è—Ç–∏: {len(user_data.memory_data)}
üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user_data.achievements)}
            """
        
        self.db.log_command(user_data.user_id, "/stats")
        await update.message.reply_text(stats_text)
        await self.add_experience(user_data, 1)

    async def maintenance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é!")
            return
        
        if not context.args:
            status = "–≤–∫–ª—é—á–µ–Ω" if self.maintenance_mode else "–≤—ã–∫–ª—é—á–µ–Ω"
            await update.message.reply_text(f"üõ† –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {status}\n\n/maintenance [on/off]")
            return
        
        mode = context.args[0].lower()
        if mode in ['on', '–≤–∫–ª']:
            self.maintenance_mode = True
            await update.message.reply_text("üõ† –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –í–ö–õ–Æ–ß–ï–ù")
        elif mode in ['off', '–≤—ã–∫–ª']:
            self.maintenance_mode = False
            await update.message.reply_text("‚úÖ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –í–´–ö–õ–Æ–ß–ï–ù")
        else:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /maintenance [on/off]")

    async def backup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é!")
            return
        
        try:
            backup_data = {
                'users': self.db.users,
                'logs': self.db.logs[-100:],
                'statistics': self.db.statistics,
                'backup_time': datetime.datetime.now().isoformat()
            }
            
            success = self.db.save_data(BACKUP_PATH, backup_data)
            if success:
                await update.message.reply_text(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.db.users)}\n–í—Ä–µ–º—è: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def cleanup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é!")
            return
        
        try:
            removed = self.db.cleanup_inactive()
            await update.message.reply_text(f"‚úÖ –û—á–∏—â–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {removed}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    # =============================================================================
    # CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    # =============================================================================

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == "help":
            fake_update = Update(update_id=update.update_id, message=query.message)
            await self.help_command(fake_update, context)
            
        elif query.data == "vip_info":
            fake_update = Update(update_id=update.update_id, message=query.message)
            await self.vip_command(fake_update, context)
            
        elif query.data == "ai_demo":
            await query.edit_message_text(
                "ü§ñ AI-—á–∞—Ç –≥–æ—Ç–æ–≤!\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ—Å–º–æ—Å–µ\n"
                "‚Ä¢ –ü–æ–º–æ–≥–∏ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π\n"
                "‚Ä¢ –û–±—ä—è—Å–Ω–∏ Python\n"
                "‚Ä¢ –ü—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"
            )
            
        elif query.data == "my_stats":
            fake_update = Update(update_id=update.update_id, message=query.message)
            await self.stats_command(fake_update, context)

    # =============================================================================
    # –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò
    # =============================================================================

    async def self_ping(self):
        try:
            response = requests.get(RENDER_URL, timeout=10)
            logger.info(f"Self-ping —É—Å–ø–µ—à–µ–Ω: {response.status_code}")
        except Exception as e:
            logger.warning(f"Self-ping –Ω–µ —É–¥–∞–ª—Å—è: {e}")

    # =============================================================================
    # –ó–ê–ü–£–°–ö –ë–û–¢–ê
    # =============================================================================

    async def run_bot(self):
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        application = (
            Application.builder()
            .token(BOT_TOKEN)
            .read_timeout(30)
            .write_timeout(30)
            .connect_timeout(30)
            .pool_timeout(30)
            .build()
        )
        
        async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
            logger.error(f"Exception: {context.error}")
            
            if isinstance(context.error, telegram.error.Conflict):
                logger.error("–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤")
                await asyncio.sleep(30)
        
        application.add_error_handler(error_handler)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("info", self.info_command))
        application.add_handler(CommandHandler("status", self.status_command))
        application.add_handler(CommandHandler("ping", self.ping_command))
        application.add_handler(CommandHandler("ai", self.ai_command))
        application.add_handler(CommandHandler("note", self.note_command))
        application.add_handler(CommandHandler("notes", self.notes_command))
        application.add_handler(CommandHandler("delnote", self.delnote_command))
        application.add_handler(CommandHandler("findnote", self.findnote_command))
        application.add_handler(CommandHandler("clearnotes", self.clearnotes_command))
        application.add_handler(CommandHandler("memorysave", self.memorysave_command))
        application.add_handler(CommandHandler("memoryget", self.memoryget_command))
        application.add_handler(CommandHandler("memorylist", self.memorylist_command))
        application.add_handler(CommandHandler("memorydel", self.memorydel_command))
        application.add_handler(CommandHandler("joke", self.joke_command))
        application.add_handler(CommandHandler("fact", self.fact_command))
        application.add_handler(CommandHandler("quote", self.quote_command))
        application.add_handler(CommandHandler("coin", self.coin_command))
        application.add_handler(CommandHandler("dice", self.dice_command))
        application.add_handler(CommandHandler("8ball", self.eightball_command))
        application.add_handler(CommandHandler("time", self.time_command))
        application.add_handler(CommandHandler("date", self.date_command))
        application.add_handler(CommandHandler("weather", self.weather_command))
        application.add_handler(CommandHandler("currency", self.currency_command))
        application.add_handler(CommandHandler("translate", self.translate_command))
        application.add_handler(CommandHandler("rank", self.rank_command))
        application.add_handler(CommandHandler("profile", self.profile_command))
        application.add_handler(CommandHandler("vip", self.vip_command))
        application.add_handler(CommandHandler("remind", self.remind_command))
        application.add_handler(CommandHandler("reminders", self.reminders_command))
        application.add_handler(CommandHandler("delreminder", self.delreminder_command))
        application.add_handler(CommandHandler("nickname", self.nickname_command))
        application.add_handler(CommandHandler("theme", self.theme_command))
        application.add_handler(CommandHandler("grant_vip", self.grant_vip_command))
        application.add_handler(CommandHandler("revoke_vip", self.revoke_vip_command))
        application.add_handler(CommandHandler("users", self.users_command))
        application.add_handler(CommandHandler("vipusers", self.vipusers_command))
        application.add_handler(CommandHandler("broadcast", self.broadcast_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("maintenance", self.maintenance_command))
        application.add_handler(CommandHandler("backup", self.backup_command))
        application.add_handler(CommandHandler("cleanup", self.cleanup_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(
            MessageHandler(
                filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, 
                self.handle_message
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        loop = asyncio.get_running_loop()
        self.scheduler.configure(event_loop=loop)
        self.scheduler.start()
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–∏–Ω–≥ (–∫–∞–∂–¥—ã–µ 14 –º–∏–Ω—É—Ç)
        self.scheduler.add_job(
            self.self_ping,
            'interval',
            minutes=14,
            id='self_ping'
        )
        
        # –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–ï –ü–ê–ü–ï 3 –û–ö–¢–Ø–ë–†–Ø –í 9:00 (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
        self.scheduler.add_job(
            self.send_dad_birthday_greeting,
            trigger=CronTrigger(month=10, day=3, hour=9, minute=0, timezone='Europe/Moscow'),
            args=[application],
            id='dad_birthday'
        )
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        try:
            await application.run_polling(
                drop_pending_updates=True,
                timeout=30,
                bootstrap_retries=3
            )
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================

async def main():
    bot = TelegramBot()
    await bot.run_bot()

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return f"ü§ñ Telegram AI Bot is running!\n‚è∞ Time: {datetime.datetime.now()}"

@app.route('/health')
def health():
    return {"status": "ok", "time": datetime.datetime.now().isoformat()}

if __name__ == "__main__":
    from threading import Thread
    
    port = int(os.getenv("PORT", 8080))
    flask_thread = Thread(
        target=app.run, 
        kwargs={'host': '0.0.0.0', 'port': port, 'debug': False}
    )
    flask_thread.daemon = True
    flask_thread.start()
    
    asyncio.run(main())#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–î–ï–ê–õ–¨–ù–´–ô –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢ - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å AI, VIP-—Å–∏—Å—Ç–µ–º–æ–π –∏ –±–æ–ª–µ–µ —á–µ–º 50 —Ñ—É–Ω–∫—Ü–∏—è–º–∏
"""

import asyncio
import logging
import json
import random
import time
import datetime
import re
import requests
import aiohttp
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field
import os
import sys
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.triggers.cron import CronTrigger
from newsapi import NewsApiClient
import nest_asyncio
from flask import Flask
import pytz
from github import Github

nest_asyncio.apply()

# Telegram Bot API
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ContextTypes, CallbackQueryHandler
)
from telegram.constants import ChatType
import telegram.error  # –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫

# Google Gemini
import google.generativeai as genai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´
# =============================================================================

# API –∫–ª—é—á–∏ –∏–∑ env
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
CURRENCY_API_KEY = os.getenv("FREECURRENCY_API_KEY")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY")
ALPHAVANTAGE_API_KEY = os.getenv("ALPHAVANTAGE_API_KEY")

# GitHub
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_REPO = "ErnestKostevich/telegram-ai--bot"
USERS_FILE = "users.json"
LOGS_FILE = "logs.json"
STATISTICS_FILE = "statistics.json"

# ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞
CREATOR_ID = 7108255346
CREATOR_USERNAME = "Ernest_Kostevich"
DAD_USERNAME = "mkostevich"
BOT_USERNAME = "@AI_DISCO_BOT"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

MODEL = os.getenv("MODEL", "gemini-2.0-flash-exp")

# Maintenance mode flag
MAINTENANCE_MODE = False

# Backup path
BACKUP_PATH = "bot_backup.json"

# Render URL –¥–ª—è –ø–∏–Ω–≥–∞
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "https://telegram-ai--bot.onrender.com")

# =============================================================================
# –ö–õ–ê–°–°–´ –î–ê–ù–ù–´–•
# =============================================================================

@dataclass
class UserData:
    user_id: int
    username: str
    first_name: str
    is_vip: bool = False
    vip_expires: Optional[str] = None
    language: str = "ru"
    notes: List[str] = field(default_factory=list)
    reminders: List[Dict] = field(default_factory=list)
    birthday: Optional[str] = None
    nickname: Optional[str] = None
    level: int = 1
    experience: int = 0
    achievements: List[str] = field(default_factory=list)
    memory_data: Dict = field(default_factory=dict)
    theme: str = "default"
    color: str = "blue"
    sound_notifications: bool = True
    last_activity: str = field(default_factory=lambda: datetime.datetime.now().isoformat())

    @classmethod
    def from_dict(cls, data: Dict):
        return cls(
            user_id=data['user_id'],
            username=data.get('username', ''),
            first_name=data.get('first_name', ''),
            is_vip=data.get('is_vip', False),
            vip_expires=data.get('vip_expires'),
            language=data.get('language', 'ru'),
            notes=data.get('notes', []),
            reminders=data.get('reminders', []),
            birthday=data.get('birthday'),
            nickname=data.get('nickname'),
            level=data.get('level', 1),
            experience=data.get('experience', 0),
            achievements=data.get('achievements', []),
            memory_data=data.get('memory_data', {}),
            theme=data.get('theme', 'default'),
            color=data.get('color', 'blue'),
            sound_notifications=data.get('sound_notifications', True),
            last_activity=data.get('last_activity', datetime.datetime.now().isoformat())
        )

    def to_dict(self):
        return {
            'user_id': self.user_id,
            'username': self.username,
            'first_name': self.first_name,
            'is_vip': self.is_vip,
            'vip_expires': self.vip_expires,
            'language': self.language,
            'notes': self.notes,
            'reminders': self.reminders,
            'birthday': self.birthday,
            'nickname': self.nickname,
            'level': self.level,
            'experience': self.experience,
            'achievements': self.achievements,
            'memory_data': self.memory_data,
            'theme': self.theme,
            'color': self.color,
            'sound_notifications': self.sound_notifications,
            'last_activity': self.last_activity
        }

# =============================================================================
# –ë–ê–ó–ê –î–ê–ù–ù–´–• (GitHub Files)
# =============================================================================

class DatabaseManager:
    def __init__(self):
        self.g = None
        self.repo = None
        self.users = []
        self.logs = []
        self.statistics = {}
        
        if GITHUB_TOKEN:
            try:
                self.g = Github(GITHUB_TOKEN)
                self.repo = self.g.get_repo(GITHUB_REPO)
                logger.info("GitHub API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GitHub API: {e}")
        
        self.users = self.load_data(USERS_FILE, [])
        self.logs = self.load_data(LOGS_FILE, [])
        self.statistics = self.load_data(STATISTICS_FILE, {})
    
    def load_data(self, path, default):
        if not self.repo:
            logger.warning(f"GitHub –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {path}")
            return default
            
        try:
            file = self.repo.get_contents(path)
            content = file.decoded_content.decode('utf-8')
            data = json.loads(content)
            
            if path == USERS_FILE and isinstance(data, dict) and not data:
                data = []
            elif path == STATISTICS_FILE and isinstance(data, list):
                data = {}
            elif path == LOGS_FILE and isinstance(data, dict) and not data:
                data = []
                
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {path}")
            return data
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {path}: {e}")
            return default
    
    def save_data(self, path, data):
        if not self.repo:
            logger.warning(f"GitHub –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {path}")
            return False
            
        try:
            content = json.dumps(data, ensure_ascii=False, indent=2)
            
            try:
                file = self.repo.get_contents(path)
                self.repo.update_file(path, f"Update {path}", content, file.sha)
            except:
                self.repo.create_file(path, f"Create {path}", content)
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {path}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {path}: {e}")
            return False
    
    def get_user(self, user_id: int) -> Optional[UserData]:
        for user_dict in self.users:
            if user_dict.get('user_id') == user_id:
                return UserData.from_dict(user_dict)
        return None
    
    def get_user_by_username(self, username: str) -> Optional[UserData]:
        username = username.lstrip('@').lower()
        for user_dict in self.users:
            stored_username = user_dict.get('username', '').lower()
            if stored_username == username:
                return UserData.from_dict(user_dict)
        return None
    
    def save_user(self, user_data: UserData):
        user_data.last_activity = datetime.datetime.now().isoformat()
        
        if not isinstance(self.users, list):
            self.users = []
        
        for i, user_dict in enumerate(self.users):
            if user_dict.get('user_id') == user_data.user_id:
                self.users[i] = user_data.to_dict()
                break
        else:
            self.users.append(user_data.to_dict())
        
        self.save_data(USERS_FILE, self.users)
    
    def log_command(self, user_id: int, command: str, message: str = ""):
        log_entry = {
            'user_id': user_id,
            'command': command,
            'message': message,
            'timestamp': datetime.datetime.now().isoformat()
        }
        
        self.logs.append(log_entry)
        
        if len(self.logs) > 1000:
            self.logs = self.logs[-1000:]
        
        if command in self.statistics:
            self.statistics[command]['usage_count'] += 1
            self.statistics[command]['last_used'] = datetime.datetime.now().isoformat()
        else:
            self.statistics[command] = {
                'usage_count': 1,
                'last_used': datetime.datetime.now().isoformat()
            }
        
        asyncio.create_task(self._save_logs_async())
    
    async def _save_logs_async(self):
        await asyncio.get_event_loop().run_in_executor(
            None, self.save_data, LOGS_FILE, self.logs
        )
        await asyncio.get_event_loop().run_in_executor(
            None, self.save_data, STATISTICS_FILE, self.statistics
        )
    
    def get_all_users(self) -> List[tuple]:
        return [(u.get('user_id'), u.get('first_name', 'Unknown'), u.get('level', 1), u.get('last_activity', '')) for u in self.users]
    
    def get_vip_users(self) -> List[tuple]:
        return [(u.get('user_id'), u.get('first_name', 'Unknown'), u.get('vip_expires')) for u in self.users if u.get('is_vip')]
    
    def get_popular_commands(self) -> List[tuple]:
        return sorted(self.statistics.items(), key=lambda x: x[1]['usage_count'], reverse=True)[:10]
    
    def get_growth_stats(self):
        return len(self.users)

# =============================================================================
# –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê
# =============================================================================

class TelegramBot:
    def __init__(self):
        self.db = DatabaseManager()
        self.gemini_model = None
        if GEMINI_API_KEY:
            try:
                self.gemini_model = genai.GenerativeModel(MODEL)
                logger.info("Gemini –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")
        
        self.user_contexts = {}
        self.scheduler = AsyncIOScheduler()
        self.news_api = NewsApiClient(api_key=NEWSAPI_KEY) if NEWSAPI_KEY else None
        self.maintenance_mode = False
    
    async def get_user_data(self, update: Update) -> UserData:
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        if not user_data:
            user_data = UserData(
                user_id=user.id,
                username=user.username or "",
                first_name=user.first_name or ""
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π VIP –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
            if self.is_creator(user.id):
                user_data.is_vip = True
                user_data.vip_expires = None
                logger.info(f"–°–æ–∑–¥–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π VIP: {user.id}")
            
            self.db.save_user(user_data)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} ({user.first_name})")
        
        return user_data
    
    def is_creator(self, user_id: int) -> bool:
        return user_id == CREATOR_ID
    
    def is_vip(self, user_data: UserData) -> bool:
        if not user_data.is_vip:
            return False
        
        if user_data.vip_expires:
            try:
                expires_date = datetime.datetime.fromisoformat(user_data.vip_expires)
                if datetime.datetime.now() > expires_date:
                    user_data.is_vip = False
                    user_data.vip_expires = None
                    self.db.save_user(user_data)
                    return False
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VIP —Å—Ä–æ–∫–∞: {e}")
                return False
        
        return True
    
    async def add_experience(self, user_data: UserData, points: int = 1):
        user_data.experience += points
        
        required_exp = user_data.level * 100
        if user_data.experience >= required_exp:
            user_data.level += 1
            user_data.experience = 0
            achievement = f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç {user_data.level} —É—Ä–æ–≤–µ–Ω—å!"
            if achievement not in user_data.achievements:
                user_data.achievements.append(achievement)
        
        self.db.save_user(user_data)
    
    async def send_notification(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, message: str):
        try:
            await context.bot.send_message(chat_id=user_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–ï –î–õ–Ø –ü–ê–ü–´ 3 –û–ö–¢–Ø–ë–†–Ø
    async def send_dad_birthday_greeting(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–µ"""
        try:
            dad_user = self.db.get_user_by_username(DAD_USERNAME)
            if dad_user:
                greeting = """
üéâüéÇ –° –î–ù–Å–ú –†–û–ñ–î–ï–ù–ò–Ø! üéÇüéâ

–î–æ—Ä–æ–≥–æ–π –ø–∞–ø–∞!

–û—Ç –≤—Å–µ–≥–æ —Å–µ—Ä–¥—Ü–∞ –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è! 
–ñ–µ–ª–∞—é –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, —Å—á–∞—Å—Ç—å—è, —É—Å–ø–µ—Ö–æ–≤!

–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!

–° –ª—é–±–æ–≤—å—é, —Ç–≤–æ–π —Å—ã–Ω! ‚ù§Ô∏è
                """
                await context.bot.send_message(chat_id=dad_user.user_id, text=greeting)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–µ {dad_user.user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–µ: {e}")

    # =============================================================================
    # –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´
    # =============================================================================

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/start")
        
        if self.is_creator(user_data.user_id):
            message = f"""
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –°–æ–∑–¥–∞—Ç–µ–ª—å @{CREATOR_USERNAME}!

üëë –í–∞—à–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è

ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
            """
        elif self.is_vip(user_data):
            nickname = user_data.nickname or user_data.first_name
            expires_text = '–±–µ—Å—Å—Ä–æ—á–Ω–æ'
            if user_data.vip_expires:
                try:
                    expires_date = datetime.datetime.fromisoformat(user_data.vip_expires)
                    expires_text = expires_date.strftime('%d.%m.%Y')
                except:
                    expires_text = '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
            
            message = f"""
üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nickname}!

‚≠ê VIP —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {expires_text}

VIP –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
            """
        else:
            message = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user_data.first_name}!

–Ø AI-–±–æ—Ç —Å 50+ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!

üåü –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ üí¨ AI-—á–∞—Ç (Gemini 2.0)
‚Ä¢ üìù –ó–∞–º–µ—Ç–∫–∏ –∏ –ø–∞–º—è—Ç—å
‚Ä¢ üå§Ô∏è –ü–æ–≥–æ–¥–∞
‚Ä¢ üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
‚Ä¢ üéÆ –ò–≥—Ä—ã
‚Ä¢ üåê –ü–µ—Ä–µ–≤–æ–¥—ã

üíé –•–æ—Ç–∏—Ç–µ VIP? –°–≤—è–∂–∏—Ç–µ—Å—å —Å @{CREATOR_USERNAME}
ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
            """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data="help"),
             InlineKeyboardButton("üíé VIP", callback_data="vip_info")],
            [InlineKeyboardButton("ü§ñ AI", callback_data="ai_demo"),
             InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        await self.add_experience(user_data, 1)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/help")
        
        help_text = """
üìã –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î

üè† –ë–ê–ó–û–í–´–ï:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/info - –û –±–æ—Ç–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

üí¨ AI-–ß–ê–¢:
/ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI
–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!

üìù –ó–ê–ú–ï–¢–ö–ò:
/note [—Ç–µ–∫—Å—Ç] - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/notes - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏
/delnote [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/findnote [—Ç–µ–∫—Å—Ç] - –ü–æ–∏—Å–∫ –≤ –∑–∞–º–µ—Ç–∫–∞—Ö
/clearnotes - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ

‚è∞ –í–†–ï–ú–Ø –ò –î–ê–¢–ê:
/time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
/date - –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞

üéÆ –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø:
/joke - –®—É—Ç–∫–∞
/fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
/quote - –¶–∏—Ç–∞—Ç–∞
/coin - –ë—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
/dice - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
/8ball [–≤–æ–ø—Ä–æ—Å] - –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä

üå§Ô∏è –£–¢–ò–õ–ò–¢–´:
/weather [–≥–æ—Ä–æ–¥] - –ü–æ–≥–æ–¥–∞
/currency [–∏–∑] [–≤] - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç
/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–æ–¥

üß† –ü–ê–ú–Ø–¢–¨:
/memorysave [–∫–ª—é—á] [–∑–Ω–∞—á–µ–Ω–∏–µ]
/memoryget [–∫–ª—é—á]
/memorylist - –°–ø–∏—Å–æ–∫
/memorydel [–∫–ª—é—á]

üìä –ü–†–û–§–ò–õ–¨:
/rank - –í–∞—à —É—Ä–æ–≤–µ–Ω—å
/profile - –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        """
        
        if self.is_vip(user_data):
            help_text += """

üíé VIP –ö–û–ú–ê–ù–î–´:
/vip - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP
/remind [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç] - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/reminders - –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
/delreminder [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/nickname [–∏–º—è] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º
/theme [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É
            """
        
        if self.is_creator(user_data.user_id):
            help_text += """

üëë –ö–û–ú–ê–ù–î–´ –°–û–ó–î–ê–¢–ï–õ–Ø:
/grant_vip [user_id/@username] [duration]
/revoke_vip [user_id/@username]
/broadcast [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞
/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/vipusers - –°–ø–∏—Å–æ–∫ VIP
/stats - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/maintenance [on/off] - –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
/backup - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
/cleanup - –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
            """
        
        await update.message.reply_text(help_text)
        await self.add_experience(user_data, 1)

    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/info")
        
        info_text = f"""
ü§ñ –û –ë–û–¢–ï

–í–µ—Ä—Å–∏—è: 2.1 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
–°–æ–∑–¥–∞—Ç–µ–ª—å: @{CREATOR_USERNAME}
–ë–æ—Ç: {BOT_USERNAME}

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: 50+ –∫–æ–º–∞–Ω–¥
AI: {"Gemini 2.0 ‚úÖ" if self.gemini_model else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚ùå"}
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {"GitHub ‚úÖ" if self.db.repo else "–õ–æ–∫–∞–ª—å–Ω–∞—è"}
–•–æ—Å—Ç–∏–Ω–≥: Render

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 —Å –∞–≤—Ç–æ–ø–∏–Ω–≥–æ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        """
        await update.message.reply_text(info_text)
        await self.add_experience(user_data, 1)

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/status")
        
        total_users = self.db.get_growth_stats()
        total_commands = len(self.db.logs)
        
        status_text = f"""
‚ö° –°–¢–ê–¢–£–° –ë–û–¢–ê

–°—Ç–∞—Ç—É—Å: ‚úÖ –û–Ω–ª–∞–π–Ω
–í–µ—Ä—Å–∏—è: 2.1
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
–ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_commands}

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
‚Ä¢ Gemini AI: {"‚úÖ" if self.gemini_model else "‚ùå"}
‚Ä¢ GitHub DB: {"‚úÖ" if self.db.repo else "‚ùå"}
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {"‚úÖ" if self.scheduler.running else "‚ùå"}
‚Ä¢ Maintenance: {"–í–∫–ª" if self.maintenance_mode else "–í—ã–∫–ª"}

–í—Ä–µ–º—è: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        await update.message.reply_text(status_text)
        await self.add_experience(user_data, 1)

    async def ping_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/ping")
        
        start_time = time.time()
        sent_msg = await update.message.reply_text("üèì Pong!")
        end_time = time.time()
        
        latency = round((end_time - start_time) * 1000, 2)
        await sent_msg.edit_text(f"üèì Pong! –ó–∞–¥–µ—Ä–∂–∫–∞: {latency}ms")
        await self.add_experience(user_data, 1)

    # =============================================================================
    # AI –ö–û–ú–ê–ù–î–´
    # =============================================================================

    async def ai_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/ai")
        
        if not context.args:
            await update.message.reply_text("ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /ai!\n–ü—Ä–∏–º–µ—Ä: /ai –ß—Ç–æ —Ç–∞–∫–æ–µ Python?")
            return
        
        if not self.gemini_model:
            await update.message.reply_text("‚ùå AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            return
        
        query = " ".join(context.args)
        try:
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            response = self.gemini_model.generate_content(query)
            await update.message.reply_text(response.text)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ AI: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ Gemini: {e}")
        
        await self.add_experience(user_data, 2)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if self.maintenance_mode and not self.is_creator(update.effective_user.id):
            await update.message.reply_text("üõ† –ë–æ—Ç –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "message")
        
        if not self.gemini_model:
            await update.message.reply_text("‚ùå AI-—á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai [–≤–æ–ø—Ä–æ—Å]")
            return
        
        message = update.message.text
        user_id = user_data.user_id
        
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = []
        
        self.user_contexts[user_id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}")
        if len(self.user_contexts[user_id]) > 10:
            self.user_contexts[user_id] = self.user_contexts[user_id][-10:]
        
        context_str = "\n".join(self.user_contexts[user_id][-5:])
        prompt = f"""
–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram –±–æ—Ç–µ. 
–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:
{context_str}

–û—Ç–≤–µ—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""
        
        try:
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            response = self.gemini_model.generate_content(prompt)
            await update.message.reply_text(response.text)
            
            self.user_contexts[user_id].append(f"–ë–æ—Ç: {response.text}")
        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        await self.add_experience(user_data, 1)

    # =============================================================================
    # –ö–û–ú–ê–ù–î–´ –ó–ê–ú–ï–¢–û–ö –ò –ü–ê–ú–Ø–¢–ò
    # =============================================================================

    async def note_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/note")
        
        if not context.args:
            await update.message.reply_text("üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏!\n–ü—Ä–∏–º–µ—Ä: /note –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ")
            return
        
        note = " ".join(context.args)
        user_data.notes.append(note)
        self.db.save_user(user_data)
        await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! (–í—Å–µ–≥–æ: {len
