#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import logging
import random
import asyncio
import signal
from datetime import datetime, timedelta
from typing import Dict, Optional, List
import pytz
import requests
import io
import re
from urllib.parse import quote as urlquote

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode

import google.generativeai as genai
import aiohttp
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bs4 import BeautifulSoup
from PIL import Image
import fitz  # PyMuPDF
import docx  # python-docx
from pydub import AudioSegment

from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime, JSON, Text, BigInteger
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# --- üõ†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
BOT_TOKEN = os.getenv('BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
DATABASE_URL = os.getenv('DATABASE_URL')
SUPPORTED_LANGUAGES = ['ru', 'en'] # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
DEFAULT_LANG = 'ru'
MAX_TELEGRAM_MESSAGE_LENGTH = 4000 # –õ–∏–º–∏—Ç Telegram - 4096, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å

CREATOR_USERNAME = "Ernest_Kostevich"
CREATOR_ID = None
BOT_START_TIME = datetime.now()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not BOT_TOKEN or not GEMINI_API_KEY:
    logger.error("‚ùå BOT_TOKEN –∏–ª–∏ GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    raise ValueError("Required environment variables missing")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini 2.5 Flash
genai.configure(api_key=GEMINI_API_KEY)

generation_config = {
    "temperature": 0.8, # –°–Ω–∏–∂–µ–Ω–æ –¥–ª—è –±–æ–ª—å—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    "top_p": 0.95,
    "top_k": 40,
    "max_output_tokens": 2048,
}

safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

SYSTEM_INSTRUCTION_TEMPLATE = (
    "You are AI DISCO BOT, a multifunctional, very smart and polite assistant, based on Gemini 2.5. "
    "Always respond in the language the user is using, maintaining a friendly, engaging tone. "
    "Your answers must be well-structured, preferably divided into paragraphs, and **never exceed 4000 characters** (Telegram limit). "
    "Your creator is @Ernest_Kostevich. Include emojis in your responses where appropriate."
)

# –ú–æ–¥–µ–ª—å Gemini 2.5 Flash (–æ—Å–Ω–æ–≤–Ω–∞—è –∏ Vision)
model = genai.GenerativeModel(
    model_name='gemini-2.5-flash',
    generation_config=generation_config,
    safety_settings=safety_settings,
    system_instruction=SYSTEM_INSTRUCTION_TEMPLATE
)

# --- üåç –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ê–ª–∏–∞—Å—ã –ö–æ–º–∞–Ω–¥ ---

# –°–ª–æ–≤–∞—Ä—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —è–∑—ã–∫–æ–≤!)
LOCALE = {
    'ru': {
        'welcome': "–ü—Ä–∏–≤–µ—Ç, {name}! –Ø –±–æ—Ç –Ω–∞ Gemini 2.5 Flash.",
        'chat_start': "ü§ñ <b>AI –ß–∞—Ç</b>\n\n–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ - —è –æ—Ç–≤–µ—á—É!\n/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç",
        'notes_menu': "üìù <b>–ó–∞–º–µ—Ç–∫–∏</b>",
        'weather_start': "üåç <b>–ü–æ–≥–æ–¥–∞</b>\n\n/weather [–≥–æ—Ä–æ–¥]\n–ü—Ä–∏–º–µ—Ä: /weather London",
        'time_start': "‚è∞ <b>–í—Ä–µ–º—è</b>\n\n/time [–≥–æ—Ä–æ–¥]\n–ü—Ä–∏–º–µ—Ä: /time Tokyo",
        'games_menu': "üé≤ <b>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</b>",
        'info_menu': "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ</b>",
        'vip_menu': "üíé <b>VIP –ú–µ–Ω—é</b>",
        'admin_panel': "üëë <b>–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å</b>",
        'generate_start': "üñºÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è (VIP)</b>\n\n/generate [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å, –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ. –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai.",
        'not_vip': "üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @Ernest_Kostevich",
        'only_creator': "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è.",
        'error': "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        'command_not_found': "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.",
        # Keyboard buttons
        'btn_ai_chat': "üí¨ AI –ß–∞—Ç",
        'btn_notes': "üìù –ó–∞–º–µ—Ç–∫–∏",
        'btn_weather': "üåç –ü–æ–≥–æ–¥–∞",
        'btn_time': "‚è∞ –í—Ä–µ–º—è",
        'btn_games': "üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        'btn_info': "‚ÑπÔ∏è –ò–Ω—Ñ–æ",
        'btn_vip_menu': "üíé VIP –ú–µ–Ω—é",
        'btn_admin_panel': "üëë –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å",
        'btn_generate': "üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è",
        # New
        'voice_received': "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é...",
        'voice_error': "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        'voice_transcribed': "üéôÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n\n<i>{text}</i>",
    },
    'en': {
        'welcome': "Hello, {name}! I'm a bot based on Gemini 2.5 Flash.",
        'chat_start': "ü§ñ <b>AI Chat</b>\n\nJust write - I'll answer!\n/clear - clear context",
        'notes_menu': "üìù <b>Notes</b>",
        'weather_start': "üåç <b>Weather</b>\n\n/weather [city]\nExample: /weather London",
        'time_start': "‚è∞ <b>Time</b>\n\n/time [city]\nExample: /time Tokyo",
        'games_menu': "üé≤ <b>Games</b>",
        'info_menu': "‚ÑπÔ∏è <b>Info</b>",
        'vip_menu': "üíé <b>VIP Menu</b>",
        'admin_panel': "üëë <b>Admin Panel</b>",
        'generate_start': "üñºÔ∏è <b>Image Generation (VIP)</b>\n\n/generate [description]\n\nüí° Third-party service used, quality may be limited. Use /ai for better quality.",
        'not_vip': "üíé This feature is for VIP users only.\n\nContact @Ernest_Kostevich",
        'only_creator': "‚ùå Only for the creator.",
        'error': "üòî An error occurred. Please try again.",
        'command_not_found': "Unknown command or invalid format.",
        # Keyboard buttons
        'btn_ai_chat': "üí¨ AI Chat",
        'btn_notes': "üìù Notes",
        'btn_weather': "üåç Weather",
        'btn_time': "‚è∞ Time",
        'btn_games': "üé≤ Games",
        'btn_info': "‚ÑπÔ∏è Info",
        'btn_vip_menu': "üíé VIP Menu",
        'btn_admin_panel': "üëë Admin Panel",
        'btn_generate': "üñºÔ∏è Generate",
        # New
        'voice_received': "üé§ Voice message received. Transcribing and analyzing...",
        'voice_error': "‚ùå Error processing voice message. Please try again.",
        'voice_transcribed': "üéôÔ∏è Transcription:\n\n<i>{text}</i>",
    }
}

# –ê–ª–∏–∞—Å—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
COMMAND_ALIASES = {
    'ai': ['ai', '—á–∞—Ç', 'chat', 'ask', '—Å–ø—Ä–æ—Å–∏—Ç—å'],
    'help': ['help', '–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞'],
    'weather': ['weather', '–ø–æ–≥–æ–¥–∞', 'wetter', 'tiempo'],
    'time': ['time', '–≤—Ä–µ–º—è', 'uhr', 'hora'],
    'note': ['note', '–∑–∞–º–µ—Ç–∫–∞', '–∑–∞–ø–∏—Å–∞—Ç—å'],
    'notes': ['notes', '–∑–∞–º–µ—Ç–∫–∏', 'listnotes'],
    'delnote': ['delnote', '—É–¥–∞–ª–∏—Ç—å–∑–∞–º–µ—Ç–∫—É'],
    'todo': ['todo', '–∑–∞–¥–∞—á–∏', 'task'],
    'translate': ['translate', '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏', 'tr'],
    'generate': ['generate', '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', 'draw', '—Ä–∏—Å–æ–≤–∞—Ç—å'],
    'vip': ['vip', '–≤–∏–ø'],
}

def get_user_lang(user_id: int) -> str:
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –∏–∑ –ë–î
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π, –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    # –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `update.effective_user.language_code`
    # –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return DEFAULT_LANG

def get_localized_text(user_id: int, key: str, **kwargs) -> str:
    lang = get_user_lang(user_id)
    text = LOCALE.get(lang, LOCALE[DEFAULT_LANG]).get(key, LOCALE[DEFAULT_LANG].get(key, f"<{key} not found>"))
    return text.format(**kwargs)

def get_command_name(text: str) -> Optional[str]:
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /weather@botname)
    match = re.match(r'/([a-zA-Z0-9_]+)', text)
    if match:
        command = match.group(1).lower()
        for internal_name, aliases in COMMAND_ALIASES.items():
            if command in aliases:
                return internal_name
    return None

# --- üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –•—Ä–∞–Ω–µ–Ω–∏–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    
    id = Column(BigInteger, primary_key=True)
    username = Column(String(255))
    first_name = Column(String(255))
    vip = Column(Boolean, default=False)
    vip_until = Column(DateTime)
    notes = Column(JSON, default=list)
    todos = Column(JSON, default=list)
    memory = Column(JSON, default=dict)
    reminders = Column(JSON, default=list)
    registered = Column(DateTime, default=datetime.now)
    last_active = Column(DateTime, default=datetime.now)
    messages_count = Column(Integer, default=0)
    commands_count = Column(Integer, default=0)

class Chat(Base):
    __tablename__ = 'chats'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger)
    message = Column(Text)
    response = Column(Text)
    timestamp = Column(DateTime, default=datetime.now)

class Statistics(Base):
    __tablename__ = 'statistics'
    
    key = Column(String(50), primary_key=True)
    value = Column(JSON)
    updated_at = Column(DateTime, default=datetime.now)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
engine = None
Session = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, echo=False, pool_pre_ping=True)
        Base.metadata.create_all(engine)
        Session = sessionmaker(bind=engine)
        logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω!")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}. Fallback –Ω–∞ JSON.")
        engine = None
        Session = None
else:
    logger.warning("‚ö†Ô∏è –ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JSON.")

class DataStorage:
    # ... (–ö–ª–∞—Å—Å DataStorage –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    def __init__(self):
        self.users_file = 'users.json'
        self.stats_file = 'statistics.json'
        self.chat_sessions = {}
        self.username_to_id = {}
        
        if not engine:
            self.users = self.load_users()
            self.stats = self.load_stats()
            self.update_username_mapping()
        else:
            self.users = {}
            self.stats = self.get_stats_from_db()

    def load_users(self) -> Dict:
        try:
            if os.path.exists(self.users_file):
                with open(self.users_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if isinstance(data, list):
                        return {}
                    return {int(k): v for k, v in data.items()}
            return {}
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json: {e}")
            return {}

    def save_users(self):
        if engine:
            return
        try:
            with open(self.users_file, 'w', encoding='utf-8') as f:
                json.dump(self.users, f, ensure_ascii=False, indent=2)
            self.update_username_mapping()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json: {e}")

    def load_stats(self) -> Dict:
        try:
            if os.path.exists(self.stats_file):
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if isinstance(data, dict) and data:
                        return data
            return {'total_messages': 0, 'total_commands': 0, 'ai_requests': 0, 'start_date': datetime.now().isoformat()}
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ statistics.json: {e}")
            return {'total_messages': 0, 'total_commands': 0, 'ai_requests': 0, 'start_date': datetime.now().isoformat()}

    def save_stats(self):
        if engine:
            session = Session()
            try:
                session.merge(Statistics(key='global', value=self.stats, updated_at=datetime.now()))
                session.commit()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è stats –≤ –ë–î: {e}")
                session.rollback()
            finally:
                session.close()
        else:
            try:
                with open(self.stats_file, 'w', encoding='utf-8') as f:
                    json.dump(self.stats, f, ensure_ascii=False, indent=2)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è statistics.json: {e}")

    def get_stats_from_db(self) -> Dict:
        if not engine:
            return self.load_stats()
        session = Session()
        try:
            stat = session.query(Statistics).filter_by(key='global').first()
            if stat:
                return stat.value
            return {'total_messages': 0, 'total_commands': 0, 'ai_requests': 0, 'start_date': datetime.now().isoformat()}
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ stats –∏–∑ –ë–î: {e}")
            return self.load_stats()
        finally:
            session.close()

    def update_username_mapping(self):
        self.username_to_id = {}
        for user_id, user_data in self.users.items():
            username = user_data.get('username')
            if username:
                self.username_to_id[username.lower()] = user_id

    def get_user_id_by_identifier(self, identifier: str) -> Optional[int]:
        identifier = identifier.strip()
        if identifier.startswith('@'):
            identifier = identifier[1:]
        if identifier.isdigit():
            return int(identifier)
        if engine:
            session = Session()
            try:
                user = session.query(User).filter(User.username.ilike(f"%{identifier}%")).first()
                return user.id if user else None
            finally:
                session.close()
        return self.username_to_id.get(identifier.lower())

    def get_user(self, user_id: int) -> Dict:
        if engine:
            session = Session()
            try:
                user = session.query(User).filter_by(id=user_id).first()
                if not user:
                    user = User(id=user_id)
                    session.add(user)
                    session.commit()
                return {
                    'id': user.id,
                    'username': user.username or '',
                    'first_name': user.first_name or '',
                    'vip': user.vip,
                    'vip_until': user.vip_until.isoformat() if user.vip_until else None,
                    'notes': user.notes or [],
                    'todos': user.todos or [],
                    'memory': user.memory or {},
                    'reminders': user.reminders or [],
                    'registered': user.registered.isoformat() if user.registered else datetime.now().isoformat(),
                    'last_active': user.last_active.isoformat() if user.last_active else datetime.now().isoformat(),
                    'messages_count': user.messages_count or 0,
                    'commands_count': user.commands_count or 0
                }
            finally:
                session.close()
        else:
            if user_id not in self.users:
                self.users[user_id] = {
                    'id': user_id, 'username': '', 'first_name': '', 'vip': False, 'vip_until': None,
                    'notes': [], 'todos': [], 'memory': {}, 'reminders': [],
                    'registered': datetime.now().isoformat(), 'last_active': datetime.now().isoformat(),
                    'messages_count': 0, 'commands_count': 0
                }
                self.save_users()
            return self.users[user_id]

    def update_user(self, user_id: int, data: Dict):
        if engine:
            session = Session()
            try:
                user = session.query(User).filter_by(id=user_id).first()
                if not user:
                    user = User(id=user_id)
                    session.add(user)
                for key, value in data.items():
                    if key == 'vip_until' and value:
                        value = datetime.fromisoformat(value) if isinstance(value, str) else value
                    setattr(user, key, value)
                user.last_active = datetime.now()
                session.commit()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
                session.rollback()
            finally:
                session.close()
        else:
            user = self.get_user(user_id)
            user.update(data)
            user['last_active'] = datetime.now().isoformat()
            self.save_users()

    def is_vip(self, user_id: int) -> bool:
        user = self.get_user(user_id)
        if not user.get('vip', False):
            return False
        vip_until = user.get('vip_until')
        if vip_until is None:
            return True
        try:
            vip_until_dt = datetime.fromisoformat(vip_until)
            if datetime.now() > vip_until_dt:
                self.update_user(user_id, {'vip': False, 'vip_until': None})
                return False
            return True
        except:
            return True

    def get_all_users(self):
        if engine:
            session = Session()
            try:
                users = session.query(User).all()
                return {u.id: {'id': u.id, 'username': u.username, 'first_name': u.first_name, 'vip': u.vip} for u in users}
            finally:
                session.close()
        return self.users

    def save_chat(self, user_id: int, message: str, response: str):
        if not engine:
            return
        session = Session()
        try:
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –Ω–∞ –¥–ª–∏–Ω—É Text –≤ –ë–î
            chat = Chat(user_id=user_id, message=message[:2048], response=response[:2048])
            session.add(chat)
            session.commit()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        finally:
            session.close()

    def get_chat_session(self, user_id: int):
        if user_id not in self.chat_sessions:
            self.chat_sessions[user_id] = model.start_chat(history=[])
        return self.chat_sessions[user_id]

    def clear_chat_session(self, user_id: int):
        if user_id in self.chat_sessions:
            del self.chat_sessions[user_id]
# ... (–ö–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞ DataStorage) ...
storage = DataStorage()
scheduler = AsyncIOScheduler()

def identify_creator(user):
    global CREATOR_ID
    if user.username == CREATOR_USERNAME and CREATOR_ID is None:
        CREATOR_ID = user.id
        logger.info(f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {user.id}")

def is_creator(user_id: int) -> bool:
    return user_id == CREATOR_ID

# --- üì¢ –£—Ç–∏–ª–∏—Ç—ã Telegram (–†–∞–∑–±–∏–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π) ---

async def send_long_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str, parse_mode: ParseMode = ParseMode.HTML):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if len(text) <= MAX_TELEGRAM_MESSAGE_LENGTH:
        return await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode)

    parts = []
    current_part = ""
    # –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∞–±–∑–∞—Ü–∞–º
    paragraphs = text.split('\n\n')
    
    for para in paragraphs:
        if len(current_part) + len(para) + 2 < MAX_TELEGRAM_MESSAGE_LENGTH:
            if current_part:
                current_part += '\n\n' + para
            else:
                current_part = para
        else:
            if current_part:
                parts.append(current_part)
            current_part = para
            # –ï—Å–ª–∏ –¥–∞–∂–µ –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –µ–≥–æ —Ç–æ–∂–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å
            while len(current_part) > MAX_TELEGRAM_MESSAGE_LENGTH:
                # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞, –Ω–µ –æ–±—Ä—ã–≤–∞—è —Å–ª–æ–≤–æ
                split_point = current_part[:MAX_TELEGRAM_MESSAGE_LENGTH].rfind(' ')
                if split_point == -1: # –ù–µ –Ω–∞—à–ª–∏ –ø—Ä–æ–±–µ–ª, —Ä–µ–∂–µ–º –∂–µ—Å—Ç–∫–æ
                    split_point = MAX_TELEGRAM_MESSAGE_LENGTH
                parts.append(current_part[:split_point] + "...")
                current_part = "..." + current_part[split_point:].strip()

    if current_part:
        parts.append(current_part)

    for i, part in enumerate(parts):
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –∫ —á–∞—Å—Ç—è–º
        header = f"(–ß–∞—Å—Ç—å {i+1}/{len(parts)})\n" if len(parts) > 1 else ""
        await context.bot.send_message(chat_id=chat_id, text=header + part, parse_mode=parse_mode)
        await asyncio.sleep(0.1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ñ–ª—É–¥–∞

# --- üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–∞–π–ª–æ–≤ –∏ –ú–µ–¥–∏–∞ (Vision) ---

async def analyze_image_with_gemini(image_bytes: bytes, prompt: str = "–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ") -> str:
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Gemini 2.5 Flash (Vision)."""
    try:
        image = Image.open(io.BytesIO(image_bytes))
        # Vision-–º–æ–¥–µ–ª—å —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤ –Ω–∞—á–∞–ª–µ
        response = model.generate_content([prompt, image])
        return response.text
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

# ... (extract_text_from_document - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def extract_text_from_document(file_bytes: bytes, filename: str) -> str:
    try:
        ext = filename.lower().split('.')[-1]
        if ext == 'txt':
            try:
                return file_bytes.decode('utf-8')
            except:
                return file_bytes.decode('cp1251', errors='ignore')
        elif ext == 'pdf':
            doc = fitz.open(stream=io.BytesIO(file_bytes), filetype="pdf")
            text = "".join([page.get_text() for page in doc])
            doc.close()
            return text
        elif ext in ['doc', 'docx']:
            doc = docx.Document(io.BytesIO(file_bytes))
            return "\n".join([para.text for para in doc.paragraphs])
        else:
            return file_bytes.decode('utf-8', errors='ignore')
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    user_id = update.effective_user.id
    if not storage.is_vip(user_id):
        await update.message.reply_text(get_localized_text(user_id, 'not_vip'))
        return
    document = update.message.document
    file_name = document.file_name or "file"
    await update.message.reply_text(get_localized_text(user_id, 'voice_received').replace("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–§–∞–π–ª"))
    try:
        file_obj = await context.bot.get_file(document.file_id)
        file_bytes = await file_obj.download_as_bytearray()
        extracted_text = await extract_text_from_document(bytes(file_bytes), file_name)
        if extracted_text.startswith("‚ùå") or extracted_text.startswith("‚ö†Ô∏è"):
            await update.message.reply_text(extracted_text)
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_text_limit = extracted_text[:10000]
        
        analysis_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∞–π–ª '{file_name}'. –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞: {analysis_text_limit}"
        chat = storage.get_chat_session(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response_gemini = chat.send_message(analysis_prompt)
        response_text = response_gemini.text
        
        storage.save_chat(user_id, f"–§–∞–π–ª {file_name}", response_text)
        
        final_text = f"üìÑ <b>–§–∞–π–ª:</b> {file_name}\n\nü§ñ <b>–ê–Ω–∞–ª–∏–∑:</b>\n\n{response_text}"
        await send_long_message(context, user_id, final_text)

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text(f"‚ùå {get_localized_text(user_id, 'error')}: {str(e)}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    user_id = update.effective_user.id
    if not storage.is_vip(user_id):
        await update.message.reply_text(get_localized_text(user_id, 'not_vip'))
        return
    photo = update.message.photo[-1]
    caption = update.message.caption or get_localized_text(user_id, 'voice_transcribed').replace('–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è', '–û–ø–∏—à–∏ —á—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ').replace('<i>{text}</i>', '').strip()
    await update.message.reply_text(get_localized_text(user_id, 'voice_received').replace("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ").replace("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é", "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é"))
    try:
        file_obj = await context.bot.get_file(photo.file_id)
        file_bytes = await file_obj.download_as_bytearray()
        analysis = await analyze_image_with_gemini(bytes(file_bytes), caption)
        storage.save_chat(user_id, "–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ", analysis)
        
        final_text = f"üì∏ <b>–ê–Ω–∞–ª–∏–∑ (Gemini Vision):</b>\n\n{analysis}\n\nüíé VIP"
        await send_long_message(context, user_id, final_text)
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(f"‚ùå {get_localized_text(user_id, 'error')}: {str(e)}")

# --- üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ì–æ–ª–æ—Å–æ–≤—ã—Ö –°–æ–æ–±—â–µ–Ω–∏–π (Voice-to-Text) ---

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = get_user_lang(user_id)
    
    voice = update.message.voice or update.message.video_note
    if not voice:
        return
        
    temp_msg = await update.message.reply_text(get_localized_text(user_id, 'voice_received'))
    
    try:
        file_id = voice.file_id
        file_obj = await context.bot.get_file(file_id)
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
        file_bytes = await file_obj.download_as_bytearray()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Opus –≤ MP3/WAV, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è API (Gemini API –º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å Opus –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ MP3 –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª–µ–Ω)
        # –û–¥–Ω–∞–∫–æ, –¥–ª—è Gemini –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é.
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.
        
        audio_part = genai.types.Part.from_bytes(
            data=bytes(file_bytes),
            mime_type='audio/ogg' # Telegram –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Ogg Opus
        )

        # 1. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        transcribe_prompt = "Transcribe the following audio precisely. Do not add any extra information."
        
        # –î–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º–æ–¥–µ–ª—å, –Ω–æ —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ–º–ø—Ç–æ–º.
        response_transcribe = model.generate_content([transcribe_prompt, audio_part])
        transcribed_text = response_transcribe.text.strip()
        
        if not transcribed_text:
            await temp_msg.edit_text(get_localized_text(user_id, 'voice_error') + " (Empty transcription)")
            return

        # –£–¥–∞–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏/—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        await temp_msg.edit_text(get_localized_text(user_id, 'voice_transcribed', text=transcribed_text), parse_mode=ParseMode.HTML)
        
        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ AI
        await update.message.chat.send_action("typing")
        chat = storage.get_chat_session(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ai_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: '{transcribed_text}'. –û—Ç–≤–µ—Ç—å –µ–º—É."
        
        response_gemini = chat.send_message(ai_prompt)
        response_text = response_gemini.text
        
        storage.stats['ai_requests'] = storage.stats.get('ai_requests', 0) + 1
        storage.save_stats()
        storage.save_chat(user_id, transcribed_text, response_text)
        
        # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await send_long_message(context, user_id, response_text)
        
    except Exception as e:
        logger.error(f"Voice handling error: {e}")
        await context.bot.send_message(user_id, get_localized_text(user_id, 'voice_error'))

# --- ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ö–æ–º–∞–Ω–¥ –∏ –°–æ–æ–±—â–µ–Ω–∏–π ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    identify_creator(user)
    user_id = user.id
    user_data = storage.get_user(user_id)
    storage.update_user(user_id, {'username': user.username or '', 'first_name': user.first_name or '', 'commands_count': user_data.get('commands_count', 0) + 1})
    
    welcome_text = get_localized_text(user_id, 'welcome', name=user.first_name)
    welcome_text += f"""
<b>üéØ {get_localized_text(user_id, 'welcome', name='–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏').split()[1]}:</b>
üí¨ AI-—á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
üìù –ó–∞–º–µ—Ç–∫–∏ –∏ –∑–∞–¥–∞—á–∏
üåç –ü–æ–≥–æ–¥–∞ –∏ –≤—Ä–µ–º—è
üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
üìé –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ (VIP)
üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (VIP)
üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (VIP)

<b>‚ö° {get_localized_text(user_id, 'welcome', name='–ö–æ–º–∞–Ω–¥—ã').split()[1]}:</b>
/help - {get_localized_text(user_id, 'help').split()[1]}
/vip - VIP {get_localized_text(user_id, 'status').split()[1]}

<b>üë®‚Äçüíª {get_localized_text(user_id, 'welcome', name='–°–æ–∑–¥–∞—Ç–µ–ª—å').split()[1]}:</b> @{CREATOR_USERNAME}"""
    
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.HTML, reply_markup=get_main_keyboard(user_id))

# ... (–ø—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏) ...

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    identify_creator(update.effective_user)
    user_id = update.effective_user.id
    user_data = storage.get_user(user_id)
    storage.update_user(user_id, {'commands_count': user_data.get('commands_count', 0) + 1})
    is_admin = is_creator(user_id)
    
    await update.message.reply_text(
        get_localized_text(user_id, 'help_section_select'), # –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ LOCALE
        parse_mode=ParseMode.HTML,
        reply_markup=get_help_keyboard(is_admin)
    )

# ... (get_help_keyboard –∏ handle_help_callback - —Ç—Ä–µ–±—É—é—Ç –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ LOCALE, 
# –Ω–æ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∫–æ–¥–∞ –æ—Å—Ç–∞–≤–∏–º –∏—Ö –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç) ...
def get_help_keyboard(is_admin: bool = False) -> InlineKeyboardMarkup:
    # –û—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ä—É—Å—Å–∫–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–æ
    keyboard = [
        [InlineKeyboardButton("üè† –û—Å–Ω–æ–≤–Ω—ã–µ", callback_data="help_basic")],
        [InlineKeyboardButton("üí¨ AI", callback_data="help_ai")],
        [InlineKeyboardButton("üß† –ü–∞–º—è—Ç—å", callback_data="help_memory")],
        [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∏", callback_data="help_notes")],
        [InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data="help_todo")],
        [InlineKeyboardButton("üåç –£—Ç–∏–ª–∏—Ç—ã", callback_data="help_utils")],
        [InlineKeyboardButton("üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="help_games")],
        [InlineKeyboardButton("üíé VIP", callback_data="help_vip")]
    ]
    if is_admin:
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω", callback_data="help_admin")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="help_back")])
    return InlineKeyboardMarkup(keyboard)

async def handle_help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ä—É—Å—Å–∫–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–æ
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    is_admin = is_creator(user_id)

    sections = {
        "help_basic": ("üè† <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n...", get_help_keyboard(is_admin)),
        "help_ai": ("üí¨ <b>AI –∫–æ–º–∞–Ω–¥—ã:</b>\n\nü§ñ /ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI\n\nüßπ /clear - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞", get_help_keyboard(is_admin)),
        # ... (–ø—Ä–æ—á–∏–µ —Å–µ–∫—Ü–∏–∏ —Å–ø—Ä–∞–≤–∫–∏)
    }

    if data.startswith("help_"):
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø—Ä–∞–≤–∫–∏
        if data in sections:
            text, markup = sections[data]
            await query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=markup)
        elif data == "help_back":
             await query.edit_message_text("üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏:</b>\n\n...", parse_mode=ParseMode.HTML, reply_markup=get_help_keyboard(is_admin))
        else:
             await query.edit_message_text("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# --- üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–í—Ä–µ–º–µ–Ω–Ω–æ Pollinations) ---

async def generate_image_pollinations(prompt: str) -> Optional[str]:
    # –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: Pollinations AI
    try:
        encoded_prompt = urlquote(prompt)
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Pollinations
        return f"https://image.pollinations.ai/prompt/photorealistic,detailed,{encoded_prompt}?width=1024&height=1024&nologo=true"
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None
        
async def generate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not storage.is_vip(user_id):
        await update.message.reply_text(get_localized_text(user_id, 'not_vip'))
        return
    if not context.args:
        await update.message.reply_text("‚ùì /generate [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n–ü—Ä–∏–º–µ—Ä: /generate –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º")
        return
    prompt = ' '.join(context.args)
    await update.message.reply_text(get_localized_text(user_id, 'generate_start').replace('<b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è (VIP)</b>', 'üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é...'))
    try:
        # –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ Google Imagen 3.0 API –∏–ª–∏ Stable Diffusion 3 API
        image_url = await generate_image_pollinations(prompt)
        if image_url:
            await update.message.reply_photo(photo=image_url, caption=f"üñºÔ∏è <b>{prompt}</b>\n\nüíé VIP | Pollinations AI (Temporary)", parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_text(f"‚ùå {get_localized_text(user_id, 'error')}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(f"‚ùå {get_localized_text(user_id, 'error')}: {str(e)}")

# --- ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ AI –∏ Context ---

async def process_ai_message(update: Update, text: str, user_id: int):
    try:
        await update.message.chat.send_action("typing")
        chat = storage.get_chat_session(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response_gemini = chat.send_message(text)
        response_text = response_gemini.text
        
        storage.stats['ai_requests'] = storage.stats.get('ai_requests', 0) + 1
        storage.save_stats()
        storage.save_chat(user_id, text, response_text)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await send_long_message(context, user_id, response_text)

    except Exception as e:
        logger.error(f"AI error: {e}")
        await update.message.reply_text(get_localized_text(user_id, 'error'))

async def ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text(get_localized_text(user_id, 'command_not_found').replace('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', '/ai [–≤–æ–ø—Ä–æ—Å]'))
        return
    await process_ai_message(update, ' '.join(context.args), user_id)

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    storage.clear_chat_session(update.effective_user.id)
    await update.message.reply_text("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω!")


# --- üîë –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ì–ª–∞–≤–Ω–æ–π –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ) ---

def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    ai_chat = get_localized_text(user_id, 'btn_ai_chat')
    notes = get_localized_text(user_id, 'btn_notes')
    weather = get_localized_text(user_id, 'btn_weather')
    time = get_localized_text(user_id, 'btn_time')
    games = get_localized_text(user_id, 'btn_games')
    info = get_localized_text(user_id, 'btn_info')
    vip_menu = get_localized_text(user_id, 'btn_vip_menu')
    generate = get_localized_text(user_id, 'btn_generate')
    admin_panel = get_localized_text(user_id, 'btn_admin_panel')
    
    keyboard = [
        [KeyboardButton(ai_chat), KeyboardButton(notes)],
        [KeyboardButton(weather), KeyboardButton(time)],
        [KeyboardButton(games), KeyboardButton(info)]
    ]
    
    if storage.is_vip(user_id):
        keyboard.append([KeyboardButton(vip_menu), KeyboardButton(generate)])
    if is_creator(user_id):
        keyboard.append([KeyboardButton(admin_panel)])
        
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def handle_menu_button(update: Update, context: ContextTypes.DEFAULT_TYPE, button_text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ ReplyKeyboardMarkup."""
    user_id = update.effective_user.id
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    
    if button_text == get_localized_text(user_id, 'btn_ai_chat'):
        await update.message.reply_text(get_localized_text(user_id, 'chat_start'), parse_mode=ParseMode.HTML)
    
    elif button_text == get_localized_text(user_id, 'btn_notes'):
        # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ó–∞–º–µ—Ç–∫–∏" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Inline-–º–µ–Ω—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        keyboard = [[InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="note_create")], [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data="note_list")]]
        await update.message.reply_text(get_localized_text(user_id, 'notes_menu'), parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))
        
    elif button_text == get_localized_text(user_id, 'btn_weather'):
        await update.message.reply_text(get_localized_text(user_id, 'weather_start'), parse_mode=ParseMode.HTML)
        
    elif button_text == get_localized_text(user_id, 'btn_time'):
        await update.message.reply_text(get_localized_text(user_id, 'time_start'), parse_mode=ParseMode.HTML)
        
    elif button_text == get_localized_text(user_id, 'btn_games'):
        # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Inline-–º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üé≤ –ö—É–±–∏–∫", callback_data="game_dice"), InlineKeyboardButton("ü™ô –ú–æ–Ω–µ—Ç–∞", callback_data="game_coin")],
                    [InlineKeyboardButton("üòÑ –®—É—Ç–∫–∞", callback_data="game_joke"), InlineKeyboardButton("üí≠ –¶–∏—Ç–∞—Ç–∞", callback_data="game_quote")],
                    [InlineKeyboardButton("üî¨ –§–∞–∫—Ç", callback_data="game_fact")]]
        await update.message.reply_text(get_localized_text(user_id, 'games_menu'), parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))
        
    elif button_text == get_localized_text(user_id, 'btn_info'):
        await info_command(update, context) # –í—ã–∑–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
        
    elif button_text == get_localized_text(user_id, 'btn_vip_menu'):
        if storage.is_vip(user_id):
            keyboard = [[InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="vip_reminders")], [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="vip_stats")]]
            await update.message.reply_text(get_localized_text(user_id, 'vip_menu'), parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await vip_command(update, context) # –í—ã–∑–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
            
    elif button_text == get_localized_text(user_id, 'btn_generate'):
        if storage.is_vip(user_id):
            await update.message.reply_text(get_localized_text(user_id, 'generate_start'), parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_text(get_localized_text(user_id, 'not_vip'))
            
    elif button_text == get_localized_text(user_id, 'btn_admin_panel'):
        if is_creator(user_id):
            keyboard = [[InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")], [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")], [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")]]
            await update.message.reply_text(get_localized_text(user_id, 'admin_panel'), parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.message.reply_text(get_localized_text(user_id, 'only_creator'))
            
    else:
        # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ —Ç–µ–∫—Å—Ç –≤ AI-—á–∞—Ç
        await process_ai_message(update, button_text, user_id)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    identify_creator(update.effective_user)
    user_id = update.effective_user.id
    chat_type = update.message.chat.type
    text = update.message.text
    
    user = storage.get_user(user_id)
    storage.update_user(user_id, {'messages_count': user.get('messages_count', 0) + 1, 'username': update.effective_user.username or '', 'first_name': update.effective_user.first_name or ''})
    storage.stats['total_messages'] = storage.stats.get('total_messages', 0) + 1
    storage.save_stats()
    
    if not text:
        return
        
    # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ReplyKeyboardMarkup
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text in [get_localized_text(user_id, key) for key in LOCALE[get_user_lang(user_id)] if key.startswith('btn_')]:
        await handle_menu_button(update, context, text)
        return

    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ (/–∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ /alias)
    is_command = text.startswith('/')
    
    if is_command:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        parts = text.split(' ', 1)
        raw_command = parts[0].split('@')[0].strip('/')
        args = parts[1].split() if len(parts) > 1 else []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∞–ª–∏–∞—Å
        internal_command_name = next((name for name, aliases in COMMAND_ALIASES.items() if raw_command.lower() in aliases), None)
        
        if internal_command_name:
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥–ª–∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            context.args = args
            
            # –í—ã–∑–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –∏–º–µ–Ω–∏
            if internal_command_name == 'ai': await ai_command(update, context)
            elif internal_command_name == 'help': await help_command(update, context)
            elif internal_command_name == 'weather': await weather_command(update, context)
            elif internal_command_name == 'time': await time_command(update, context)
            elif internal_command_name == 'note': await note_command(update, context)
            elif internal_command_name == 'notes': await notes_command(update, context)
            elif internal_command_name == 'delnote': await delnote_command(update, context)
            elif internal_command_name == 'todo': await todo_command(update, context)
            elif internal_command_name == 'translate': await translate_command(update, context)
            elif internal_command_name == 'generate': await generate_command(update, context)
            elif internal_command_name == 'vip': await vip_command(update, context)
            # ... –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞
            return
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–ª–∏–∞—Å–∞—Ö, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ AI-—á–∞—Ç—É

    # 3. AI –ß–∞—Ç
    # –í –≥—Ä—É–ø–ø–∞—Ö —Ç–æ–ª—å–∫–æ –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é
    if chat_type in ['group', 'supergroup']:
        bot_username = context.bot.username
        if f"@{bot_username}" not in text:
            return
        text = text.replace(f"@{bot_username}", "").strip()
    
    # AI –æ—Ç–≤–µ—Ç
    await process_ai_message(update, text, user_id)

# --- üöÄ –ì–ª–∞–≤–Ω–∞—è –§—É–Ω–∫—Ü–∏—è –∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ (–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–∏–∞—Å–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ handle_message.
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("profile", profile_command))
    application.add_handler(CommandHandler("uptime", uptime_command))
    
    application.add_handler(CommandHandler("ai", ai_command))
    application.add_handler(CommandHandler("clear", clear_command))
    
    application.add_handler(CommandHandler("memorysave", memory_save_command))
    application.add_handler(CommandHandler("memoryget", memory_get_command))
    application.add_handler(CommandHandler("memorylist", memory_list_command))
    application.add_handler(CommandHandler("memorydel", memory_del_command))
    
    application.add_handler(CommandHandler("note", note_command))
    application.add_handler(CommandHandler("notes", notes_command))
    application.add_handler(CommandHandler("delnote", delnote_command))
    
    application.add_handler(CommandHandler("todo", todo_command))
    
    application.add_handler(CommandHandler("time", time_command))
    application.add_handler(CommandHandler("weather", weather_command))
    application.add_handler(CommandHandler("translate", translate_command))
    application.add_handler(CommandHandler("calc", calc_command))
    application.add_handler(CommandHandler("password", password_command))
    
    application.add_handler(CommandHandler("random", random_command))
    application.add_handler(CommandHandler("dice", dice_command))
    application.add_handler(CommandHandler("coin", coin_command))
    application.add_handler(CommandHandler("joke", joke_command))
    application.add_handler(CommandHandler("quote", quote_command))
    application.add_handler(CommandHandler("fact", fact_command))
    
    application.add_handler(CommandHandler("vip", vip_command))
    application.add_handler(CommandHandler("remind", remind_command))
    application.add_handler(CommandHandler("reminders", reminders_command))
    application.add_handler(CommandHandler("generate", generate_command))
    
    application.add_handler(CommandHandler("grant_vip", grant_vip_command))
    application.add_handler(CommandHandler("revoke_vip", revoke_vip_command))
    application.add_handler(CommandHandler("users", users_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("backup", backup_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.VOICE | filters.VIDEO_NOTE, handle_voice)) # –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ì–û–õ–û–°–û–í–´–•
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ó–∞–ø—É—Å–∫ scheduler
    scheduler.start()
    
    logger.info("=" * 50)
    logger.info("‚úÖ AI DISCO BOT –ó–ê–ü–£–©–ï–ù!")
    logger.info("ü§ñ –ú–æ–¥–µ–ª—å: Gemini 2.5 Flash")
    logger.info("üóÑÔ∏è –ë–î: " + ("PostgreSQL ‚úì" if engine else "Local JSON"))
    logger.info("üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: Pollinations AI (Temporary)")
    logger.info("üîç –ê–Ω–∞–ª–∏–∑/Voice-to-Text: Gemini Vision/Audio")
    logger.info("=" * 50)
    
    # Graceful shutdown
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    # ... (—Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—é–¥–∞, 
    # –Ω–æ –≤ –¥–∞–Ω–Ω–æ–º –æ—Ç–≤–µ—Ç–µ —è –∏—Ö –æ–ø—É—Å—Ç–∏–ª –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏. –í —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å!)
    # (uptime_command, vip_command, note_command, time_command, weather_command,
    # translate_command, calc_command, password_command, –∏ —Ç.–¥.)
    
    # –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ–ª–Ω—ã–π –∫–æ–¥.
    # –Ø –∏—Å–ø—Ä–∞–≤–∏–ª —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –∫–∞—Å–∞–ª–∏—Å—å AI, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö.
    
    # –í–ê–ñ–ù–û: –§—É–Ω–∫—Ü–∏–∏ `uptime_command`, `vip_command`, `note_command`, `time_command`, `weather_command`,
    # `translate_command`, `calc_command`, `password_command` –∏ —Ç.–¥. –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã
    # –≤ —Ç–µ–ª–æ –∫–æ–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–ª–∞. 
    # (–Ø –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –æ–Ω–∏ –±—ã–ª–∏ –≤ –≤–∞—à–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
    
    # –Ø –ø–æ–∫–∞–∑–∞–ª —Ç–æ–ª—å–∫–æ —Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–±–ª–µ–º.
    # –í –º–æ–µ–º –æ—Ç–≤–µ—Ç–µ –Ω–∏–∂–µ —è –≤–∫–ª—é—á–∞—é –ø–æ–ª–Ω—ã–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å.
    main()
