#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
AI DISCO BOT v3.5 by @Ernest_Kostevich
-------------------------------------
–ü–æ–ª–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Render.
–£–ª—É—á—à–µ–Ω–∏—è:
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (VIP, –ê–¥–º–∏–Ω, –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é).
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (–†—É—Å—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π).
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini.
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Pollinations.ai (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç).
- –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ gemini-1.5-flash-latest.
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ò–ò.
"""

# ==============================================================================
# requirements.txt –î–õ–Ø RENDER
# ==============================================================================
# python-telegram-bot
# google-generativeai
# sqlalchemy
# psycopg2-binary
# pytz
# aiohttp
# httpx
# PyMuPDF
# python-docx
# Pillow
# APScheduler
# ==============================================================================

import os
import json
import logging
import random
import asyncio
import signal
import io
from datetime import datetime, timedelta
from typing import Dict, Optional, Any
from urllib.parse import quote as urlquote

# --- –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
import pytz
import requests
import aiohttp
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, User as TelegramUser
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode, ChatAction
import google.generativeai as genai
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from PIL import Image
import fitz  # PyMuPDF
import docx  # python-docx
from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime, JSON, Text, BigInteger
from sqlalchemy.orm import sessionmaker, declarative_base

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
DATABASE_URL = os.getenv('DATABASE_URL')
CREATOR_USERNAME = "Ernest_Kostevich"
CREATOR_ID = None # –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
BOT_START_TIME = datetime.now()

if not BOT_TOKEN or not GEMINI_API_KEY:
    logger.error("‚ùå BOT_TOKEN –∏–ª–∏ GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini 1.5 Flash ---
genai.configure(api_key=GEMINI_API_KEY)
generation_config = {
    "temperature": 1.0,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}
safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]
model = genai.GenerativeModel(
    model_name="gemini-1.5-flash-latest",
    safety_settings=safety_settings,
    generation_config=generation_config,
    system_instruction=(
        "You are AI DISCO BOT, a friendly, witty, and helpful AI assistant powered by Gemini 1.5 Flash. "
        "Your creator is @Ernest_Kostevich. "
        "Always respond in the user's language. Be engaging, use emojis appropriately to make the conversation lively."
    )
)

# --- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (i18n) ---
LOCALIZATION = {
    "en": {
        "welcome": "ü§ñ <b>AI DISCO BOT</b>\n\nHi, {first_name}! I'm a bot powered by <b>Gemini 1.5 Flash</b>.",
        "features": "<b>üéØ Features:</b>\n\nüí¨ AI Chat\nüìù Notes & Todos\nüé§ Voice Messages\nüåç Utilities (Weather, Time)\nüé≤ Fun\nüíé VIP: Image Gen, File Analysis & Reminders",
        "commands": "<b>‚ö°Ô∏è Commands:</b>\n/help - All commands\n/vip - VIP Status\n/language - Change language",
        "creator": "<b>üë®‚Äçüíª Creator:</b> @{creator}",
        "lang_suggestion": "It seems your language is English. Would you like to switch?",
        "lang_changed": "‚úÖ Language has been set to English.",
        "lang_choose": "Please choose your language:",
        # --- –ö–Ω–æ–ø–∫–∏ ---
        "btn_ai_chat": "üí¨ AI Chat", "btn_notes": "üìù Notes", "btn_weather": "üåç Weather", "btn_time": "‚è∞ Time",
        "btn_games": "üé≤ Fun", "btn_info": "‚ÑπÔ∏è Info", "btn_vip": "üíé VIP Menu", "btn_generate": "üñºÔ∏è Generate", "btn_admin": "üëë Admin Panel",
        # --- –û—Ç–≤–µ—Ç—ã –∫–æ–º–∞–Ω–¥ ---
        "ai_prompt": "ü§ñ How can I help you? Just type your message!\n/clear - to clear chat history",
        "weather_prompt": "üåç <b>Weather</b>\n\n/weather [city]\nExample: /weather London",
        "time_prompt": "‚è∞ <b>Time</b>\n\n/time [city]\nExample: /time Tokyo",
        "vip_only_feature": "üíé This feature is for VIP users only.\n\nContact @{creator} to get access.",
        "prompt_generate": "üñºÔ∏è <b>Image Generation (VIP)</b>\n\n/generate [description]\n\nExamples:\n‚Ä¢ /generate a red cat in space\n‚Ä¢ /generate cyberpunk city",
        "admin_panel_welcome": "üëë Welcome to the Admin Panel, Creator!",
    },
    "ru": {
        "welcome": "ü§ñ <b>AI DISCO BOT</b>\n\n–ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ <b>Gemini 1.5 Flash</b>.",
        "features": "<b>üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n\nüí¨ AI-—á–∞—Ç\nüìù –ó–∞–º–µ—Ç–∫–∏ –∏ –ó–∞–¥–∞—á–∏\nüé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\nüåç –£—Ç–∏–ª–∏—Ç—ã (–ü–æ–≥–æ–¥–∞, –í—Ä–µ–º—è)\nüé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\nüíé VIP: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è, –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –∏ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        "commands": "<b>‚ö°Ô∏è –ö–æ–º–∞–Ω–¥—ã:</b>\n/help - –í—Å–µ –∫–æ–º–∞–Ω–¥—ã\n/vip - –°—Ç–∞—Ç—É—Å VIP\n/language - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "creator": "<b>üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å:</b> @{creator}",
        "lang_changed": "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
        "lang_choose": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        # --- –ö–Ω–æ–ø–∫–∏ ---
        "btn_ai_chat": "üí¨ AI –ß–∞—Ç", "btn_notes": "üìù –ó–∞–º–µ—Ç–∫–∏", "btn_weather": "üåç –ü–æ–≥–æ–¥–∞", "btn_time": "‚è∞ –í—Ä–µ–º—è",
        "btn_games": "üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "btn_info": "‚ÑπÔ∏è –ò–Ω—Ñ–æ", "btn_vip": "üíé VIP –ú–µ–Ω—é", "btn_generate": "üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", "btn_admin": "üëë –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å",
        # --- –û—Ç–≤–µ—Ç—ã –∫–æ–º–∞–Ω–¥ ---
        "ai_prompt": "ü§ñ –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n/clear - —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞",
        "weather_prompt": "üåç <b>–ü–æ–≥–æ–¥–∞</b>\n\n/weather [–≥–æ—Ä–æ–¥]\n–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞",
        "time_prompt": "‚è∞ <b>–í—Ä–µ–º—è</b>\n\n/time [–≥–æ—Ä–æ–¥]\n–ü—Ä–∏–º–µ—Ä: /time –¢–æ–∫–∏–æ",
        "vip_only_feature": "üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @{creator} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
        "prompt_generate": "üñºÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è (VIP)</b>\n\n/generate [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ /generate –∑–∞–∫–∞—Ç\n‚Ä¢ /generate –≥–æ—Ä–æ–¥",
        "admin_panel_welcome": "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, –°–æ–∑–¥–∞—Ç–µ–ª—å!",
    }
}
def get_text(key: str, lang: str = 'ru') -> str:
    lang = 'en' if lang not in LOCALIZATION else lang
    return LOCALIZATION[lang].get(key, f"<{key}>")

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLAlchemy) ---
Base = declarative_base()
class User(Base):
    __tablename__ = 'users'
    id = Column(BigInteger, primary_key=True, autoincrement=False)
    username = Column(String(255), nullable=True)
    first_name = Column(String(255), nullable=True)
    language_code = Column(String(10), default='ru')
    vip = Column(Boolean, default=False)
    vip_until = Column(DateTime, nullable=True)
    notes = Column(JSON, default=list)
    todos = Column(JSON, default=list)
    memory = Column(JSON, default=dict)
    reminders = Column(JSON, default=list)
    registered = Column(DateTime, default=datetime.now)
    last_active = Column(DateTime, default=datetime.now, onupdate=datetime.now)
    messages_count = Column(Integer, default=0)
    commands_count = Column(Integer, default=0)
class Chat(Base):
    __tablename__ = 'chats'
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger)
    message = Column(Text)
    response = Column(Text)
    timestamp = Column(DateTime, default=datetime.now)
engine = None
Session = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True)
        Base.metadata.create_all(engine)
        Session = sessionmaker(bind=engine)
        logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω!")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}.")
        engine = None
else:
    logger.warning("‚ö†Ô∏è DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∞. –î–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ ---
class DataStorage:
    def __init__(self):
        self.chat_sessions: Dict[int, Any] = {}
    def _get_db_session(self):
        if not Session: return None
        return Session()
    def get_or_create_user(self, tg_user: TelegramUser) -> Dict:
        session = self._get_db_session()
        if not session:
            return {'id': tg_user.id, 'username': tg_user.username, 'first_name': tg_user.first_name,
                    'language_code': (tg_user.language_code or 'ru').split('-')[0], 'vip': False}
        try:
            user = session.query(User).filter_by(id=tg_user.id).first()
            if not user:
                user = User(
                    id=tg_user.id, username=tg_user.username, first_name=tg_user.first_name,
                    language_code=(tg_user.language_code or 'ru').split('-')[0]
                )
                session.add(user)
                session.commit()
                logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {tg_user.id}")
            return {c.name: getattr(user, c.name) for c in user.__table__.columns}
        finally:
            session.close()
    def update_user(self, user_id: int, data: Dict):
        session = self._get_db_session()
        if not session: return
        try:
            session.query(User).filter_by(id=user_id).update(data)
            session.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è User {user_id}: {e}")
            session.rollback()
        finally:
            session.close()
    def is_vip(self, user_id: int) -> bool:
        session = self._get_db_session()
        if not session: return False
        try:
            user = session.query(User).filter_by(id=user_id).first()
            if not user or not user.vip: return False
            if user.vip_until and datetime.now() > user.vip_until:
                user.vip = False
                user.vip_until = None
                session.commit()
                return False
            return True
        finally:
            session.close()
    def get_all_users(self) -> Dict:
        session = self._get_db_session()
        if not session: return {}
        try:
            users = session.query(User).all()
            return {u.id: {'id': u.id, 'vip': u.vip} for u in users}
        finally:
            session.close()
    def get_user_id_by_identifier(self, identifier: str) -> Optional[int]:
        identifier = identifier.strip().lstrip('@')
        if identifier.isdigit():
            return int(identifier)
        session = self._get_db_session()
        if not session: return None
        try:
            user = session.query(User).filter(User.username.ilike(identifier)).first()
            return user.id if user else None
        finally:
            session.close()
    def get_chat_session(self, user_id: int):
        if user_id not in self.chat_sessions:
            self.chat_sessions[user_id] = model.start_chat(history=[])
        return self.chat_sessions[user_id]
    def clear_chat_session(self, user_id: int):
        if user_id in self.chat_sessions:
            del self.chat_sessions[user_id]

storage = DataStorage()
scheduler = AsyncIOScheduler()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def identify_creator(user: TelegramUser):
    global CREATOR_ID
    if user.username == CREATOR_USERNAME and CREATOR_ID is None:
        CREATOR_ID = user.id
        logger.info(f"‚úÖ –°–æ–∑–¥–∞—Ç–µ–ª—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {user.id} (@{user.username})")
def is_creator(user_id: int) -> bool: return user_id == CREATOR_ID

def get_main_keyboard(user_id: int, lang: str) -> ReplyKeyboardMarkup:
    keys = get_text
    keyboard = [
        [KeyboardButton(keys("btn_ai_chat", lang)), KeyboardButton(keys("btn_notes", lang))],
        [KeyboardButton(keys("btn_weather", lang)), KeyboardButton(keys("btn_time", lang))],
        [KeyboardButton(keys("btn_games", lang)), KeyboardButton(keys("btn_info", lang))]
    ]
    if storage.is_vip(user_id):
        keyboard.append([KeyboardButton(keys("btn_vip", lang)), KeyboardButton(keys("btn_generate", lang))])
    if is_creator(user_id):
        keyboard.append([KeyboardButton(keys("btn_admin", lang))])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
async def send_long_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str):
    MAX_LENGTH = 4096
    if len(text) <= MAX_LENGTH:
        await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)
        return
    parts = [text[i:i + MAX_LENGTH] for i in range(0, len(text), MAX_LENGTH)]
    for part in parts:
        await context.bot.send_message(chat_id=chat_id, text=part, parse_mode=ParseMode.HTML)
        await asyncio.sleep(0.3)

# --- –ò–ò –§—É–Ω–∫—Ü–∏–∏ ---
async def process_ai_message(update: Update, text: str, user_id: int):
    context = ContextTypes.DEFAULT_TYPE(application=update.get_app(), chat_data={}, user_data={})
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        chat_session = storage.get_chat_session(user_id)
        response = await chat_session.send_message_async(text)
        await send_long_message(context, update.effective_chat.id, response.text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_ai_message: {e}")
        await update.message.reply_text("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
async def generate_image(prompt: str) -> Optional[bytes]:
    try:
        async with httpx.AsyncClient() as client:
            api_url = f"https://image.pollinations.ai/prompt/{urlquote(prompt)}?width=1024&height=1024&nologo=true"
            response = await client.get(api_url, timeout=90.0)
            response.raise_for_status()
            return response.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None
async def analyze_image_with_gemini(image_bytes: bytes, prompt: str) -> str:
    try:
        image_part = {"mime_type": "image/jpeg", "data": image_bytes}
        response = await model.generate_content_async([prompt, image_part])
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"
async def extract_text_from_document(file_bytes: bytes, filename: str) -> str:
    ext = filename.lower().split('.')[-1]
    text = ""
    try:
        if ext == 'txt': text = file_bytes.decode('utf-8', errors='ignore')
        elif ext == 'pdf':
            with fitz.open(stream=file_bytes, filetype="pdf") as doc:
                text = "".join(page.get_text() for page in doc)
        elif ext == 'docx':
            doc = docx.Document(io.BytesIO(file_bytes))
            text = "\n".join([para.text for para in doc.paragraphs])
        else:
            return "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: txt, pdf, docx."
        return text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}"
        
# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user = update.effective_user
    identify_creator(tg_user)
    user = storage.get_or_create_user(tg_user)
    lang = user.get('language_code', 'ru')
    welcome_msg = f"{get_text('welcome', lang).format(first_name=tg_user.first_name)}\n\n{get_text('features', lang)}\n\n{get_text('commands', lang)}\n\n{get_text('creator', lang).format(creator=CREATOR_USERNAME)}"
    if lang != 'ru' and 'en' in (tg_user.language_code or ''):
         keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("Switch to English", callback_data="set_lang_en")]])
         await update.message.reply_text(get_text('lang_suggestion', 'en'), reply_markup=keyboard)
    await update.message.reply_text(welcome_msg, parse_mode=ParseMode.HTML, reply_markup=get_main_keyboard(tg_user.id, lang))
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ö–æ–º–∞–Ω–¥–∞ /help, —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω –∏ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω
    text = """
    *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
    /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
    /language - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
    /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    /vip - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP —Å—Ç–∞—Ç—É—Å–µ
    
    *–£—Ç–∏–ª–∏—Ç—ã:*
    /weather [–≥–æ—Ä–æ–¥] - –ü–æ–≥–æ–¥–∞
    /time [–≥–æ—Ä–æ–¥] - –í—Ä–µ–º—è
    /note [—Ç–µ–∫—Å—Ç] - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
    /notes - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏
    /delnote [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É

    *VIP –ö–æ–º–∞–Ω–¥—ã:*
    /generate [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    /remind [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
    """
    await update.message.reply_text(text, parse_mode="Markdown")
async def language_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üá¨üáß English", callback_data="set_lang_en")],
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")],
    ])
    await update.message.reply_text("Please choose your language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)
async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    storage.clear_chat_session(update.effective_user.id)
    await update.message.reply_text("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω!")
async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info_text = f"ü§ñ <b>AI DISCO BOT v3.5</b>\n\n<b>AI –ú–æ–¥–µ–ª—å:</b> Gemini 1.5 Flash\n<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> @{CREATOR_USERNAME}"
    await update.message.reply_text(info_text, parse_mode=ParseMode.HTML)
async def generate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_lang = storage.get_or_create_user(update.effective_user).get('language_code', 'ru')
    if not storage.is_vip(user_id):
        await update.message.reply_text(get_text("vip_only_feature", user_lang).format(creator=CREATOR_USERNAME), parse_mode=ParseMode.HTML)
        return
    if not context.args:
        await update.message.reply_text("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: `/generate —Ä—ã–∂–∏–π –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ`")
        return
    prompt = ' '.join(context.args)
    msg = await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1.5 –º–∏–Ω—É—Ç.")
    image_bytes = await generate_image(prompt)
    if image_bytes:
        await context.bot.send_photo(update.effective_chat.id, photo=image_bytes, caption=f"üñºÔ∏è –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É: <i>{prompt}</i>", parse_mode=ParseMode.HTML)
        await msg.delete()
    else:
        await msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
# (–î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: note, delnote, weather, time, vip, –∏ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
async def grant_vip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_creator(update.effective_user.id): return
    if len(context.args) < 2:
        await update.message.reply_text("‚ùì /grant_vip [id/@username] [—Å—Ä–æ–∫]\n\n–°—Ä–æ–∫–∏: week, month, year, forever")
        return
    identifier, duration_str = context.args[0], context.args[1].lower()
    target_id = storage.get_user_id_by_identifier(identifier)
    if not target_id:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    duration_map = {'week': 7, 'month': 30, 'year': 365}
    vip_until = None
    if duration_str in duration_map:
        vip_until = datetime.now() + timedelta(days=duration_map[duration_str])
    elif duration_str != 'forever':
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ä–æ–∫. –î–æ—Å—Ç—É–ø–Ω–æ: week, month, year, forever.")
        return

    storage.update_user(target_id, {'vip': True, 'vip_until': vip_until})
    duration_text = "–Ω–∞–≤—Å–µ–≥–¥–∞" if not vip_until else f"–¥–æ {vip_until.strftime('%d.%m.%Y')}"
    await update.message.reply_text(f"‚úÖ VIP –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} {duration_text}.")
    try:
        await context.bot.send_message(target_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–¥–∞–Ω VIP-—Å—Ç–∞—Ç—É—Å {duration_text}.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –æ VIP: {e}")

async def revoke_vip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_creator(update.effective_user.id): return
    if not context.args:
        await update.message.reply_text("‚ùì /revoke_vip [id/@username]")
        return
    target_id = storage.get_user_id_by_identifier(context.args[0])
    if not target_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    storage.update_user(target_id, {'vip': False, 'vip_until': None})
    await update.message.reply_text(f"‚úÖ VIP —Å—Ç–∞—Ç—É—Å –æ—Ç–æ–∑–≤–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}.")

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_creator(update.effective_user.id): return
    if not context.args:
        await update.message.reply_text("‚ùì /broadcast [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]")
        return
    text = ' '.join(context.args)
    all_users = storage.get_all_users()
    sent, failed = 0, 0
    await update.message.reply_text(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    for user_id in all_users.keys():
        try:
            await context.bot.send_message(user_id, text, parse_mode=ParseMode.HTML)
            sent += 1
            await asyncio.sleep(0.1) # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
        except Exception as e:
            failed += 1
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —é–∑–µ—Ä—É {user_id}: {e}")
    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—Å–ø–µ—à–Ω–æ: {sent}\n–û—à–∏–±–∫–∏: {failed}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user = update.effective_user
    identify_creator(tg_user)
    user = storage.get_or_create_user(tg_user)
    storage.update_user(user['id'], {'messages_count': user.get('messages_count', 0) + 1, 'username': tg_user.username, 'first_name': tg_user.first_name})
    
    text = update.message.text
    if not text: return
    lang = user.get('language_code', 'ru')
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ö–õ–ê–í–ò–ê–¢–£–†–´
    button_map = {
        get_text("btn_ai_chat", lang): (lambda: update.message.reply_text(get_text("ai_prompt", lang), parse_mode=ParseMode.HTML)),
        # get_text("btn_notes", lang): (lambda: notes_command(update, context)), # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        get_text("btn_weather", lang): (lambda: update.message.reply_text(get_text("weather_prompt", lang), parse_mode=ParseMode.HTML)),
        get_text("btn_time", lang): (lambda: update.message.reply_text(get_text("time_prompt", lang), parse_mode=ParseMode.HTML)),
        # get_text("btn_games", lang): (lambda: games_command(update, context)),
        get_text("btn_info", lang): (lambda: info_command(update, context)),
        # get_text("btn_vip", lang): (lambda: vip_command(update, context)),
        get_text("btn_generate", lang): (lambda: update.message.reply_text(get_text("prompt_generate", lang), parse_mode=ParseMode.HTML)),
        get_text("btn_admin", lang): (lambda: update.message.reply_text(get_text("admin_panel_welcome", lang)) if is_creator(user['id']) else None),
    }

    if text in button_map and button_map[text] is not None:
        await button_map[text]()
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò
    await process_ai_message(update, text, user['id'])

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    try:
        voice_file = await context.bot.get_file(update.message.voice.file_id)
        voice_bytes = await voice_file.download_as_bytearray()
        audio_part = {"mime_type": "audio/ogg", "data": voice_bytes}
        response = await model.generate_content_async(["–†–∞—Å–ø–æ–∑–Ω–∞–π —ç—Ç—É —Ä–µ—á—å –∏ –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.", audio_part])
        transcribed_text = response.text.strip()
        if not transcribed_text:
            await update.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
            return
        await update.message.reply_text(f"üí¨ –í—ã —Å–∫–∞–∑–∞–ª–∏: <i>¬´{transcribed_text}¬ª</i>\n\nü§ñ –û—Ç–≤–µ—á–∞—é...", parse_mode=ParseMode.HTML)
        await process_ai_message(update, transcribed_text, update.effective_user.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
async def handle_document_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = storage.get_or_create_user(update.effective_user)
    lang = user.get('language_code', 'ru')
    if not storage.is_vip(user['id']):
        await update.message.reply_text(get_text("vip_only_feature", lang).format(creator=CREATOR_USERNAME))
        return

    file_bytes, file_name, caption = None, None, update.message.caption or "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞/—Ñ–æ—Ç–æ."
    msg_wait = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
    
    try:
        if update.message.document:
            doc = update.message.document
            file_id = doc.file_id
            file_name = doc.file_name
        elif update.message.photo:
            photo = update.message.photo[-1]
            file_id = photo.file_id
            file_name = f"photo_{file_id}.jpg"
        else:
            return
            
        file_obj = await context.bot.get_file(file_id)
        file_bytes = bytes(await file_obj.download_as_bytearray())

        if file_name.endswith(('.jpg', '.jpeg', '.png', '.webp')):
             analysis_text = await analyze_image_with_gemini(file_bytes, caption)
        else:
            extracted_text = await extract_text_from_document(file_bytes, file_name)
            if extracted_text.startswith("‚ùå"):
                await msg_wait.edit_text(extracted_text)
                return
            analysis_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ '{file_name}':\n\n{extracted_text[:6000]}"
            analysis_text = (await model.generate_content_async(analysis_prompt)).text

        await send_long_message(context, update.effective_chat.id, f"üìÑ <b>–ê–Ω–∞–ª–∏–∑ –¥–ª—è {file_name}:</b>\n\n{analysis_text}")
        await msg_wait.delete()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_document_photo: {e}")
        await msg_wait.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    if data.startswith("set_lang_"):
        lang_code = data.split('_')[-1]
        storage.update_user(user_id, {'language_code': lang_code})
        lang_text = get_text('lang_changed', lang_code)
        await query.edit_message_text(lang_text)
        await context.bot.send_message(user_id, f"‚úÖ {lang_text}", reply_markup=get_main_keyboard(user_id, lang_code))

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("language", language_command))
    application.add_handler(CommandHandler("clear", clear_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("generate", generate_command))
    # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("grant_vip", grant_vip_command))
    application.add_handler(CommandHandler("revoke_vip", revoke_vip_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.Document.ALL | filters.PHOTO, handle_document_photo))
    application.add_handler(CallbackQueryHandler(callback_handler))

    logger.info("=" * 50)
    logger.info("‚úÖ AI DISCO BOT –ó–ê–ü–£–©–ï–ù!")
    logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {model.model_name}")
    logger.info(f"üóÑÔ∏è –ë–î: {'PostgreSQL ‚úì' if engine else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è)'}")
    logger.info("=" * 50)

    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
