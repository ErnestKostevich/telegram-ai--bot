#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–î–ï–ê–õ–¨–ù–´–ô –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢ - Ernest Kostevich
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π AI –±–æ—Ç —Å VIP —Å–∏—Å—Ç–µ–º–æ–π
"""

import os
import json
import logging
import random
import time
import datetime
import asyncio
import requests
import pytz
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field
from threading import Thread

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ContextTypes, CallbackQueryHandler
)
from telegram.error import NetworkError

from flask import Flask
import google.generativeai as genai

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢
# =============================================================================

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "8176339131:AAGVKJoK9Y9fdQcTqMCp0Vm95IMuQWnCNGo")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyCo4ymvNmI2JkYEuocIv3w_HsUyNPd6oEg")
FREECURRENCY_API_KEY = os.getenv("FREECURRENCY_API_KEY", "fca_live_86O15Ga6b1M0bnm6FCiDfrBB7USGCEPiAUyjiuwL")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY", "")
REPLIT_USERNAME = os.getenv("REPLIT_USERNAME", "ernest2011koste")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±–æ—Ç–∞
CREATOR_ID = 7108255346
CREATOR_USERNAME = "@Ernest_Kostevich"
BOT_USERNAME = "@AI_ERNEST_BOT"
BOT_NAME = "–ê–π—Ä–∏—Å"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini AI
if GEMINI_API_KEY:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        gemini_model = genai.GenerativeModel('gemini-pro')
        logger.info("‚úÖ Gemini AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")
        gemini_model = None
else:
    gemini_model = None
    logger.warning("‚ö†Ô∏è Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

# =============================================================================
# –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•
# =============================================================================

@dataclass
class UserData:
    user_id: int
    username: str = ""
    first_name: str = ""
    is_vip: bool = False
    vip_expires: Optional[str] = None
    language: str = "ru"
    notes: List[str] = field(default_factory=list)
    reminders: List[Dict] = field(default_factory=list)
    level: int = 1
    experience: int = 0
    memory_data: Dict[str, str] = field(default_factory=dict)
    last_activity: str = field(default_factory=lambda: datetime.datetime.now().isoformat())

    def to_dict(self) -> Dict[str, Any]:
        return {
            'user_id': self.user_id,
            'username': self.username,
            'first_name': self.first_name,
            'is_vip': self.is_vip,
            'vip_expires': self.vip_expires,
            'language': self.language,
            'notes': self.notes,
            'reminders': self.reminders,
            'level': self.level,
            'experience': self.experience,
            'memory_data': self.memory_data,
            'last_activity': self.last_activity
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'UserData':
        return cls(**data)

# =============================================================================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# =============================================================================

class Database:
    def __init__(self):
        self.users: Dict[int, UserData] = {}
        self.logs: List[Dict] = []
        self.statistics: Dict[str, Any] = {}
        self.load_data()

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if os.path.exists('users.json'):
                with open('users.json', 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.users = {int(k): UserData.from_dict(v) for k, v in data.items()}
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤
            if os.path.exists('logs.json'):
                with open('logs.json', 'r', encoding='utf-8') as f:
                    self.logs = json.load(f)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if os.path.exists('stats.json'):
                with open('stats.json', 'r', encoding='utf-8') as f:
                    self.statistics = json.load(f)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª—ã"""
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            with open('users.json', 'w', encoding='utf-8') as f:
                json.dump({k: v.to_dict() for k, v in self.users.items()}, f, ensure_ascii=False, indent=2)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
            with open('logs.json', 'w', encoding='utf-8') as f:
                json.dump(self.logs[-1000:], f, ensure_ascii=False, indent=2)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            with open('stats.json', 'w', encoding='utf-8') as f:
                json.dump(self.statistics, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def get_user(self, user_id: int) -> Optional[UserData]:
        return self.users.get(user_id)

    def save_user(self, user_data: UserData):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        user_data.last_activity = datetime.datetime.now().isoformat()
        self.users[user_data.user_id] = user_data
        self.save_data()

    def log_command(self, user_id: int, command: str, message: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        log_entry = {
            'user_id': user_id,
            'command': command,
            'message': message[:100],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            'timestamp': datetime.datetime.now().isoformat()
        }
        self.logs.append(log_entry)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if command not in self.statistics:
            self.statistics[command] = {'count': 0, 'last_used': ''}
        
        self.statistics[command]['count'] += 1
        self.statistics[command]['last_used'] = datetime.datetime.now().isoformat()

    def get_all_users(self) -> List[tuple]:
        return [(user_id, user_data.first_name, user_data.level) 
                for user_id, user_data in self.users.items()]

    def get_vip_users(self) -> List[tuple]:
        return [(user_id, user_data.first_name, user_data.vip_expires)
                for user_id, user_data in self.users.items() 
                if user_data.is_vip]

# =============================================================================
# –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê
# =============================================================================

class TelegramBot:
    def __init__(self):
        self.db = Database()
        self.user_contexts: Dict[int, List[str]] = {}
        self.maintenance_mode = False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.auto_save_task = None
        
        logger.info("ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def is_creator(self, user_id: int) -> bool:
        return user_id == CREATOR_ID

    def is_vip(self, user_data: UserData) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ VIP —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è"""
        if not user_data.is_vip:
            return False
            
        if user_data.vip_expires:
            try:
                expires_date = datetime.datetime.fromisoformat(user_data.vip_expires)
                if datetime.datetime.now() > expires_date:
                    user_data.is_vip = False
                    user_data.vip_expires = None
                    self.db.save_user(user_data)
                    return False
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VIP —Å—Ä–æ–∫–∞: {e}")
                return False
                
        return True

    async def get_user_data(self, update: Update) -> UserData:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        if not user_data:
            user_data = UserData(
                user_id=user.id,
                username=user.username or "",
                first_name=user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–µ–º VIP —Å–æ–∑–¥–∞—Ç–µ–ª—é
            if self.is_creator(user.id):
                user_data.is_vip = True
                user_data.vip_expires = None
                logger.info(f"üëë –°–æ–∑–¥–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª VIP: {user.id}")
            
            self.db.save_user(user_data)
            logger.info(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} ({user.id})")
        
        return user_data

    async def send_typing(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞"""
        try:
            await update.message.chat.send_action(action="typing")
        except Exception:
            pass

    # =============================================================================
    # –°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´
    # =============================================================================

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_data = await self.get_user_data(update)
        await self.send_typing(update)
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if self.is_creator(user_data.user_id):
            greeting = "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –°–æ–∑–¥–∞—Ç–µ–ª—å!"
            status_info = "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º"
        elif self.is_vip(user_data):
            greeting = f"üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data.first_name}!"
            status_info = "VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"
        else:
            greeting = f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user_data.first_name}!"
            status_info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å—Å–ª–µ–¥—É–π –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!"
        
        welcome_text = f"""
{greeting}

–Ø {BOT_NAME} - —Ç–≤–æ–π —É–º–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫! 

üåü **–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üí¨ –£–º–Ω—ã–π —á–∞—Ç —Å Gemini AI
‚Ä¢ üìù –°–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ—Ç–æ–∫ –∏ –ø–∞–º—è—Ç–∏
‚Ä¢ üå§Ô∏è –ü–æ–≥–æ–¥–∞, –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, –ø–µ—Ä–µ–≤–æ–¥—ã
‚Ä¢ üéÆ –ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
‚Ä¢ üíé VIP —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö

üìä **–í–∞—à —Å—Ç–∞—Ç—É—Å:** {status_info}
üÜô **–£—Ä–æ–≤–µ–Ω—å:** {user_data.level}
‚≠ê **–û–ø—ã—Ç:** {user_data.experience}

–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥!
        """
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data="help"),
             InlineKeyboardButton("ü§ñ AI –ß–∞—Ç", callback_data="ai_demo")],
            [InlineKeyboardButton("üíé VIP", callback_data="vip_info"),
             InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        
        if self.is_creator(user_data.user_id):
            keyboard.append([InlineKeyboardButton("üëë –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        self.db.log_command(user_data.user_id, "/start")
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /help —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –ø—Ä–∞–≤–∞–º"""
        user_data = await self.get_user_data(update)
        await self.send_typing(update)
        
        help_text = f"""
ü§ñ {BOT_NAME} - –ü–û–ú–û–©–¨

üè† **–û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/info - –û –±–æ—Ç–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üí¨ **AI-–ß–ê–¢:**
/ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è!

üìù **–ó–ê–ú–ï–¢–ö–ò:**
/note [—Ç–µ–∫—Å—Ç] - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/notes - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏
/delnote [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É

‚è∞ **–í–†–ï–ú–Ø:**
/time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
/date - –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞

üéÆ **–†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø:**
/joke - –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞
/fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
/quote - –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞
/coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
/dice - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫

üîß **–£–¢–ò–õ–ò–¢–´:**
/weather [–≥–æ—Ä–æ–¥] - –ü–æ–≥–æ–¥–∞
/currency [–∏–∑] [–≤] - –ö—É—Ä—Å –≤–∞–ª—é—Ç
/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–æ–¥
/password [–¥–ª–∏–Ω–∞] - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
"""
        
        # VIP –∫–æ–º–∞–Ω–¥—ã
        if self.is_vip(user_data):
            help_text += """
üíé **VIP –ö–û–ú–ê–ù–î–´:**
/vip - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP —Å—Ç–∞—Ç—É—Å–µ
/remind [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç] - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/reminders - –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/secret - –°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
/lottery - –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è
"""
        
        # –ö–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è
        if self.is_creator(user_data.user_id):
            help_text += """
üëë **–ö–û–ú–ê–ù–î–´ –°–û–ó–î–ê–¢–ï–õ–Ø:**
/grant_vip [user_id] [–¥–Ω–∏] - –í—ã–¥–∞—Ç—å VIP
/revoke_vip [user_id] - –ó–∞–±—Ä–∞—Ç—å VIP
/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/broadcast [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞
/maintenance [on/off] - –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
"""
        
        help_text += f"\n‚ö° –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: 50+"
        help_text += f"\nü§ñ AI: {'‚úÖ Gemini 2.0' if gemini_model else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}"
        help_text += f"\nüëë –°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_USERNAME}"
        
        self.db.log_command(user_data.user_id, "/help")
        await update.message.reply_text(help_text)

    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /info"""
        user_data = await self.get_user_data(update)
        
        info_text = f"""
ü§ñ **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û {BOT_NAME}**

üëë **–°–æ–∑–¥–∞—Ç–µ–ª—å:** Ernest Kostevich ({CREATOR_USERNAME})
üöÄ **–í–µ—Ä—Å–∏—è:** 3.0
üíª **–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** Telegram Bot API
üß† **AI –ú–æ–¥–µ–ª—å:** Gemini 2.0 Flash

üåü **–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –£–º–Ω—ã–π —á–∞—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ—Ç–æ–∫ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
‚Ä¢ VIP —Å–∏—Å—Ç–µ–º–∞ —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
‚Ä¢ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: —à—É—Ç–∫–∏, —Ñ–∞–∫—Ç—ã, —Ü–∏—Ç–∞—Ç—ã
‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: –ø–æ–≥–æ–¥–∞, –∫—É—Ä—Å—ã, –ø–µ—Ä–µ–≤–æ–¥—ã

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.db.users)}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(self.db.logs)}
‚Ä¢ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {self.db.statistics.get('/ai', {}).get('count', 0)}

üíé **VIP —Å–∏—Å—Ç–µ–º–∞:** –ê–∫—Ç–∏–≤–Ω–∞
ü§ñ **AI —á–∞—Ç:** {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if gemini_model else '‚ùå –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        """
        
        self.db.log_command(user_data.user_id, "/info")
        await update.message.reply_text(info_text)

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        user_data = await self.get_user_data(update)
        
        total_users = len(self.db.users)
        vip_users = len([u for u in self.db.users.values() if u.is_vip])
        total_commands = len(self.db.logs)
        
        status_text = f"""
‚ö° **–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´**

üü¢ –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üíé VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {vip_users}
üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {total_commands}
ü§ñ AI: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if gemini_model else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
üõ†Ô∏è –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: {'üî¥ –í–ö–õ' if self.maintenance_mode else 'üü¢ –í–´–ö–õ'}

‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
        """
        
        self.db.log_command(user_data.user_id, "/status")
        await update.message.reply_text(status_text)

    # =============================================================================
    # AI-–ß–ê–¢ –°–ò–°–¢–ï–ú–ê
    # =============================================================================

    async def ai_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /ai –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò"""
        user_data = await self.get_user_data(update)
        
        if not context.args:
            await update.message.reply_text("""
ü§ñ **AI-–ß–ê–¢**

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ai [–≤–∞—à –≤–æ–ø—Ä–æ—Å]

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ /ai –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ—Å–º–æ—Å–µ
‚Ä¢ /ai –ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python
‚Ä¢ /ai –û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É
‚Ä¢ /ai –ü–æ–º–æ–≥–∏ —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã!
            """)
            return
        
        if not gemini_model:
            await update.message.reply_text("‚ùå AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        query = " ".join(context.args)
        await self.send_typing(update)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            user_id = user_data.user_id
            if user_id not in self.user_contexts:
                self.user_contexts[user_id] = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.user_contexts[user_id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {query}")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç 5 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if len(self.user_contexts[user_id]) > 5:
                self.user_contexts[user_id] = self.user_contexts[user_id][-5:]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            context_text = "\n".join(self.user_contexts[user_id][-3:])
            prompt = f"""
–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram –±–æ—Ç–µ. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:
{context_text}

–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}

–û—Ç–≤–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ:
"""
            
            response = gemini_model.generate_content(prompt)
            answer = response.text.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.user_contexts[user_id].append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {answer}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(f"ü§ñ {answer}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        self.db.log_command(user_data.user_id, "/ai", query[:50])

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∫–æ–º–∞–Ω–¥"""
        if self.maintenance_mode and not self.is_creator(update.effective_user.id):
            await update.message.reply_text("üõ†Ô∏è –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        user_data = await self.get_user_data(update)
        message_text = update.message.text
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if update.effective_chat.type != "private":
            if not message_text.startswith(BOT_USERNAME):
                return
            message_text = message_text[len(BOT_USERNAME):].strip()
        
        await self.send_typing(update)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        message_lower = message_text.lower()
        
        if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "hello", "hi", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π"]):
            responses = [
                "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
                "üòä –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ö–∞–∫ –¥–µ–ª–∞?",
                "ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "üéâ –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            ]
            await update.message.reply_text(random.choice(responses))
            return
        
        elif any(phrase in message_lower for phrase in ["–∫–∞–∫ –¥–µ–ª–∞", "how are you"]):
            await update.message.reply_text("ü§ñ –£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å! –ê —É —Ç–µ–±—è –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?")
            return
        
        elif any(word in message_lower for word in ["—Å–ø–∞—Å–∏–±–æ", "thanks", "thank you"]):
            await update.message.reply_text("üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å!")
            return
        
        elif any(phrase in message_lower for phrase in ["–∫—Ç–æ —Ç—ã", "who are you"]):
            await update.message.reply_text(f"ü§ñ –Ø {BOT_NAME} - —É–º–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫! –°–æ–∑–¥–∞–Ω {CREATOR_USERNAME}")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        if gemini_model:
            await self.ai_chat_response(update, message_text, user_data)
        else:
            await update.message.reply_text("ü§ñ –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ /help –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")

    async def ai_chat_response(self, update: Update, message: str, user_data: UserData):
        """AI –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "{message}"
–û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ, –∫–∞–∫ —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º.
"""
            response = gemini_model.generate_content(prompt)
            await update.message.reply_text(f"ü§ñ {response.text}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI —á–∞—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ /help")
        
        self.db.log_command(user_data.user_id, "message", message[:50])

    # =============================================================================
    # –°–ò–°–¢–ï–ú–ê –ó–ê–ú–ï–¢–û–ö
    # =============================================================================

    async def note_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É - /note [—Ç–µ–∫—Å—Ç]"""
        user_data = await self.get_user_data(update)
        
        if not context.args:
            await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /note [—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏]")
            return
        
        note_text = " ".join(context.args)
        timestamp = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        user_data.notes.append(f"{timestamp}: {note_text}")
        
        self.db.save_user(user_data)
        await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        self.db.log_command(user_data.user_id, "/note")

    async def notes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ - /notes"""
        user_data = await self.get_user_data(update)
        
        if not user_data.notes:
            await update.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.")
            return
        
        notes_text = "üìù **–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:**\n\n"
        for i, note in enumerate(user_data.notes[-10:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            notes_text += f"{i}. {note}\n"
        
        if len(user_data.notes) > 10:
            notes_text += f"\n... –∏ –µ—â—ë {len(user_data.notes) - 10} –∑–∞–º–µ—Ç–æ–∫"
        
        await update.message.reply_text(notes_text)
        self.db.log_command(user_data.user_id, "/notes")

    async def delnote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É - /delnote [–Ω–æ–º–µ—Ä]"""
        user_data = await self.get_user_data(update)
        
        if not context.args or not context.args[0].isdigit():
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delnote [–Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏]")
            return
        
        note_num = int(context.args[0])
        if 1 <= note_num <= len(user_data.notes):
            deleted_note = user_data.notes.pop(note_num - 1)
            self.db.save_user(user_data)
            await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {deleted_note[:50]}...")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏. –î–æ—Å—Ç—É–ø–Ω–æ: 1-{len(user_data.notes)}")
        
        self.db.log_command(user_data.user_id, "/delnote")

    # =============================================================================
    # –†–ê–ó–í–õ–ï–ö–ê–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´
    # =============================================================================

    async def joke_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞ - /joke"""
        jokes = [
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!",
            "–ó–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –±–∞—Ä... –∞ —Ç–∞–º –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç!",
            "‚Äî –î–æ–∫—Ç–æ—Ä, —è –¥—É–º–∞—é, —á—Ç–æ —è ‚Äî –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å!\n‚Äî –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –ø—Ä–∏–º–∏—Ç–µ —ç—Ç—É —Ç–∞–±–ª–µ—Ç–∫—É.\n‚Äî –ê —á—Ç–æ —ç—Ç–æ?\n‚Äî –ê–Ω—Ç–∏–≤–∏—Ä—É—Å!",
            "–ü–æ—á–µ–º—É Python –ª—É—á—à–µ Java? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—Å –ø–∏—Å–∞—Ç—å 100 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –¥–ª—è 'Hello World'!",
            "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–∫—Ä—É—Ç–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É? –ù–∏ –æ–¥–Ω–æ–≥–æ, —ç—Ç–æ hardware –ø—Ä–æ–±–ª–µ–º–∞!"
        ]
        
        await update.message.reply_text(f"üòÑ {random.choice(jokes)}")
        
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/joke")

    async def fact_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç - /fact"""
        facts = [
            "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∫–æ–ª–æ 86 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –Ω–µ–π—Ä–æ–Ω–æ–≤!",
            "üåä –í –æ–∫–µ–∞–Ω–µ –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, —á–µ–º –≤–æ –≤—Å–µ—Ö –º—É–∑–µ—è—Ö –º–∏—Ä–∞!",
            "üêô –£ –æ—Å—å–º–∏–Ω–æ–≥–æ–≤ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±–∞—è –∫—Ä–æ–≤—å!",
            "üåç –ó–µ–º–ª—è —Ç–µ—Ä—è–µ—Ç –æ–∫–æ–ª–æ 50 —Ç–æ–Ω–Ω –º–∞—Å—Å—ã –∫–∞–∂–¥—ã–π –≥–æ–¥!",
            "‚ö° –ú–æ–ª–Ω–∏—è –≤ 5 —Ä–∞–∑ –≥–æ—Ä—è—á–µ–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –°–æ–ª–Ω—Ü–∞!",
            "üêú –ú—É—Ä–∞–≤—å–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ø—è—Ç!",
            "üî• –û–≥–æ–Ω—å –Ω–µ –∏–º–µ–µ—Ç —Ç–µ–Ω–∏",
            "üçØ –ú–µ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è"
        ]
        
        await update.message.reply_text(random.choice(facts))
        
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/fact")

    async def quote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞ - /quote"""
        quotes = [
            "üí´ '–ë—É–¥—å —Å–æ–±–æ–π. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.' - –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
            "üöÄ '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫—É—é —Ä–∞–±–æ—Ç—É ‚Äî –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—à—å.' - –°—Ç–∏–≤ –î–∂–æ–±—Å",
            "‚≠ê '–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.' - –£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å",
            "üåü '–ù–µ –∂–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. –ù–∞—á–Ω–∏—Ç–µ —Ç–∞–º, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.' - –ê—Ä—Ç—É—Ä –≠—à",
            "üí° '–ò–Ω–Ω–æ–≤–∞—Ü–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç –ª–∏–¥–µ—Ä–∞ –æ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è.' - –°—Ç–∏–≤ –î–∂–æ–±—Å"
        ]
        
        await update.message.reply_text(random.choice(quotes))
        
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/quote")

    async def coin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É - /coin"""
        result = random.choice(["ü™ô –û—Ä—ë–ª!", "ü™ô –†–µ—à–∫–∞!"])
        await update.message.reply_text(result)
        
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/coin")

    async def dice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ - /dice"""
        result = random.randint(1, 6)
        dice_faces = ["‚öÄ", "‚öÅ", "‚öÇ", "‚öÉ", "‚öÑ", "‚öÖ"]
        await update.message.reply_text(f"üé≤ {dice_faces[result-1]} –í—ã–ø–∞–ª–æ: {result}")
        
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/dice")

    # =============================================================================
    # –ü–û–õ–ï–ó–ù–´–ï –£–¢–ò–õ–ò–¢–´
    # =============================================================================

    async def time_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è - /time"""
        moscow_tz = pytz.timezone('Europe/Moscow')
        moscow_time = datetime.datetime.now(moscow_tz)
        
        time_text = f"""
‚è∞ **–¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø**

üá∑üá∫ –ú–æ—Å–∫–≤–∞: {moscow_time.strftime('%H:%M:%S %d.%m.%Y')}
üåç UTC: {datetime.datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
        """
        
        await update.message.reply_text(time_text)
        
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/time")

    async def date_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ - /date"""
        today = datetime.datetime.now()
        await update.message.reply_text(f"üìÖ –°–µ–≥–æ–¥–Ω—è: {today.strftime('%d %B %Y')}")
        
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data.user_id, "/date")

    async def weather_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–≥–æ–¥–∞ - /weather [–≥–æ—Ä–æ–¥]"""
        user_data = await self.get_user_data(update)
        
        if not context.args:
            await update.message.reply_text("üå§Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /weather [–≥–æ—Ä–æ–¥]\n–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")
            return
        
        city = " ".join(context.args)
        
        if not OPENWEATHER_API_KEY:
            await update.message.reply_text("‚ùå –§—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        try:
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            response = requests.get(url, timeout=10)
            data = response.json()
            
            if data.get("cod") == 200:
                temp = data["main"]["temp"]
                feels_like = data["main"]["feels_like"]
                humidity = data["main"]["humidity"]
                description = data["weather"][0]["description"]
                wind_speed = data["wind"]["speed"]
                
                weather_text = f"""
üå§Ô∏è **–ü–æ–≥–æ–¥–∞ –≤ {city}**

üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C
ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%
üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description.capitalize()}
                """
                await update.message.reply_text(weather_text)
            else:
                await update.message.reply_text("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        self.db.log_command(user_data.user_id, "/weather", city)

    async def currency_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö—É—Ä—Å –≤–∞–ª—é—Ç - /currency [–∏–∑] [–≤]"""
        user_data = await self.get_user_data(update)
        
        if len(context.args) < 2:
            await update.message.reply_text("üí± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /currency [–∏–∑] [–≤]\n–ü—Ä–∏–º–µ—Ä: /currency USD RUB")
            return
        
        from_cur = context.args[0].upper()
        to_cur = context.args[1].upper()
        
        try:
            url = f"https://api.freecurrencyapi.com/v1/latest?apikey={FREECURRENCY_API_KEY}&base_currency={from_cur}&currencies={to_cur}"
            response = requests.get(url, timeout=10)
            data = response.json()
            
            if "data" in data and to_cur in data["data"]:
                rate = data["data"][to_cur]
                await update.message.reply_text(f"üí± 1 {from_cur} = {rate:.4f} {to_cur}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç")
        
        self.db.log_command(user_data.user_id, "/currency", f"{from_cur}_{to_cur}")

    async def password_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π - /password [–¥–ª–∏–Ω–∞]"""
        user_data = await self.get_user_data(update)
        
        length = 12
        if context.args and context.args[0].isdigit():
            length = min(int(context.args[0]), 32)  # –ú–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞
        
        import string
        characters = string.ascii_letters + string.digits + "!@#$%^&*"
        password = ''.join(random.choice(characters) for _ in range(length))
        
        await update.message.reply_text(
            f"üîê **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å** ({length} —Å–∏–º–≤–æ–ª–æ–≤):\n"
            f"`{password}`\n\n"
            f"‚ö†Ô∏è *–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!*",
            parse_mode='Markdown'
        )
        
        self.db.log_command(user_data.user_id, "/password")

    # =============================================================================
    # VIP –°–ò–°–¢–ï–ú–ê
    # =============================================================================

    async def vip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP —Å—Ç–∞—Ç—É—Å–µ - /vip"""
        user_data = await self.get_user_data(update)
        
        if self.is_vip(user_data):
            if user_data.vip_expires:
                expires_date = datetime.datetime.fromisoformat(user_data.vip_expires)
                expires_str = expires_date.strftime("%d.%m.%Y %H:%M")
                status_text = f"üíé VIP –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {expires_str}"
            else:
                status_text = "üíé VIP –∞–∫—Ç–∏–≤–µ–Ω –ë–ï–°–°–†–û–ß–ù–û"
            
            vip_info = f"""
{status_text}

üåü **–í–∞—à–∏ VIP –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:**
‚Ä¢ ‚è∞ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (/remind)
‚Ä¢ üéÅ –°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (/secret)
‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ üíæ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å
‚Ä¢ üé∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è (/lottery)
"""
        else:
            vip_info = """
üíé **VIP –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω**

‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ VIP:**
‚è∞ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
üéÅ –°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏  
üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
üíæ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å
üé∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è

üí° *–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫* @Ernest_Kostevich
"""
        
        await update.message.reply_text(vip_info)
        self.db.log_command(user_data.user_id, "/vip")

    async def remind_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - /remind [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç] (—Ç–æ–ª—å–∫–æ VIP)"""
        user_data = await self.get_user_data(update)
        
        if not self.is_vip(user_data):
            await update.message.reply_text("üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("‚è∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è]")
            return
        
        try:
            minutes = int(context.args[0])
            text = " ".join(context.args[1:])
            
            if minutes <= 0:
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –º–∏–Ω—É—Ç!")
                return
            
            reminder_time = datetime.datetime.now() + datetime.timedelta(minutes=minutes)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            reminder = {
                "text": text,
                "time": reminder_time.isoformat(),
                "created": datetime.datetime.now().isoformat()
            }
            user_data.reminders.append(reminder)
            self.db.save_user(user_data)
            
            await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω—É—Ç!")
            
            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            async def send_reminder():
                await asyncio.sleep(minutes * 60)
                try:
                    await update.message.reply_text(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            
            asyncio.create_task(send_reminder())
            
        except ValueError:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç!")
        
        self.db.log_command(user_data.user_id, "/remind")

    async def reminders_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - /reminders (—Ç–æ–ª—å–∫–æ VIP)"""
        user_data = await self.get_user_data(update)
        
        if not self.is_vip(user_data):
            await update.message.reply_text("üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
            return
        
        if not user_data.reminders:
            await update.message.reply_text("‚è∞ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return
        
        reminders_text = "‚è∞ **–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n\n"
        for i, reminder in enumerate(user_data.reminders[-5:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
            reminder_time = datetime.datetime.fromisoformat(reminder["time"])
            time_str = reminder_time.strftime("%d.%m.%Y %H:%M")
            reminders_text += f"{i}. {reminder['text']} ({time_str})\n"
        
        await update.message.reply_text(reminders_text)
        self.db.log_command(user_data.user_id, "/reminders")

    # =============================================================================
    # –ö–û–ú–ê–ù–î–´ –°–û–ó–î–ê–¢–ï–õ–Ø
    # =============================================================================

    async def grant_vip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–¥–∞—Ç—å VIP - /grant_vip [user_id] [–¥–Ω–∏] (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)"""
        user_data = await self.get_user_data(update)
        
        if not self.is_creator(user_data.user_id):
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text("üíé –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_vip [user_id] [–¥–Ω–∏]\n–ü—Ä–∏–º–µ—Ä: /grant_vip 123456789 30")
            return
        
        try:
            target_user_id = int(context.args[0])
            days = int(context.args[1])
            
            target_user = self.db.get_user(target_user_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            target_user.is_vip = True
            expires_date = datetime.datetime.now() + datetime.timedelta(days=days)
            target_user.vip_expires = expires_date.isoformat()
            
            self.db.save_user(target_user)
            
            await update.message.reply_text(
                f"‚úÖ VIP –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.first_name} "
                f"–Ω–∞ {days} –¥–Ω–µ–π (–¥–æ {expires_date.strftime('%d.%m.%Y')})"
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    target_user_id,
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–¥–∞–Ω VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ {days} –¥–Ω–µ–π!\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vip –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π."
                )
            except Exception:
                pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞.")
        
        self.db.log_command(user_data.user_id, "/grant_vip")

    async def users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - /users (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)"""
        user_data = await self.get_user_data(update)
        
        if not self.is_creator(user_data.user_id):
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return
        
        users = self.db.get_all_users()
        if not users:
            await update.message.reply_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        users_text = "üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
        for user_id, first_name, level in users[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 15
            user_data = self.db.get_user(user_id)
            vip_status = "üíé" if user_data and user_data.is_vip else "üë§"
            users_text += f"{vip_status} {first_name} (ID: {user_id}) - –£—Ä. {level}\n"
        
        if len(users) > 15:
            users_text += f"\n... –∏ –µ—â—ë {len(users) - 15} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await update.message.reply_text(users_text)
        self.db.log_command(user_data.user_id, "/users")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ - /stats"""
        user_data = await self.get_user_data(update)
        
        total_users = len(self.db.users)
        vip_users = len([u for u in self.db.users.values() if u.is_vip])
        total_commands = len(self.db.logs)
        
        if self.is_creator(user_data.user_id):
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
            active_today = len([
                u for u in self.db.users.values() 
                if (datetime.datetime.now() - datetime.datetime.fromisoformat(u.last_activity)).days < 1
            ])
            
            popular_commands = sorted(
                self.db.statistics.items(), 
                key=lambda x: x[1]['count'], 
                reverse=True
            )[:5]
            
            stats_text = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê (–î–õ–Ø –°–û–ó–î–ê–¢–ï–õ–Ø)**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üíé VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {vip_users}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_today}
üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {total_commands}

üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
"""
            for cmd, data in popular_commands:
                stats_text += f"‚Ä¢ {cmd}: {data['count']} —Ä–∞–∑\n"
            
            stats_text += f"\nü§ñ AI: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if gemini_model else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}"
            stats_text += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"
            
        else:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            stats_text = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üíé VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {vip_users}
üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {total_commands}
ü§ñ AI: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if gemini_model else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
‚ö° –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω
"""
        
        await update.message.reply_text(stats_text)
        self.db.log_command(user_data.user_id, "/stats")

    async def broadcast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞—Å—Å—ã–ª–∫–∞ - /broadcast [—Ç–µ–∫—Å—Ç] (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å)"""
        user_data = await self.get_user_data(update)
        
        if not self.is_creator(user_data.user_id):
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
            return
        
        if not context.args:
            await update.message.reply_text("üì¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]")
            return
        
        message = " ".join(context.args)
        users = self.db.get_all_users()
        sent_count = 0
        failed_count = 0
        
        await update.message.reply_text(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for user_id, first_name, level in users:
            try:
                await context.bot.send_message(
                    user_id,
                    f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è:**\n\n{message}"
                )
                sent_count += 1
                await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
            except Exception as e:
                failed_count += 1
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}"
        )
        
        self.db.log_command(user_data.user_id, "/broadcast")

    # =============================================================================
    # CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    # =============================================================================

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_data = await self.get_user_data(update)
        
        if query.data == "help":
            await self.help_command(update, context)
        elif query.data == "ai_demo":
            await query.edit_message_text(
                "ü§ñ **AI-–ß–ê–¢**\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /ai\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**\n"
                "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ—Å–º–æ—Å–µ\n"  
                "‚Ä¢ –ü–æ–º–æ–≥–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
                "‚Ä¢ –û–±—ä—è—Å–Ω–∏ —Å–ª–æ–∂–Ω—É—é —Ç–µ–º—É\n"
                "‚Ä¢ –ü—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é –ø—Ä–æ–µ–∫—Ç–∞\n"
                "‚Ä¢ –ü–æ–º–æ–≥–∏ —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º\n\n"
                "–Ø –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å!"
            )
        elif query.data == "vip_info":
            await self.vip_command(update, context)
        elif query.data == "stats":
            await self.stats_command(update, context)
        elif query.data == "admin_panel" and self.is_creator(user_data.user_id):
            await query.edit_message_text(
                "üëë **–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø**\n\n"
                "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                "‚Ä¢ /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚Ä¢ /stats - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "‚Ä¢ /grant_vip - –≤—ã–¥–∞—Ç—å VIP\n"
                "‚Ä¢ /broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞\n"
                "‚Ä¢ /maintenance - —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º."
            )

    # =============================================================================
    # –ó–ê–ü–£–°–ö –ë–û–¢–ê
    # =============================================================================

    async def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        command_handlers = [
            ('start', self.start_command),
            ('help', self.help_command),
            ('info', self.info_command),
            ('status', self.status_command),
            ('ai', self.ai_command),
            ('note', self.note_command),
            ('notes', self.notes_command),
            ('delnote', self.delnote_command),
            ('time', self.time_command),
            ('date', self.date_command),
            ('joke', self.joke_command),
            ('fact', self.fact_command),
            ('quote', self.quote_command),
            ('coin', self.coin_command),
            ('dice', self.dice_command),
            ('weather', self.weather_command),
            ('currency', self.currency_command),
            ('password', self.password_command),
            ('vip', self.vip_command),
            ('remind', self.remind_command),
            ('reminders', self.reminders_command),
            ('grant_vip', self.grant_vip_command),
            ('users', self.users_command),
            ('stats', self.stats_command),
            ('broadcast', self.broadcast_command),
        ]
        
        for command, handler in command_handlers:
            application.add_handler(CommandHandler(command, handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        logger.info(f"üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: {CREATOR_USERNAME}")
        logger.info(f"üåü –ò–º—è –±–æ—Ç–∞: {BOT_NAME}")
        logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(self.db.users)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await application.run_polling(drop_pending_updates=True)

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        
        if isinstance(context.error, NetworkError):
            logger.warning("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é...")
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {context.error}")

# =============================================================================
# FLASK APP –î–õ–Ø RENDER
# =============================================================================

app = Flask(__name__)

@app.route('/')
def home():
    return f"""
    <html>
        <head>
            <title>{BOT_NAME}</title>
            <meta charset="utf-8">
            <style>
                body {{ 
                    font-family: 'Arial', sans-serif; 
                    margin: 40px; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                }}
                .container {{ 
                    max-width: 800px; 
                    margin: 0 auto; 
                    background: rgba(255,255,255,0.1);
                    padding: 30px;
                    border-radius: 15px;
                    backdrop-filter: blur(10px);
                }}
                .status {{ 
                    color: #4CAF50; 
                    font-weight: bold;
                    font-size: 1.2em;
                }}
                .bot-name {{
                    font-size: 2.5em;
                    margin-bottom: 10px;
                    text-align: center;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1 class="bot-name">ü§ñ {BOT_NAME}</h1>
                <p class="status">‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
                <p><strong>–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:</strong> {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p><strong>–°–æ–∑–¥–∞—Ç–µ–ª—å:</strong> {CREATOR_USERNAME}</p>
                <p><strong>–§—É–Ω–∫—Ü–∏–π:</strong> 50+ | <strong>AI:</strong> Gemini 2.0 Flash</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> üü¢ –û–Ω–ª–∞–π–Ω</p>
            </div>
        </body>
    </html>
    """

@app.route('/health')
def health():
    return {"status": "ok", "time": datetime.datetime.now().isoformat()}

@app.route('/ping')
def ping():
    return "pong"

# =============================================================================
# –ê–í–¢–û–ü–ò–ù–ì –î–õ–Ø RENDER
# =============================================================================

def auto_ping():
    """–ê–≤—Ç–æ–ø–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ Render"""
    time.sleep(10)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    while True:
        try:
            if REPLIT_USERNAME:
                requests.get(f"https://{REPLIT_USERNAME}.repl.co", timeout=10)
            else:
                # –î–ª—è Render –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
                render_url = os.getenv("RENDER_EXTERNAL_URL")
                if render_url:
                    requests.get(render_url, timeout=10)
            logger.info("üîÑ –ê–≤—Ç–æ–ø–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logger.warning(f"–ê–≤—Ç–æ–ø–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        time.sleep(300)  # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# =============================================================================
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =============================================================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    ping_thread = Thread(target=auto_ping, daemon=True)
    ping_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = TelegramBot()
    await bot.run_bot()

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    port = int(os.getenv("PORT", 8080))
    app.run(host='0.0.0.0', port=port, debug=False, threaded=True)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)
        asyncio.run(main())
