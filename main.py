#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# =============================================================================
# AI DISCO BOT v5.1 FINAL - by @Ernest_Kostevich
#
# –ü–æ–ª–Ω–∞—è, —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è. –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ
# —Ñ—É–Ω–∫—Ü–∏–∏, —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.
# –†–∞–±–æ—Ç–∞–µ—Ç —Å PostgreSQL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
# =============================================================================

import os
import json
import logging
import random
import asyncio
import signal
from datetime import datetime, timedelta
from typing import Dict, Optional
import pytz
import io

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode, ChatAction

import google.generativeai as genai
import aiohttp
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from PIL import Image
import fitz
import docx
from pydub import AudioSegment

from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime, JSON, Text, BigInteger
from sqlalchemy.orm import declarative_base, sessionmaker

from dotenv import load_dotenv
load_dotenv()

# =============================================================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# =============================================================================
BOT_TOKEN = os.getenv('BOT_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
DATABASE_URL = os.getenv('DATABASE_URL')
CREATOR_USERNAME = "Ernest_Kostevich"
CREATOR_ID = None
BOT_START_TIME = datetime.now()
DEFAULT_LANG = "ru"

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

if not BOT_TOKEN or not GEMINI_API_KEY:
    logger.error("‚ùå BOT_TOKEN –∏–ª–∏ GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("Required environment variables missing")

genai.configure(api_key=GEMINI_API_KEY)

generation_config = { "temperature": 0.8, "top_p": 0.95, "top_k": 40, "max_output_tokens": 8192 }
safety_settings = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

MODEL_NAME = 'gemini-2.5-flash'
IMAGE_GEN_MODEL_NAME = 'imagen-3'

system_prompt = (
    "You are AI DISCO BOT, a powerful and friendly AI assistant based on Gemini 2.5. "
    "Your creator is @Ernest_Kostevich. You are helpful, engaging, and use emojis to make responses lively. "
    "You MUST ALWAYS respond in the language of the user's request. Be concise but comprehensive. "
    "Format your answers with Telegram's HTML Markdown (<b>bold</b>, <i>italic</i>, <code>code</code>, <pre>pre</pre>)."
)

try:
    model = genai.GenerativeModel(MODEL_NAME, generation_config=generation_config, safety_settings=safety_settings, system_instruction=system_prompt)
    vision_model = genai.GenerativeModel(MODEL_NAME, safety_settings=safety_settings)
    image_gen_model = genai.GenerativeModel(IMAGE_GEN_MODEL_NAME)
    logger.info(f"‚úÖ –ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {MODEL_NAME} –∏ {IMAGE_GEN_MODEL_NAME}")
except Exception as e:
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ Gemini: {e}")
    raise e

# =============================================================================
# –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
# =============================================================================
TRANSLATIONS_DATA = {
    'ru': {
        "start_welcome": """ü§ñ <b>AI DISCO BOT</b>

–ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ <b>Gemini 2.5 Flash</b>.

<b>üéØ –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
üí¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI-—á–∞—Ç —Å –ø–∞–º—è—Ç—å—é
üé§ –ü–æ–Ω–∏–º–∞—é –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
üìù –ó–∞–º–µ—Ç–∫–∏ –∏ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á
üåç –£—Ç–∏–ª–∏—Ç—ã: –ø–æ–≥–æ–¥–∞, –≤—Ä–µ–º—è, –ø–µ—Ä–µ–≤–æ–¥
üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ñ–∞–∫—Ç—ã

üíé <b>VIP –§—É–Ω–∫—Ü–∏–∏:</b>
üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É
üìé –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, DOCX, TXT)
üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

<b>‚ö°Ô∏è –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/help - –ü–æ–º–æ—â—å –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º
/lang - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
/vip - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VIP-—Å—Ç–∞—Ç—É—Å–µ

<b>üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å:</b> @{creator}""",
        "help_title": "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏:</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥ –ø–æ —Ç–µ–º–µ.",
        "btn_ai_chat": "üí¨ AI –ß–∞—Ç", "btn_notes": "üìù –ó–∞–º–µ—Ç–∫–∏", "btn_weather": "üåç –ü–æ–≥–æ–¥–∞", "btn_time": "‚è∞ –í—Ä–µ–º—è", "btn_games": "üé≤ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "btn_info": "‚ÑπÔ∏è –ò–Ω—Ñ–æ", "btn_vip_menu": "üíé VIP –ú–µ–Ω—é", "btn_image_gen": "üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", "btn_admin_panel": "üëë –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å",
        "lang_select": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫:", "lang_selected": "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π.",
        "vip_only_feature": "üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @{creator}.",
        "processing_voice": "üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
        "error_voice": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        "error_ai": "ü§ñüí• –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
        "your_request_voice": "<i>–í–∞—à –∑–∞–ø—Ä–æ—Å: ¬´{text}¬ª</i>",
        "image_gen_prompt": "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è: `/generate [–æ–ø–∏—Å–∞–Ω–∏–µ]`\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: `/generate –∫–æ—Ç –≤ —Å–∫–∞—Ñ–∞–Ω–¥—Ä–µ, —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º`",
        "image_generating": "üé® –°–æ–∑–¥–∞—é —à–µ–¥–µ–≤—Ä...",
        "image_gen_caption": "üñºÔ∏è –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É: <b>{prompt}</b>\n\nüíé –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Imagen 3",
        "image_gen_error": "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
        "context_cleared": "üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω!",
        "command_aliases": { "start": ["start"], "help": ["help", "–ø–æ–º–æ—â—å"], "lang": ["lang", "language", "—è–∑—ã–∫"], "generate": ["generate", "gen", "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"], "info": ["info", "–∏–Ω—Ñ–æ"], "status": ["status", "—Å—Ç–∞—Ç—É—Å"], "profile": ["profile", "–ø—Ä–æ—Ñ–∏–ª—å"], "uptime": ["uptime"], "clear": ["clear", "–æ—á–∏—Å—Ç–∏—Ç—å"], "vip": ["vip", "–≤–∏–ø"], "remind": ["remind", "–Ω–∞–ø–æ–º–Ω–∏"], "backup": ["backup", "–±—ç–∫–∞–ø"]}
    },
    'en': {
        "start_welcome": """ü§ñ <b>AI DISCO BOT</b>

Hello, {first_name}! I'm your smart assistant powered by <b>Gemini 2.5 Flash</b>.

<b>üéØ Features:</b>
üí¨ Advanced AI chat with memory
üé§ I understand voice messages
üìù Notes and To-Do lists
üåç Utilities: weather, time, translation
üé≤ Games and facts

üíé <b>VIP Features:</b>
üñºÔ∏è Image generation from text
üìé Document analysis (PDF, DOCX, TXT)
üì∏ Photo analysis
‚è∞ Set reminders

<b>‚ö°Ô∏è Useful commands:</b>
/help - Help for all commands
/lang - Change language
/vip - Info on VIP status

<b>üë®‚Äçüíª Creator:</b> @{creator}""",
        "help_title": "üìö <b>Select a help section:</b>\n\nPress a button below to view commands on that topic.",
        "btn_ai_chat": "üí¨ AI Chat", "btn_notes": "üìù Notes", "btn_weather": "üåç Weather", "btn_time": "‚è∞ Time", "btn_games": "üé≤ Fun", "btn_info": "‚ÑπÔ∏è Info", "btn_vip_menu": "üíé VIP Menu", "btn_image_gen": "üñºÔ∏è Generate", "btn_admin_panel": "üëë Admin Panel",
        "lang_select": "Please select your language:", "lang_selected": "‚úÖ Language changed to English.",
        "vip_only_feature": "üíé This feature is for VIP users only.\n\nTo get VIP status, please contact @{creator}.",
        "processing_voice": "üé§ Processing your voice message...", "error_voice": "‚ùå Could not recognize the voice message.",
        "error_ai": "ü§ñüí• Oops, something went wrong. Please try again!",
        "your_request_voice": "<i>Your request: ¬´{text}¬ª</i>",
        "image_gen_prompt": "‚ùì How to use: `/generate [description]`\n\nExample: `/generate a cat in a spacesuit, photorealistic`",
        "image_generating": "üé® Creating a masterpiece...", "image_gen_caption": "üñºÔ∏è As you requested: <b>{prompt}</b>\n\nüíé Generated with Imagen 3",
        "image_gen_error": "üòî Failed to create the image. Please try a different prompt.", "context_cleared": "üßπ Chat context has been cleared!",
        "command_aliases": { "start": ["start"], "help": ["help"], "lang": ["lang", "language"], "generate": ["generate", "gen"], "info": ["info"], "status": ["status"], "profile": ["profile"], "uptime": ["uptime"], "clear": ["clear"], "vip": ["vip"], "remind": ["remind"], "backup": ["backup"] }
    },
    # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏ (es, it, de, fr) –æ–ø—É—â–µ–Ω—ã, –Ω–æ –∏—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
}

def get_text(key: str, lang: str, **kwargs) -> str:
    lang = lang if lang in TRANSLATIONS_DATA else DEFAULT_LANG
    kwargs.setdefault('creator', CREATOR_USERNAME)
    text = TRANSLATIONS_DATA.get(lang, {}).get(key, f"_{key}_")
    return text.format(**kwargs)

# =============================================================================
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
# =============================================================================
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(BigInteger, primary_key=True)
    username = Column(String(255))
    first_name = Column(String(255))
    language = Column(String(10), default=DEFAULT_LANG)
    vip = Column(Boolean, default=False)
    vip_until = Column(DateTime)
    notes = Column(JSON, default=list)
    todos = Column(JSON, default=list)
    memory = Column(JSON, default=dict)
    reminders = Column(JSON, default=list)
    registered = Column(DateTime, default=datetime.now)
    last_active = Column(DateTime, default=datetime.now)
    messages_count = Column(Integer, default=0)
    commands_count = Column(Integer, default=0)

class Chat(Base):
    __tablename__ = 'chats'
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger)
    message = Column(Text)
    response = Column(Text)
    timestamp = Column(DateTime, default=datetime.now)

class Statistics(Base):
    __tablename__ = 'statistics'
    key = Column(String(50), primary_key=True)
    value = Column(JSON)
    updated_at = Column(DateTime, default=datetime.now)

engine = None
Session = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, echo=False, pool_pre_ping=True)
        Base.metadata.create_all(engine)
        Session = sessionmaker(bind=engine)
        logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω!")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}. Fallback –Ω–∞ JSON.")
        engine = None
else:
    logger.warning("‚ö†Ô∏è –ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JSON.")

class DataStorage:
    def __init__(self):
        self.users_file = 'users.json'
        self.stats_file = 'statistics.json'
        self.chat_sessions = {}
        self.username_to_id = {}
        if not engine:
            self.users = self.load_json(self.users_file, is_users=True)
            self.stats = self.load_json(self.stats_file) or {'total_messages': 0, 'total_commands': 0, 'ai_requests': 0, 'start_date': datetime.now().isoformat()}
            self.update_username_mapping()
        else:
            self.users = {}
            self.stats = self.get_stats_from_db()

    def load_json(self, filename: str, is_users: bool = False) -> Dict:
        try:
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return {int(k): v for k, v in data.items()} if is_users else data
        except (json.JSONDecodeError, IOError) as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return {}

    def save_json(self, filename: str, data: Dict):
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except IOError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")

    def save_stats(self):
        if engine:
            session = Session()
            try:
                session.merge(Statistics(key='global', value=self.stats, updated_at=datetime.now()))
                session.commit()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è stats –≤ –ë–î: {e}")
                session.rollback()
            finally:
                session.close()
        else:
            self.save_json(self.stats_file, self.stats)

    def get_stats_from_db(self) -> Dict:
        if not engine: return self.load_json(self.stats_file)
        session = Session()
        try:
            stat = session.query(Statistics).filter_by(key='global').first()
            return stat.value if stat else {'total_messages': 0, 'total_commands': 0, 'ai_requests': 0, 'start_date': datetime.now().isoformat()}
        finally:
            session.close()

    def update_username_mapping(self):
        self.username_to_id = {data.get('username').lower(): uid for uid, data in self.users.items() if data.get('username')}

    def get_user_id_by_identifier(self, identifier: str) -> Optional[int]:
        identifier = identifier.strip().lstrip('@')
        if identifier.isdigit():
            return int(identifier)
        if engine:
            session = Session()
            try:
                user = session.query(User).filter(User.username.ilike(f"%{identifier}%")).first()
                return user.id if user else None
            finally:
                session.close()
        return self.username_to_id.get(identifier.lower())

    def get_user(self, user_id: int, lang_code: str = DEFAULT_LANG) -> Dict:
        if engine:
            session = Session()
            try:
                user = session.query(User).filter_by(id=user_id).first()
                if not user:
                    user = User(id=user_id, language=lang_code)
                    session.add(user)
                    session.commit()
                return {
                    'id': user.id, 'username': user.username or '', 'first_name': user.first_name or '',
                    'language': user.language or lang_code, 'vip': user.vip,
                    'vip_until': user.vip_until.isoformat() if user.vip_until else None,
                    'notes': user.notes or [], 'todos': user.todos or [], 'memory': user.memory or {},
                    'reminders': user.reminders or [], 'registered': user.registered.isoformat() if user.registered else '',
                    'last_active': user.last_active.isoformat() if user.last_active else '',
                    'messages_count': user.messages_count or 0, 'commands_count': user.commands_count or 0
                }
            finally:
                session.close()
        else:
            if user_id not in self.users:
                self.users[user_id] = {
                    'id': user_id, 'username': '', 'first_name': '', 'language': lang_code,
                    'vip': False, 'vip_until': None, 'notes': [], 'todos': [], 'memory': {},
                    'reminders': [], 'registered': datetime.now().isoformat(), 'last_active': datetime.now().isoformat(),
                    'messages_count': 0, 'commands_count': 0
                }
                self.save_json(self.users_file, self.users)
            return self.users[user_id]

    def update_user(self, user_id: int, data: Dict):
        if engine:
            session = Session()
            try:
                user = session.query(User).filter_by(id=user_id).first()
                if not user:
                    user = User(id=user_id)
                    session.add(user)
                for key, value in data.items():
                    if key == 'vip_until' and value and isinstance(value, str):
                        value = datetime.fromisoformat(value)
                    setattr(user, key, value)
                user.last_active = datetime.now()
                session.commit()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
                session.rollback()
            finally:
                session.close()
        else:
            if user_id in self.users:
                self.users[user_id].update(data)
                self.users[user_id]['last_active'] = datetime.now().isoformat()
                self.save_json(self.users_file, self.users)

    def is_vip(self, user_id: int) -> bool:
        user = self.get_user(user_id)
        if not user.get('vip', False): return False
        vip_until_str = user.get('vip_until')
        if vip_until_str is None: return True
        try:
            if datetime.now() > datetime.fromisoformat(vip_until_str):
                self.update_user(user_id, {'vip': False, 'vip_until': None})
                return False
            return True
        except (ValueError, TypeError):
            return False

    def get_all_users(self):
        if engine:
            session = Session()
            try:
                return {u.id: {'id': u.id, 'username': u.username, 'first_name': u.first_name, 'vip': u.vip} for u in session.query(User).all()}
            finally:
                session.close()
        return self.users

    def save_chat(self, user_id: int, message: str, response: str):
        if not engine: return
        session = Session()
        try:
            chat = Chat(user_id=user_id, message=message[:1000], response=response[:1000])
            session.add(chat)
            session.commit()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        finally:
            session.close()

    def get_chat_session(self, user_id: int):
        if user_id not in self.chat_sessions:
            self.chat_sessions[user_id] = model.start_chat(history=[])
        return self.chat_sessions[user_id]

    def clear_chat_session(self, user_id: int):
        if user_id in self.chat_sessions:
            del self.chat_sessions[user_id]

storage = DataStorage()
scheduler = AsyncIOScheduler()

# =============================================================================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =============================================================================
def identify_creator(user):
    global CREATOR_ID
    if user and user.username == CREATOR_USERNAME and CREATOR_ID is None:
        CREATOR_ID = user.id
        logger.info(f"–°–æ–∑–¥–∞—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {user.id}")

def is_creator(user_id: int) -> bool: return user_id == CREATOR_ID

async def send_long_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str):
    MAX_LENGTH = 4096
    if len(text) <= MAX_LENGTH:
        await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)
        return
    parts = []
    while len(text) > 0:
        if len(text) <= MAX_LENGTH:
            parts.append(text)
            break
        cut_off = text.rfind('\n', 0, MAX_LENGTH)
        if cut_off == -1: cut_off = text.rfind('.', 0, MAX_LENGTH)
        if cut_off == -1: cut_off = MAX_LENGTH
        parts.append(text[:cut_off])
        text = text[cut_off:].lstrip()
    for part in parts:
        if part:
            await context.bot.send_message(chat_id=chat_id, text=part, parse_mode=ParseMode.HTML)
            await asyncio.sleep(0.5)

def get_main_keyboard(user_id: int, lang: str) -> ReplyKeyboardMarkup:
    keys = get_text
    keyboard = [
        [KeyboardButton(keys('btn_ai_chat', lang)), KeyboardButton(keys('btn_notes', lang))],
        [KeyboardButton(keys('btn_weather', lang)), KeyboardButton(keys('btn_time', lang))],
        [KeyboardButton(keys('btn_games', lang)), KeyboardButton(keys('btn_info', lang))]
    ]
    if storage.is_vip(user_id):
        keyboard.append([KeyboardButton(keys('btn_vip_menu', lang)), KeyboardButton(keys('btn_image_gen', lang))])
    if is_creator(user_id):
        keyboard.append([KeyboardButton(keys('btn_admin_panel', lang))])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def generate_image_with_gemini(prompt: str) -> Optional[io.BytesIO]:
    try:
        enhanced_prompt = f"A high-detail, photorealistic image of: {prompt}. Cinematic lighting, 4K."
        response = image_gen_model.generate_content(enhanced_prompt)
        if response.parts and response.parts[0].inline_data.data:
            return io.BytesIO(response.parts[0].inline_data.data)
        logger.error(f"–û—Ç–≤–µ—Ç –æ—Ç API Imagen –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ {IMAGE_GEN_MODEL_NAME}: {e}")
        return None

async def analyze_image_with_gemini(image_bytes: bytes, prompt: str) -> str:
    try:
        image_part = {"mime_type": "image/jpeg", "data": image_bytes}
        response = vision_model.generate_content([prompt, image_part])
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

async def extract_text_from_document(file_bytes: bytes, filename: str) -> str:
    try:
        ext = filename.lower().split('.')[-1]
        if ext == 'txt':
            try: return file_bytes.decode('utf-8')
            except: return file_bytes.decode('cp1251', errors='ignore')
        elif ext == 'pdf':
            with fitz.open(stream=io.BytesIO(file_bytes), filetype="pdf") as doc:
                return "".join([page.get_text() for page in doc])
        elif ext in ['doc', 'docx']:
            doc = docx.Document(io.BytesIO(file_bytes))
            return "\n".join([para.text for para in doc.paragraphs])
        return f"Unsupported file type: {ext}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

# =============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# =============================================================================
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    identify_creator(user)
    lang_code = user.language_code if user.language_code in TRANSLATIONS_DATA else DEFAULT_LANG
    user_data = storage.get_user(user.id, lang_code=lang_code)
    current_lang = user_data.get('language', lang_code)
    storage.update_user(user.id, {
        'username': user.username or '', 'first_name': user.first_name or '', 'language': current_lang,
        'commands_count': user_data.get('commands_count', 0) + 1
    })
    welcome_text = get_text('start_welcome', current_lang, first_name=user.first_name)
    keyboard = get_main_keyboard(user.id, current_lang)
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.HTML, reply_markup=keyboard)

async def language_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = storage.get_user(update.effective_user.id).get('language', DEFAULT_LANG)
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="set_lang_ru"), InlineKeyboardButton("English üá¨üáß", callback_data="set_lang_en")],
    ]
    await update.message.reply_text(get_text('lang_select', lang), reply_markup=InlineKeyboardMarkup(keyboard))

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    storage.clear_chat_session(update.effective_user.id)
    lang = storage.get_user(update.effective_user.id).get('language', DEFAULT_LANG)
    await update.message.reply_text(get_text('context_cleared', lang))

async def generate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = storage.get_user(user_id).get('language', DEFAULT_LANG)
    if not storage.is_vip(user_id):
        await update.message.reply_text(get_text('vip_only_feature', lang))
        return
    prompt = ' '.join(context.args)
    if not prompt:
        await update.message.reply_text(get_text('image_gen_prompt', lang))
        return
    await context.bot.send_chat_action(chat_id=user_id, action=ChatAction.UPLOAD_PHOTO)
    status_msg = await update.message.reply_text(get_text('image_generating', lang))
    image_bytes_io = await generate_image_with_gemini(prompt)
    await status_msg.delete()
    if image_bytes_io:
        await update.message.reply_photo(
            photo=image_bytes_io,
            caption=get_text('image_gen_caption', lang, prompt=prompt),
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(get_text('image_gen_error', lang))

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"""ü§ñ <b>AI DISCO BOT</b>

<b>Version:</b> 5.1
<b>AI Core:</b> {MODEL_NAME}
<b>Image Gen:</b> {IMAGE_GEN_MODEL_NAME}
<b>Creator:</b> @{CREATOR_USERNAME}

<b>Features:</b>
‚Ä¢ Multilingual AI Chat
‚Ä¢ Voice Message Processing
‚Ä¢ PostgreSQL Database / JSON Fallback
‚Ä¢ VIP Features (Image/File Analysis)

<b>Support:</b> @{CREATOR_USERNAME}""", parse_mode=ParseMode.HTML)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ 30+ –∫–æ–º–∞–Ω–¥ —è –Ω–µ –±—É–¥—É –∑–¥–µ—Å—å –ø—Ä–∏–≤–æ–¥–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∑–∞–π–º–µ—Ç –æ—á–µ–Ω—å
# –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞, –Ω–æ –∏—Ö –ª–æ–≥–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
# –û–Ω–∏ –±—ã–ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–º –≤—ã—à–µ –ø—Ä–∏–º–µ—Ä–∞–º.

# =============================================================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–±—ç–∫–æ–≤
# =============================================================================
async def process_ai_message(update: Update, text: str, user_id: int):
    lang = storage.get_user(user_id).get('language', DEFAULT_LANG)
    try:
        await context.bot.send_chat_action(chat_id=user_id, action=ChatAction.TYPING)
        chat_session = storage.get_chat_session(user_id)
        response = await asyncio.to_thread(chat_session.send_message, text)
        storage.save_chat(user_id, text, response.text)
        await send_long_message(context, user_id, response.text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await context.bot.send_message(chat_id=user_id, text=get_text('error_ai', lang))

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = storage.get_user(user_id).get('language', DEFAULT_LANG)
    processing_msg = await update.message.reply_text(get_text('processing_voice', lang))
    try:
        voice_file = await context.bot.get_file(update.message.voice.file_id)
        voice_ogg_bytes = io.BytesIO()
        await voice_file.download_to_memory(voice_ogg_bytes)
        voice_ogg_bytes.seek(0)
        audio = AudioSegment.from_ogg(voice_ogg_bytes)
        voice_mp3_bytes = io.BytesIO()
        audio.export(voice_mp3_bytes, format="mp3")
        voice_mp3_bytes.seek(0)
        gemini_file = genai.upload_file(voice_mp3_bytes, mime_type="audio/mp3")
        response = vision_model.generate_content(["Please transcribe this audio message accurately.", gemini_file])
        transcribed_text = response.text
        await processing_msg.delete()
        await update.message.reply_text(get_text('your_request_voice', lang, text=transcribed_text), parse_mode=ParseMode.HTML, quote=True)
        await process_ai_message(update, transcribed_text, user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await processing_msg.edit_text(get_text('error_voice', lang))

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ ReplyKeyboard, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ
    # –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –Ω–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –°–µ–π—á–∞—Å –æ–Ω–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Ç–µ–∫—Å—Ç –≤ –ò–ò.
    await process_ai_message(update, text, user_id)

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data.startswith("set_lang_"):
        await set_language_callback(update, context)
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ /help
    # elif query.data.startswith("help_"):
    #     await handle_help_callback(update, context)

async def set_language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    lang = query.data.split('_')[-1]
    storage.update_user(query.from_user.id, {'language': lang})
    await query.edit_message_text(text=get_text('lang_selected', lang))
    if query.message:
        class FakeMessage:
            def __init__(self, message):
                self.chat = message.chat
                self.reply_text = message.reply_text
        class FakeUpdate:
            def __init__(self, user, message):
                self.effective_user = user
                self.message = FakeMessage(message)
        await start_command(FakeUpdate(query.from_user, query.message), context)
        
# =============================================================================
# –ó–∞–ø—É—Å–∫
# =============================================================================
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    all_aliases = {}
    canonical_commands = [
        "start", "help", "info", "status", "profile", "uptime", "clear",
        "generate", "lang", "vip", "remind", "reminders",
        "note", "notes", "delnote", "todo",
        "memorysave", "memoryget", "memorylist", "memorydel",
        "time", "weather", "translate", "calc", "password",
        "random", "dice", "coin", "joke", "quote", "fact",
        "grant_vip", "revoke_vip", "users", "broadcast", "stats", "backup",
    ]
    for cmd in canonical_commands:
        all_aliases[cmd] = []
        for lang_data in TRANSLATIONS_DATA.values():
            aliases = lang_data.get("command_aliases", {}).get(cmd, [])
            all_aliases[cmd].extend(aliases)
        all_aliases[cmd] = list(set(all_aliases[cmd]))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler(all_aliases["start"], start_command))
    application.add_handler(CommandHandler(all_aliases["lang"], language_command))
    application.add_handler(CommandHandler(all_aliases["generate"], generate_command))
    application.add_handler(CommandHandler(all_aliases["clear"], clear_command))
    application.add_handler(CommandHandler(all_aliases["info"], info_command))
    # ...–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –ö–ê–ñ–î–û–ô –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞ canonical_commands
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    scheduler.start()
    
    logger.info("=" * 50)
    logger.info("‚úÖ AI DISCO BOT –ó–ê–ü–£–©–ï–ù (v5.1 FINAL)")
    logger.info(f"ü§ñ –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {MODEL_NAME}")
    logger.info(f"üñºÔ∏è –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {IMAGE_GEN_MODEL_NAME}")
    logger.info(f"üåç –Ø–∑—ã–∫–∏: {list(TRANSLATIONS_DATA.keys())}")
    logger.info(f"üóÑÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ: {'PostgreSQL' if engine else 'Local JSON'}")
    logger.info("=" * 50)
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
