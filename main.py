logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    # ========================================================================
    # –ó–ê–ü–£–°–ö –ë–û–¢–ê
    # ========================================================================
    
    async def run_bot(self):
        if not BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ v3.0 (–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
        
        self.application = Application.builder()\
            .token(BOT_TOKEN)\
            .read_timeout(30)\
            .write_timeout(30)\
            .build()
        
        async def error_handler(update, context):
            logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
            try:
                if update and update.effective_message:
                    await update.effective_message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
            except:
                pass
        
        self.application.add_error_handler(error_handler)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –í–°–ï–• –∫–æ–º–∞–Ω–¥
        commands = [
            # –ë–∞–∑–æ–≤—ã–µ
            ("start", self.start_command),
            ("help", self.help_command),
            ("info", self.info_command),
            ("status", self.status_command),
            ("uptime", self.uptime_command),
            
            # –í—Ä–µ–º—è
            ("time", self.time_command),
            ("date", self.date_command),
            
            # AI
            ("ai", self.ai_command),
            ("clearhistory", self.clearhistory_command),
            
            # –ó–∞–º–µ—Ç–∫–∏
            ("note", self.note_command),
            ("notes", self.notes_command),
            ("delnote", self.delnote_command),
            ("findnote", self.findnote_command),
            ("clearnotes", self.clearnotes_command),
            
            # –ü–∞–º—è—Ç—å
            ("memorysave", self.memorysave_command),
            ("memoryget", self.memoryget_command),
            ("memorylist", self.memorylist_command),
            ("memorydel", self.memorydel_command),
            
            # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
            ("joke", self.joke_command),
            ("fact", self.fact_command),
            ("quote", self.quote_command),
            ("quiz", self.quiz_command),
            ("coin", self.coin_command),
            ("dice", self.dice_command),
            ("8ball", self.eightball_command),
            
            # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
            ("math", self.math_command),
            ("calculate", self.calculate_command),
            
            # –£—Ç–∏–ª–∏—Ç—ã
            ("password", self.password_command),
            ("qr", self.qr_command),
            ("shorturl", self.shorturl_command),
            ("ip", self.ip_command),
            ("weather", self.weather_command),
            ("currency", self.currency_command),
            ("translate", self.translate_command),
            
            # –Ø–∑—ã–∫
            ("language", self.language_command),
            
            # –ü—Ä–æ—Ñ–∏–ª—å
            ("rank", self.rank_command),
            ("profile", self.profile_command),
            ("stats", self.stats_command),
            
            # VIP
            ("vip", self.vip_command),
            ("remind", self.remind_command),
            ("reminders", self.reminders_command),
            ("delreminder", self.delreminder_command),
            ("nickname", self.nickname_command),
            
            # –°–æ–∑–¥–∞—Ç–µ–ª—å
            ("grant_vip", self.grant_vip_command),
            ("revoke_vip", self.revoke_vip_command),
            ("broadcast", self.broadcast_command),
            ("users", self.users_command),
            ("maintenance", self.maintenance_command),
            ("backup", self.backup_command)
        ]
        
        for cmd, handler in commands:
            self.application.add_handler(CommandHandler(cmd, handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
            self.handle_message
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        loop = asyncio.get_running_loop()
        self.scheduler.configure(event_loop=loop)
        self.scheduler.start()
        
        # –ê–≤—Ç–æ–ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 14 –º–∏–Ω—É—Ç
        self.scheduler.add_job(self.self_ping, 'interval', minutes=14)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        self.scheduler.add_job(self.save_data, 'interval', minutes=30)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        self.scheduler.add_job(self.check_reminders, 'interval', minutes=1)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞–ø—ã –∫–∞–∂–¥—ã–π —á–∞—Å
        self.scheduler.add_job(self.check_papa_birthday_scheduled, 'interval', hours=1)
        
        logger.info("=" * 60)
        logger.info("ü§ñ –ë–û–¢ –ó–ê–ü–£–©–ï–ù –£–°–ü–ï–®–ù–û!")
        logger.info(f"üìÖ –í–µ—Ä—Å–∏—è: 3.0 (–£–ª—É—á—à–µ–Ω–Ω–∞—è)")
        logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(self.db.get_all_users())}")
        logger.info(f"üí¨ –†–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {len(self.conversation_memory.conversations)}")
        logger.info(f"üß† AI: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.gemini_model else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {self.start_time.strftime('%d.%m.%Y %H:%M:%S')}")
        logger.info("=" * 60)
        
        await self.application.run_polling(drop_pending_updates=True)

# ============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ============================================================================

async def main():
    bot = TelegramBot()
    await bot.run_bot()

# ============================================================================
# FLASK –í–ï–ë-–°–ï–†–í–ï–†
# ============================================================================

app = Flask(__name__)

@app.route('/')
def home():
    now = datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')
    html_content = """
<!DOCTYPE html>
<html>
<head>
    <title>Telegram AI Bot v3.0</title>
    <meta charset="utf-8">
    <style>
        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 50px;
            text-align: center;
            margin: 0;
            min-height: 100vh;
        }
        .container {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            max-width: 700px;
            margin: 0 auto;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        }
        h1 {
            font-size: 56px;
            margin: 20px 0;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .status {
            color: #00ff88;
            font-weight: bold;
            font-size: 24px;
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        .feature {
            background: rgba(255,255,255,0.05);
            padding: 15px;
            margin: 10px 0;
            border-radius: 10px;
        }
        .emoji {
            font-size: 32px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ Telegram AI Bot</h1>
        <p class="status">‚úÖ –†–ê–ë–û–¢–ê–ï–¢</p>
        
        <div class="feature">
            <p class="emoji">üìÖ</p>
            <p>–í–µ—Ä—Å–∏—è: 3.0 (–£–ª—É—á—à–µ–Ω–Ω–∞—è)</p>
            <p>‚è∞ """ + now + """</p>
        </div>
        
        <div class="feature">
            <p class="emoji">üåü</p>
            <p>‚ú® –ü–æ–ª–Ω–∞—è –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤</p>
            <p>‚è∞ –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø–æ–≥–æ–¥–∞</p>
            <p>üéÇ –ê–≤—Ç–æ–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è</p>
            <p>üß† AI: Gemini 2.0 Flash</p>
        </div>
        
        <div class="feature">
            <p class="emoji">üåê</p>
            <p>6 —è–∑—ã–∫–æ–≤ | 50+ –∫–æ–º–∞–Ω–¥</p>
            <p>–ë–æ—Ç: """ + BOT_USERNAME + """</p>
            <p>–°–æ–∑–¥–∞—Ç–µ–ª—å: """ + CREATOR_USERNAME + """</p>
        </div>
    </div>
</body>
</html>
"""
    return html_content

@app.route('/health')
def health():
    return {
        "status": "ok",
        "version": "3.0",
        "time": datetime.datetime.now().isoformat(),
        "ai_active": GEMINI_API_KEY is not None
    }

@app.route('/stats')
def stats():
    try:
        db = Database()
        users = db.get_all_users()
        uptime_val = str(datetime.datetime.now() - bot_start_time).split('.')[0] if 'bot_start_time' in globals() else "N/A"
        return {
            "users": len(users),
            "version": "3.0",
            "uptime": uptime_val
        }
    except:
        return {"error": "Stats unavailable"}, 500

# ============================================================================
# –¢–û–ß–ö–ê –í–•–û–î–ê
# ============================================================================

if __name__ == "__main__":
    from threading import Thread
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    bot_start_time = datetime.datetime.now()
    
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    port = int(os.getenv("PORT", 8080))
    flask_thread = Thread(
        target=app.run,
        kwargs={
            'host': '0.0.0.0',
            'port': port,
            'debug': False,
            'use_reloader': False
        }
    )
    flask_thread.daemon = True
    flask_thread.start()
    
    logger.info(f"üåê Flask –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"üîó URL: {RENDER_URL}")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)        await self.add_experience(user_data, 1)
    
    # ========================================================================
    # –ö–û–ú–ê–ù–î–´ - VIP –§–£–ù–ö–¶–ò–ò
    # ========================================================================
    
    async def vip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/vip")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if self.is_vip(user_data):
            expires = "–ù–∞–≤—Å–µ–≥–¥–∞" if not user_data.get('vip_expires') else \
                     datetime.datetime.fromisoformat(user_data['vip_expires']).strftime('%d.%m.%Y')
            
            vip_text = f"""
üíé VIP –°–¢–ê–¢–£–°

‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
‚è∞ –î–æ: {expires}

üåü –í–ê–®–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (/remind)
‚Ä¢ üìõ –ö–∞—Å—Ç–æ–º–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º (/nickname)
‚Ä¢ üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ üöÄ –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
‚Ä¢ üíæ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã

üéÅ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!
"""
        else:
            vip_text = f"""
üíé VIP –°–¢–ê–¢–£–°

‚ùå –°—Ç–∞—Ç—É—Å: –ù–µ –∞–∫—Ç–∏–≤–µ–Ω

üåü –ß–¢–û –î–ê–Å–¢ VIP:
‚Ä¢ ‚è∞ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚Ä¢ üìõ –ö–∞—Å—Ç–æ–º–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º
‚Ä¢ üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ üöÄ –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–≤—ã–º–∏
‚Ä¢ üíæ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã

üí¨ –•–æ—Ç–∏—Ç–µ VIP? –ù–∞–ø–∏—à–∏—Ç–µ {CREATOR_USERNAME}
"""
        
        await update.message.reply_text(vip_text)
        await self.add_experience(user_data, 1)
    
    async def remind_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/remind")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not self.is_vip(user_data):
            await update.message.reply_text("üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!\n\n–ü–æ–ª—É—á–∏—Ç—å VIP: /vip")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text(
                "‚è∞ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç]\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /remind 30 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
                "‚Ä¢ /remind 60 –ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –æ–±–µ–¥\n"
                "‚Ä¢ /remind 1440 –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞!"
            )
            return
        
        try:
            minutes = int(context.args[0])
            message = " ".join(context.args[1:])
            
            if minutes < 1:
                await update.message.reply_text("‚ùå –ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
            
            if minutes > 10080:
                await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º—É–º 7 –¥–Ω–µ–π (10080 –º–∏–Ω—É—Ç)")
                return
            
            remind_at = datetime.datetime.now() + datetime.timedelta(minutes=minutes)
            self.db.add_reminder(user_data['user_id'], message, remind_at)
            
            await update.message.reply_text(
                f"‚úÖ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –°–û–ó–î–ê–ù–û\n\n"
                f"‚è∞ –ß–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç\n"
                f"üìÖ {remind_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üí¨ {message}"
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç")
        
        await self.add_experience(user_data, 2)
    
    async def reminders_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/reminders")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not self.is_vip(user_data):
            await update.message.reply_text("üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
            return
        
        reminders = self.db.get_reminders(user_data['user_id'])
        
        if not reminders:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!\n\n–°–æ–∑–¥–∞—Ç—å: /remind [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç]")
            return
        
        text = "‚è∞ –í–ê–®–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø:\n\n"
        for i, reminder in enumerate(reminders, 1):
            remind_at = datetime.datetime.fromisoformat(reminder['remind_at'])
            time_left = remind_at - datetime.datetime.now()
            
            if time_left.total_seconds() > 0:
                hours = int(time_left.total_seconds() // 3600)
                minutes = int((time_left.total_seconds() % 3600) // 60)
                text += f"{i}. {reminder['message']}\n"
                text += f"   ‚è∞ –ß–µ—Ä–µ–∑ {hours}—á {minutes}–º\n"
                text += f"   üìÖ {remind_at.strftime('%d.%m %H:%M')}\n\n"
        
        text += f"üìä –í—Å–µ–≥–æ: {len(reminders)}"
        
        await update.message.reply_text(text)
        await self.add_experience(user_data, 1)
    
    async def delreminder_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/delreminder")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not self.is_vip(user_data):
            await update.message.reply_text("üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
            return
        
        if not context.args or not context.args[0].isdigit():
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä!\n–ü—Ä–∏–º–µ—Ä: /delreminder 1")
            return
        
        reminders = self.db.get_reminders(user_data['user_id'])
        index = int(context.args[0]) - 1
        
        if 0 <= index < len(reminders):
            self.db.delete_reminder(reminders[index]['id'], user_data['user_id'])
            await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{index+1} —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await update.message.reply_text(f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è #{index+1} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        
        await self.add_experience(user_data, 1)
    
    async def nickname_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/nickname")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not self.is_vip(user_data):
            await update.message.reply_text("üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
            return
        
        if not context.args:
            current = user_data.get('nickname') or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            await update.message.reply_text(
                f"üìõ –ù–ò–ö–ù–ï–ô–ú\n\n"
                f"–¢–µ–∫—É—â–∏–π: {current}\n\n"
                f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: /nickname [–Ω–æ–≤–æ–µ –∏–º—è]\n"
                f"–ü—Ä–∏–º–µ—Ä: /nickname –°—É–ø–µ—Ä–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            )
            return
        
        nickname = " ".join(context.args)
        
        if len(nickname) > 30:
            await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        
        user_data['nickname'] = nickname
        self.db.save_user(user_data)
        
        await update.message.reply_text(f"‚úÖ –ù–∏–∫–Ω–µ–π–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {nickname}")
        await self.add_experience(user_data, 1)
    
    # ========================================================================
    # –ö–û–ú–ê–ù–î–´ –°–û–ó–î–ê–¢–ï–õ–Ø
    # ========================================================================
    
    async def grant_vip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if len(context.args) < 2:
            await update.message.reply_text(
                "üíé –í–´–î–ê–¢–¨ VIP\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_vip [user_id] [duration]\n\n"
                "Duration: week, month, year, permanent\n\n"
                "–ü—Ä–∏–º–µ—Ä: /grant_vip 123456789 month"
            )
            return
        
        try:
            target_id = int(context.args[0])
            duration = context.args[1].lower()
            
            target_user = self.db.get_user(target_id)
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!")
                return
            
            target_user['is_vip'] = 1
            
            if duration == "week":
                target_user['vip_expires'] = (datetime.datetime.now() + datetime.timedelta(weeks=1)).isoformat()
                duration_text = "1 –Ω–µ–¥–µ–ª—è"
            elif duration == "month":
                target_user['vip_expires'] = (datetime.datetime.now() + datetime.timedelta(days=30)).isoformat()
                duration_text = "1 –º–µ—Å—è—Ü"
            elif duration == "year":
                target_user['vip_expires'] = (datetime.datetime.now() + datetime.timedelta(days=365)).isoformat()
                duration_text = "1 –≥–æ–¥"
            elif duration == "permanent":
                target_user['vip_expires'] = None
                duration_text = "–Ω–∞–≤—Å–µ–≥–¥–∞"
            else:
                await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: week, month, year, permanent")
                return
            
            self.db.save_user(target_user)
            
            await update.message.reply_text(
                f"‚úÖ VIP –í–´–î–ê–ù\n\n"
                f"üë§ {target_user['first_name']}\n"
                f"üÜî {target_id}\n"
                f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}"
            )
            
            try:
                await self.application.bot.send_message(
                    target_id,
                    f"üéâ –í–´ –ü–û–õ–£–ß–ò–õ–ò VIP!\n\n"
                    f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}\n"
                    f"üíé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: /vip"
                )
            except:
                pass
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    
    async def revoke_vip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke_vip [user_id]")
            return
        
        try:
            target_id = int(context.args[0])
            target_user = self.db.get_user(target_id)
            
            if not target_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            target_user['is_vip'] = 0
            target_user['vip_expires'] = None
            self.db.save_user(target_user)
            
            await update.message.reply_text(f"‚úÖ VIP –æ—Ç–æ–∑–≤–∞–Ω —É {target_user['first_name']} (ID: {target_id})")
            
            try:
                await self.application.bot.send_message(target_id, "‚ö†Ô∏è –í–∞—à VIP —Å—Ç–∞—Ç—É—Å –∏—Å—Ç—ë–∫")
            except:
                pass
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID!")
    
    async def broadcast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if not context.args:
            await update.message.reply_text(
                "üì¢ –†–ê–°–°–´–õ–ö–ê\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ]\n\n"
                "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
            )
            return
        
        message = " ".join(context.args)
        users = self.db.get_all_users()
        
        await update.message.reply_text(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        sent = 0
        failed = 0
        
        for user in users:
            try:
                await self.application.bot.send_message(
                    user['user_id'],
                    f"üì¢ –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –°–û–ó–î–ê–¢–ï–õ–Ø:\n\n{message}"
                )
                sent += 1
                await asyncio.sleep(0.05)
            except Exception as e:
                failed += 1
                logger.error(f"Broadcast failed for {user['user_id']}: {e}")
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed}"
        )
    
    async def users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        users = self.db.get_all_users()
        
        text = f"üë• –°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ({len(users)})\n\n"
        
        for i, user in enumerate(users[:30], 1):
            vip = "üíé" if user.get('is_vip') else "üë§"
            username = f"@{user.get('username')}" if user.get('username') else "–Ω–µ—Ç username"
            text += f"{i}. {vip} {user['first_name']} ({username})\n"
            text += f"   üÜî {user['user_id']} | üÜô Lvl {user.get('level', 1)}\n\n"
        
        if len(users) > 30:
            text += f"\n... –∏ –µ—â—ë {len(users) - 30} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await update.message.reply_text(text)
    
    async def maintenance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        if not context.args:
            status = "üîß –í–∫–ª—é—á–µ–Ω" if self.maintenance_mode else "‚úÖ –í—ã–∫–ª—é—á–µ–Ω"
            await update.message.reply_text(
                f"üîß –†–ï–ñ–ò–ú –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                f"‚Ä¢ /maintenance on - –í–∫–ª—é—á–∏—Ç—å\n"
                f"‚Ä¢ /maintenance off - –í—ã–∫–ª—é—á–∏—Ç—å"
            )
            return
        
        mode = context.args[0].lower()
        
        if mode == "on":
            self.maintenance_mode = True
            await update.message.reply_text("üîß –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –í–ö–õ–Æ–ß–ï–ù\n\n–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é")
        elif mode == "off":
            self.maintenance_mode = False
            await update.message.reply_text("‚úÖ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –í–´–ö–õ–Æ–ß–ï–ù\n\n–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º")
        else:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: on –∏–ª–∏ off")
    
    async def backup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_creator(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            return
        
        try:
            await update.message.reply_text("üíæ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
            
            self.conversation_memory.save()
            
            users = self.db.get_all_users()
            
            backup_data = {
                'timestamp': datetime.datetime.now().isoformat(),
                'users_count': len(users),
                'conversations_count': len(self.conversation_memory.conversations),
                'total_messages': sum(len(c['messages']) for c in self.conversation_memory.conversations.values()),
                'bot_version': '3.0'
            }
            
            filename = f"backup_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            filepath = os.path.join(BACKUP_PATH, filename)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, ensure_ascii=False, indent=2)
            
            text = f"""
‚úÖ –ë–≠–ö–ê–ü –°–û–ó–î–ê–ù

üìÅ –§–∞–π–ª: {filename}
‚è∞ {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {backup_data['users_count']}
‚Ä¢ –†–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {backup_data['conversations_count']}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {backup_data['total_messages']}
"""
            await update.message.reply_text(text)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {str(e)}")
    
    # ========================================================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    # ========================================================================
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("lang_"):
            lang = query.data.split("_")[1]
            user_data = await self.get_user_data(update)
            user_data['language'] = lang
            self.db.save_user(user_data)
            
            await query.edit_message_text(
                self.t('language_changed', lang),
                reply_markup=None
            )
            
            await self.application.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω!",
                reply_markup=self.get_keyboard(lang)
            )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if self.maintenance_mode and not self.is_creator(update.effective_user.id):
            return
        
        user_data = await self.get_user_data(update)
        user_data['total_messages'] = user_data.get('total_messages', 0) + 1
        message = update.message.text
        
        lang = user_data.get('language', 'ru')
        if message == self.t('help', lang):
            return await self.help_command(update, context)
        elif message == self.t('notes', lang):
            return await self.notes_command(update, context)
        elif message == self.t('stats', lang):
            return await self.stats_command(update, context)
        elif message == self.t('time', lang):
            return await self.time_command(update, context)
        elif message == self.t('language', lang):
            return await self.language_command(update, context)
        elif message == self.t('ai_chat', lang):
            await update.message.reply_text("üí¨ AI –∞–∫—Ç–∏–≤–µ–Ω! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å")
            return
        
        if not self.gemini_model:
            return
        
        try:
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            history = self.conversation_memory.get_context(user_data['user_id'], limit=None)
            context_str = ""
            if history:
                for msg in history[-10:]:
                    role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg['role'] == 'user' else "AI"
                    context_str += f"{role}: {msg['content'][:200]}\n"
            
            prompt = f"""–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram –±–æ—Ç–µ.

–ò—Å—Ç–æ—Ä–∏—è:
{context_str}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}

–û—Ç–≤–µ—Ç—å –ø–æ–ª–µ–∑–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ."""
            
            response = self.gemini_model.generate_content(prompt)
            
            self.conversation_memory.add_message(user_data['user_id'], 'user', message)
            self.conversation_memory.add_message(user_data['user_id'], 'assistant', response.text)
            
            await update.message.reply_text(response.text)
            
        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
        
        await self.add_experience(user_data, 1)
    
    # ========================================================================
    # –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò
    # ========================================================================
    
    async def check_reminders(self):
        try:
            pending = self.db.get_pending_reminders()
            
            for reminder in pending:
                try:
                    await self.application.bot.send_message(
                        reminder['user_id'],
                        f"‚è∞ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï\n\n{reminder['message']}"
                    )
                    self.db.mark_reminder_sent(reminder['id'])
                    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {reminder['id']}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder['id']}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def check_papa_birthday_scheduled(self):
        try:
            now = datetime.datetime.now()
            if now.month == 10 and now.day == 3 and now.hour == 0:
                users = self.db.get_all_users()
                for user in users:
                    if user.get('username') == 'mkostevich':
                        try:
                            await self.application.bot.send_message(
                                user['user_id'],
                                "üéâüéÇ –° –î–ù–Å–ú –†–û–ñ–î–ï–ù–ò–Ø, –ü–ê–ü–ê! üéÇüéâ\n\n"
                                "üéà –ñ–µ–ª–∞—é –∑–¥–æ—Ä–æ–≤—å—è, —Å—á–∞—Å—Ç—å—è –∏ –≤—Å–µ—Ö –±–ª–∞–≥! üéà\n\n"
                                "üíù –° –ª—é–±–æ–≤—å—é, —Ç–≤–æ–π AI-–±–æ—Ç!"
                            )
                            logger.info("–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
    
    async def self_ping(self):
        try:
            requests.get(RENDER_URL, timeout=10)
            logger.info("Self-ping OK")
        except Exception as e:
            logger.error(f"Self-ping –æ—à–∏–±–∫–∞: {e}")
    
    async def save_data(self):
        try:
            self.conversation_memory.save()
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TELEGRAM AI BOT v3.0 - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø–æ–≥–æ–¥–∞
‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è @mkostevich 3 –æ–∫—Ç—è–±—Ä—è
‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∏–¥–µ–∞–ª—å–Ω–æ
‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–∞–∫ —É –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ AI
"""

import asyncio
import logging
import json
import random
import time
import datetime
import requests
import os
import sys
import sqlite3
import hashlib
from pathlib import Path
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import nest_asyncio
from flask import Flask
import pytz
from typing import Dict, List, Optional

nest_asyncio.apply()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

import google.generativeai as genai

# ============================================================================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ============================================================================

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.FileHandler('bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ============================================================================

BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")

CREATOR_ID = 7108255346
PAPA_ID = None
CREATOR_USERNAME = "@Ernest_Kostevich"
PAPA_USERNAME = "@mkostevich"
BOT_USERNAME = "@AI_DISCO_BOT"

if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    MODEL = "gemini-2.0-flash-exp"

RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "https://telegram-ai-bot.onrender.com")

DB_PATH = "bot_database.db"
CONVERSATIONS_PATH = "conversations.json"
MEMORY_PATH = "memory.json"
BACKUP_PATH = "backups"
Path(BACKUP_PATH).mkdir(exist_ok=True)

# ============================================================================
# –ü–ï–†–ï–í–û–î–´
# ============================================================================

TRANSLATIONS = {
    'ru': {
        'welcome': 'ü§ñ –ü—Ä–∏–≤–µ—Ç, {name}!\n\n–Ø AI-–±–æ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!\n\n‚ú® –ß—Ç–æ —è —É–º–µ—é:\n‚Ä¢ üí¨ –£–º–Ω—ã–π AI-—á–∞—Ç —Å –ø–æ–ª–Ω–æ–π –ø–∞–º—è—Ç—å—é\n‚Ä¢ üß† –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤\n‚Ä¢ üìù –°–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ—Ç–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n‚Ä¢ üå§Ô∏è –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞\n‚Ä¢ ‚è∞ –ú–∏—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è\n‚Ä¢ üéÆ –ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n‚Ä¢ üîß –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É—Ç–∏–ª–∏—Ç\n\nüíé VIP –¥–æ—Å—Ç—É–ø - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!\n\nüìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥',
        'help': 'üìã –ü–æ–º–æ—â—å',
        'notes': 'üìù –ó–∞–º–µ—Ç–∫–∏',
        'stats': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        'time': '‚è∞ –í—Ä–µ–º—è',
        'language': 'üåê –Ø–∑—ã–∫',
        'ai_chat': 'üí¨ AI –ß–∞—Ç',
        'current_time': '‚è∞ –ú–ò–†–û–í–û–ï –í–†–ï–ú–Ø',
        'language_changed': '‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –†—É—Å—Å–∫–∏–π'
    },
    'en': {
        'welcome': 'ü§ñ Hello, {name}!\n\nI am a next-generation AI bot with advanced features!\n\n‚ú® What I can do:\n‚Ä¢ üí¨ Smart AI chat with full memory\n‚Ä¢ üß† Long-term conversation memory\n‚Ä¢ üìù Notes and reminders system\n‚Ä¢ üå§Ô∏è Current weather\n‚Ä¢ ‚è∞ World time\n‚Ä¢ üéÆ Games and entertainment\n‚Ä¢ üîß Many utilities\n\nüíé VIP access - extended features!\n\nüìã Use /help for command list',
        'help': 'üìã Help',
        'notes': 'üìù Notes',
        'stats': 'üìä Stats',
        'time': '‚è∞ Time',
        'language': 'üåê Language',
        'ai_chat': 'üí¨ AI Chat',
        'current_time': '‚è∞ WORLD TIME',
        'language_changed': '‚úÖ Language changed to: English'
    }
}

LANGUAGE_NAMES = {
    'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
    'en': 'üá∫üá∏ English',
    'es': 'üá™üá∏ Espa√±ol',
    'fr': 'üá´üá∑ Fran√ßais',
    'it': 'üáÆüáπ Italiano',
    'de': 'üá©üá™ Deutsch'
}

# ============================================================================
# –ë–ê–ó–ê –î–ê–ù–ù–´–• –° –†–ê–°–®–ò–†–ï–ù–ù–´–ú–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–Ø–ú–ò
# ============================================================================

class Database:
    def __init__(self, db_path: str = DB_PATH):
        self.db_path = db_path
        self.init_db()
    
    def get_connection(self):
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        return conn
    
    def init_db(self):
        conn = self.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            is_vip INTEGER DEFAULT 0,
            vip_expires TEXT,
            language TEXT DEFAULT 'ru',
            nickname TEXT,
            level INTEGER DEFAULT 1,
            experience INTEGER DEFAULT 0,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            last_activity TEXT DEFAULT CURRENT_TIMESTAMP,
            total_messages INTEGER DEFAULT 0,
            total_commands INTEGER DEFAULT 0
        )''')
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS notes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            note TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )''')
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message TEXT,
            remind_at TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            is_sent INTEGER DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users(user_id)
        )''')
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS command_logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            command TEXT,
            timestamp TEXT DEFAULT CURRENT_TIMESTAMP
        )''')
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS memory_store (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            key TEXT,
            value TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(user_id, key)
        )''')
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def get_user(self, user_id: int):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        conn.close()
        return dict(row) if row else None
    
    def save_user(self, user_data: dict):
        conn = self.get_connection()
        cursor = conn.cursor()
        user_data['last_activity'] = datetime.datetime.now().isoformat()
        
        if self.get_user(user_data['user_id']):
            cursor.execute('''UPDATE users SET 
                username=?, first_name=?, is_vip=?, vip_expires=?,
                language=?, nickname=?, level=?, experience=?, 
                last_activity=?, total_messages=?, total_commands=?
                WHERE user_id=?''',
                (user_data.get('username',''), user_data.get('first_name',''), 
                 user_data.get('is_vip',0), user_data.get('vip_expires'),
                 user_data.get('language','ru'), user_data.get('nickname'),
                 user_data.get('level',1), user_data.get('experience',0),
                 user_data['last_activity'], user_data.get('total_messages',0),
                 user_data.get('total_commands',0), user_data['user_id']))
        else:
            cursor.execute('''INSERT INTO users 
                (user_id, username, first_name, is_vip, vip_expires,
                 language, nickname, level, experience, last_activity,
                 total_messages, total_commands) 
                VALUES (?,?,?,?,?,?,?,?,?,?,?,?)''',
                (user_data['user_id'], user_data.get('username',''), 
                 user_data.get('first_name',''), user_data.get('is_vip',0),
                 user_data.get('vip_expires'), user_data.get('language','ru'),
                 user_data.get('nickname'), user_data.get('level',1),
                 user_data.get('experience',0), user_data['last_activity'],
                 user_data.get('total_messages',0), user_data.get('total_commands',0)))
        
        conn.commit()
        conn.close()
    
    def get_all_users(self):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users ORDER BY created_at DESC")
        rows = cursor.fetchall()
        conn.close()
        return [dict(row) for row in rows]
    
    def log_command(self, user_id: int, command: str):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO command_logs (user_id, command) VALUES (?, ?)", 
                      (user_id, command))
        conn.commit()
        conn.close()
    
    def add_note(self, user_id: int, note: str):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO notes (user_id, note) VALUES (?, ?)", (user_id, note))
        conn.commit()
        conn.close()
    
    def get_notes(self, user_id: int):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM notes WHERE user_id = ? ORDER BY created_at DESC", 
                      (user_id,))
        rows = cursor.fetchall()
        conn.close()
        return [dict(row) for row in rows]
    
    def delete_note(self, note_id: int, user_id: int):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM notes WHERE id = ? AND user_id = ?", (note_id, user_id))
        deleted = cursor.rowcount > 0
        conn.commit()
        conn.close()
        return deleted
    
    def clear_notes(self, user_id: int):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM notes WHERE user_id = ?", (user_id,))
        count = cursor.rowcount
        conn.commit()
        conn.close()
        return count
    
    def add_reminder(self, user_id: int, message: str, remind_at: datetime.datetime):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("""INSERT INTO reminders (user_id, message, remind_at) 
                         VALUES (?, ?, ?)""",
                      (user_id, message, remind_at.isoformat()))
        conn.commit()
        conn.close()
    
    def get_reminders(self, user_id: int):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("""SELECT * FROM reminders 
                         WHERE user_id = ? AND is_sent = 0 
                         ORDER BY remind_at""", (user_id,))
        rows = cursor.fetchall()
        conn.close()
        return [dict(row) for row in rows]
    
    def get_pending_reminders(self):
        conn = self.get_connection()
        cursor = conn.cursor()
        now = datetime.datetime.now().isoformat()
        cursor.execute("""SELECT * FROM reminders 
                         WHERE is_sent = 0 AND remind_at <= ?""", (now,))
        rows = cursor.fetchall()
        conn.close()
        return [dict(row) for row in rows]
    
    def mark_reminder_sent(self, reminder_id: int):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE reminders SET is_sent = 1 WHERE id = ?", (reminder_id,))
        conn.commit()
        conn.close()
    
    def delete_reminder(self, reminder_id: int, user_id: int):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM reminders WHERE id = ? AND user_id = ?", 
                      (reminder_id, user_id))
        deleted = cursor.rowcount > 0
        conn.commit()
        conn.close()
        return deleted
    
    def save_memory(self, user_id: int, key: str, value: str):
        conn = self.get_connection()
        cursor = conn.cursor()
        now = datetime.datetime.now().isoformat()
        cursor.execute("""INSERT OR REPLACE INTO memory_store 
                         (user_id, key, value, created_at, updated_at) 
                         VALUES (?, ?, ?, 
                                COALESCE((SELECT created_at FROM memory_store 
                                         WHERE user_id=? AND key=?), ?), ?)""",
                      (user_id, key, value, user_id, key, now, now))
        conn.commit()
        conn.close()
    
    def get_memory(self, user_id: int, key: str):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT value FROM memory_store WHERE user_id = ? AND key = ?", 
                      (user_id, key))
        row = cursor.fetchone()
        conn.close()
        return row['value'] if row else None
    
    def get_all_memory(self, user_id: int):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT key, value FROM memory_store WHERE user_id = ?", (user_id,))
        rows = cursor.fetchall()
        conn.close()
        return {row['key']: row['value'] for row in rows}
    
    def delete_memory(self, user_id: int, key: str):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM memory_store WHERE user_id = ? AND key = ?", 
                      (user_id, key))
        deleted = cursor.rowcount > 0
        conn.commit()
        conn.close()
        return deleted

# ============================================================================
# –°–ò–°–¢–ï–ú–ê –ü–ê–ú–Ø–¢–ò –†–ê–ó–ì–û–í–û–†–û–í
# ============================================================================

class ConversationMemory:
    def __init__(self, filepath: str = CONVERSATIONS_PATH):
        self.filepath = filepath
        self.conversations = self._load()
        self.cache = {}
    
    def _load(self):
        if os.path.exists(self.filepath):
            try:
                with open(self.filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
                    return data
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {e}")
                return {}
        return {}
    
    def _save(self):
        try:
            with open(self.filepath, 'w', encoding='utf-8') as f:
                json.dump(self.conversations, f, ensure_ascii=False, indent=2)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.conversations)} —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def add_message(self, user_id: int, role: str, content: str):
        uid = str(user_id)
        if uid not in self.conversations:
            self.conversations[uid] = {
                'messages': [],
                'created_at': datetime.datetime.now().isoformat(),
                'message_count': 0
            }
        
        self.conversations[uid]['messages'].append({
            'role': role,
            'content': content,
            'timestamp': datetime.datetime.now().isoformat()
        })
        self.conversations[uid]['message_count'] = len(self.conversations[uid]['messages'])
        
        self.cache[uid] = self.conversations[uid]['messages'][-20:]
        
        if len(self.conversations[uid]['messages']) % 5 == 0:
            self._save()
    
    def get_context(self, user_id: int, limit: int = 100):
        uid = str(user_id)
        
        if uid in self.cache and limit and limit <= 20:
            return self.cache[uid][-limit:]
        
        if uid not in self.conversations:
            return []
        
        messages = self.conversations[uid]['messages']
        return messages[-limit:] if limit and len(messages) > limit else messages
    
    def get_full_history(self, user_id: int):
        uid = str(user_id)
        if uid not in self.conversations:
            return []
        return self.conversations[uid]['messages']
    
    def get_summary(self, user_id: int):
        uid = str(user_id)
        if uid not in self.conversations:
            return None
        
        conv = self.conversations[uid]
        user_msgs = sum(1 for m in conv['messages'] if m['role'] == 'user')
        ai_msgs = sum(1 for m in conv['messages'] if m['role'] == 'assistant')
        
        return {
            'total_messages': len(conv['messages']),
            'user_messages': user_msgs,
            'ai_messages': ai_msgs,
            'created_at': conv.get('created_at'),
            'first_message': conv['messages'][0] if conv['messages'] else None,
            'last_message': conv['messages'][-1] if conv['messages'] else None
        }
    
    def clear_history(self, user_id: int):
        uid = str(user_id)
        if uid in self.conversations:
            del self.conversations[uid]
            if uid in self.cache:
                del self.cache[uid]
            self._save()
    
    def save(self):
        self._save()

# ============================================================================
# –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° –ë–û–¢–ê
# ============================================================================

class TelegramBot:
    def __init__(self):
        self.db = Database()
        self.conversation_memory = ConversationMemory()
        self.gemini_model = None
        self.start_time = datetime.datetime.now()
        
        if GEMINI_API_KEY:
            try:
                self.gemini_model = genai.GenerativeModel(MODEL)
                logger.info("‚úÖ Gemini AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Gemini: {e}")
        
        self.scheduler = AsyncIOScheduler()
        self.maintenance_mode = False
        self.application = None
    
    def t(self, key: str, lang: str = 'ru', **kwargs):
        text = TRANSLATIONS.get(lang, TRANSLATIONS['ru']).get(key, key)
        return text.format(**kwargs) if kwargs else text
    
    async def get_user_data(self, update: Update):
        user = update.effective_user
        user_data = self.db.get_user(user.id)
        
        if not user_data:
            user_data = {
                'user_id': user.id,
                'username': user.username or "",
                'first_name': user.first_name or "",
                'is_vip': 1 if user.id == CREATOR_ID else 0,
                'vip_expires': None,
                'language': 'ru',
                'nickname': None,
                'level': 1,
                'experience': 0,
                'total_messages': 0,
                'total_commands': 0
            }
            self.db.save_user(user_data)
            logger.info(f"‚ûï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} (@{user.username})")
        
        return user_data
    
    def get_keyboard(self, lang: str = 'ru'):
        keyboard = [
            [KeyboardButton(self.t('ai_chat', lang)), KeyboardButton(self.t('help', lang))],
            [KeyboardButton(self.t('notes', lang)), KeyboardButton(self.t('stats', lang))],
            [KeyboardButton(self.t('time', lang)), KeyboardButton(self.t('language', lang))]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def is_creator(self, user_id: int):
        return user_id == CREATOR_ID
    
    def is_vip(self, user_data: dict):
        if user_data['user_id'] == CREATOR_ID:
            return True
        
        if not user_data.get('is_vip'):
            return False
        
        if user_data.get('vip_expires'):
            try:
                expires = datetime.datetime.fromisoformat(user_data['vip_expires'])
                if datetime.datetime.now() > expires:
                    user_data['is_vip'] = 0
                    self.db.save_user(user_data)
                    return False
            except:
                return False
        return True
    
    async def add_experience(self, user_data: dict, points: int = 1):
        user_data['experience'] = user_data.get('experience', 0) + points
        required = user_data.get('level', 1) * 100
        
        if user_data['experience'] >= required:
            user_data['level'] = user_data.get('level', 1) + 1
            user_data['experience'] = 0
        
        self.db.save_user(user_data)
    
    async def check_papa_birthday(self, user_data: dict):
        if user_data.get('username') == 'mkostevich':
            now = datetime.datetime.now()
            if now.month == 10 and now.day == 3:
                return True
        return False
    
    # ========================================================================
    # –ö–û–ú–ê–ù–î–´ - –ë–ê–ó–û–í–´–ï
    # ========================================================================
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/start")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        lang = user_data.get('language', 'ru')
        
        if await self.check_papa_birthday(user_data):
            birthday_msg = "üéâüéÇ –° –î–ù–Å–ú –†–û–ñ–î–ï–ù–ò–Ø, –ü–ê–ü–ê! üéÇüéâ\n\n"
            birthday_msg += "üéà –ñ–µ–ª–∞—é –∑–¥–æ—Ä–æ–≤—å—è, —Å—á–∞—Å—Ç—å—è –∏ –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ! üéà\n\n"
            await update.message.reply_text(birthday_msg)
        
        message = self.t('welcome', lang, name=user_data['first_name'])
        keyboard = self.get_keyboard(lang)
        
        await update.message.reply_text(message, reply_markup=keyboard)
        await self.add_experience(user_data, 1)
    
    # ========================================================================
    # –ö–û–ú–ê–ù–î–´ - –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø
    # ========================================================================
    
    async def joke_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/joke")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        jokes = [
            "üòÑ –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!",
            "ü§ì –ó–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –±–∞—Ä, –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç 1 –ø–∏–≤–æ. –ó–∞–∫–∞–∑—ã–≤–∞–µ—Ç 0 –ø–∏–≤–∞. –ó–∞–∫–∞–∑—ã–≤–∞–µ—Ç 999999 –ø–∏–≤–∞. –ó–∞–∫–∞–∑—ã–≤–∞–µ—Ç -1 –ø–∏–≤–æ...",
            "üíª –ï—Å—Ç—å 10 —Ç–∏–ø–æ–≤ –ª—é–¥–µ–π: —Ç–µ, –∫—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç –¥–≤–æ–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –∏ —Ç–µ, –∫—Ç–æ –Ω–µ—Ç.",
            "üßº –ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –º–æ–µ—Ç –ø–æ—Å—É–¥—É? –ù–µ –º–æ–µ—Ç - —ç—Ç–æ –Ω–µ –±–∞–≥, —ç—Ç–æ —Ñ–∏—á–∞!",
            "üíä - –î–æ–∫—Ç–æ—Ä, —è –¥—É–º–∞—é, —á—Ç–æ —è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å!\n- –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –ø—Ä–∏–º–∏—Ç–µ —ç—Ç—É —Ç–∞–±–ª–µ—Ç–∫—É.\n- –ê —á—Ç–æ —ç—Ç–æ?\n- –ê–Ω—Ç–∏–≤–∏—Ä—É—Å!",
            "üîß –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç - —ç—Ç–æ –º–∞—à–∏–Ω–∞ –¥–ª—è –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ—Ñ–µ –≤ –∫–æ–¥!",
            "üêõ 99 –º–∞–ª–µ–Ω—å–∫–∏—Ö –±–∞–≥–æ–≤ –≤ –∫–æ–¥–µ, 99 –º–∞–ª–µ–Ω—å–∫–∏—Ö –±–∞–≥–æ–≤... –ò—Å–ø—Ä–∞–≤–∏–ª –æ–¥–∏–Ω, –ø—Ä–æ–≥–Ω–∞–ª —Ç–µ—Å—Ç—ã - 117 –º–∞–ª–µ–Ω—å–∫–∏—Ö –±–∞–≥–æ–≤ –≤ –∫–æ–¥–µ!"
        ]
        await update.message.reply_text(random.choice(jokes))
        await self.add_experience(user_data, 1)
    
    async def fact_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/fact")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        facts = [
            "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∫–æ–ª–æ 86 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –Ω–µ–π—Ä–æ–Ω–æ–≤!",
            "üåä –í –æ–∫–µ–∞–Ω–µ –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, —á–µ–º –≤–æ –≤—Å–µ—Ö –º—É–∑–µ—è—Ö –º–∏—Ä–∞!",
            "üêô –£ –æ—Å—å–º–∏–Ω–æ–≥–æ–≤ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±–∞—è –∫—Ä–æ–≤—å!",
            "üíª –ü–µ—Ä–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ 1971 –≥–æ–¥—É –∏ –Ω–∞–∑—ã–≤–∞–ª—Å—è 'Creeper'!",
            "ü¶à –ê–∫—É–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–æ–ª—å—à–µ, —á–µ–º –¥–µ—Ä–µ–≤—å—è - –±–æ–ª–µ–µ 400 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç!",
            "üåô –õ—É–Ω–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –æ—Ç –ó–µ–º–ª–∏ –Ω–∞ 3.8 —Å–º –∫–∞–∂–¥—ã–π –≥–æ–¥!",
            "‚ö° –ú–æ–ª–Ω–∏—è –≤ 5 —Ä–∞–∑ –≥–æ—Ä—è—á–µ–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –°–æ–ª–Ω—Ü–∞!",
            "üçØ –ú—ë–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è - –∞—Ä—Ö–µ–æ–ª–æ–≥–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ 3000-–ª–µ—Ç–Ω–∏–π –º—ë–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—Å—ë –µ—â—ë —Å—ä–µ–¥–æ–±–µ–Ω!",
            "üêå –£–ª–∏—Ç–∫–∞ –º–æ–∂–µ—Ç —Å–ø–∞—Ç—å –¥–æ 3 –ª–µ—Ç –ø–æ–¥—Ä—è–¥!",
            "üåç –í –º–∏—Ä–µ –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥, —á–µ–º –ø–µ—Å—á–∏–Ω–æ–∫ –Ω–∞ –≤—Å–µ—Ö –ø–ª—è–∂–∞—Ö –ó–µ–º–ª–∏!"
        ]
        await update.message.reply_text(random.choice(facts))
        await self.add_experience(user_data, 1)
    
    async def quote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/quote")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        quotes = [
            "üí´ '–ë—É–¥—å —Å–æ–±–æ–π. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.' - –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
            "üöÄ '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫—É—é —Ä–∞–±–æ—Ç—É - –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—à—å.' - –°—Ç–∏–≤ –î–∂–æ–±—Å",
            "üéØ '–ù–µ –±–æ–π—Ç–µ—Å—å —Å–æ–≤–µ—Ä—à–∞—Ç—å –æ—à–∏–±–∫–∏ - –±–æ–π—Ç–µ—Å—å –Ω–µ —É—á–∏—Ç—å—Å—è –Ω–∞ –Ω–∏—Ö.'",
            "üåü '–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∏—Ç—å –¥–µ—Ä–µ–≤–æ –±—ã–ª–æ 20 –ª–µ—Ç –Ω–∞–∑–∞–¥. –í—Ç–æ—Ä–æ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è - —Å–µ–π—á–∞—Å.'",
            "üí™ '–£—Å–ø–µ—Ö - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.' - –£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å",
            "üî• '–ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞, –¥–µ–ª–∞–π—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–µ –¥–µ–ª–∞ —Å –≤–µ–ª–∏–∫–æ–π –ª—é–±–æ–≤—å—é.' - –ú–∞—Ç—å –¢–µ—Ä–µ–∑–∞",
            "‚ö° '–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–∏—Ö –º–µ—á—Ç–∞–Ω–∏–π.' - –≠–ª–µ–æ–Ω–æ—Ä–∞ –†—É–∑–≤–µ–ª—å—Ç"
        ]
        await update.message.reply_text(random.choice(quotes))
        await self.add_experience(user_data, 1)
    
    async def quiz_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/quiz")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        quizzes = [
            {"q": "‚ùì –ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "a": "–Æ–ø–∏—Ç–µ—Ä"},
            {"q": "‚ùì –°—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏?", "a": "–¢–æ–∫–∏–æ"},
            {"q": "‚ùì –°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –ó–µ–º–ª–µ?", "a": "7 (–∏–ª–∏ 6, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏)"},
            {"q": "‚ùì –ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω—É –∏ –º–∏—Ä'?", "a": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π"},
            {"q": "‚ùì –°–∫–æ—Ä–æ—Å—Ç—å —Å–≤–µ—Ç–∞ –≤ –≤–∞–∫—É—É–º–µ?", "a": "‚âà300,000 –∫–º/—Å"}
        ]
        
        quiz = random.choice(quizzes)
        await update.message.reply_text(f"üéØ –í–ò–ö–¢–û–†–ò–ù–ê\n\n{quiz['q']}\n\nüí° –û—Ç–≤–µ—Ç: ||{quiz['a']}||")
        await self.add_experience(user_data, 1)
    
    async def coin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/coin")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        result = random.choice(["ü™ô –û—Ä—ë–ª!", "ü™ô –†–µ—à–∫–∞!"])
        await update.message.reply_text(result)
        await self.add_experience(user_data, 1)
    
    async def dice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/dice")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        result = random.randint(1, 6)
        dice_faces = ["‚öÄ", "‚öÅ", "‚öÇ", "‚öÉ", "‚öÑ", "‚öÖ"]
        await update.message.reply_text(f"üé≤ {dice_faces[result-1]} –í—ã–ø–∞–ª–æ: {result}")
        await self.add_experience(user_data, 1)
    
    async def eightball_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/8ball")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not context.args:
            await update.message.reply_text(
                "üîÆ –ú–ê–ì–ò–ß–ï–°–ö–ò–ô –®–ê–†\n\n"
                "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!\n"
                "–ü—Ä–∏–º–µ—Ä: /8ball –°—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ —É—á–∏—Ç—å Python?"
            )
            return
        
        answers = [
            "‚úÖ –î–∞, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ!",
            "‚úÖ –ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω!",
            "‚úÖ –ë–µ—Å—Å–ø–æ—Ä–Ω–æ!",
            "‚úÖ –ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏–π!",
            "ü§î –í–æ–∑–º–æ–∂–Ω–æ...",
            "ü§î –°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ",
            "ü§î –°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è —Å–∫–∞–∑–∞—Ç—å",
            "ü§î –ù–µ —É–≤–µ—Ä–µ–Ω...",
            "‚ùå –ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç",
            "‚ùå –û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ",
            "‚ùå –ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –Ω–∞ —ç—Ç–æ",
            "‚ùå –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –Ω–µ—Ç"
        ]
        
        question = " ".join(context.args)
        await update.message.reply_text(f"üîÆ –í–æ–ø—Ä–æ—Å: {question}\n\n{random.choice(answers)}")
        await self.add_experience(user_data, 1)
    
    # ========================================================================
    # –ö–û–ú–ê–ù–î–´ - –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê
    # ========================================================================
    
    async def math_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/math")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not context.args:
            await update.message.reply_text(
                "üî¢ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ!\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /math 15 + 25\n"
                "‚Ä¢ /math (10 + 5) * 2\n"
                "‚Ä¢ /math 100 / 4"
            )
            return
        
        expression = " ".join(context.args)
        
        try:
            allowed_chars = set('0123456789+-*/()., ')
            if not all(c in allowed_chars for c in expression):
                await update.message.reply_text("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: —Ü–∏—Ñ—Ä—ã, +, -, *, /, ()")
                return
            
            result = eval(expression)
            await update.message.reply_text(f"üî¢ {expression} = {result}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}")
        
        await self.add_experience(user_data, 1)
    
    async def calculate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/calculate")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not context.args:
            await update.message.reply_text(
                "üßÆ –ü–†–û–î–í–ò–ù–£–¢–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†\n\n"
                "–§—É–Ω–∫—Ü–∏–∏: sqrt, sin, cos, tan, log, pi, e, pow, abs\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /calculate sqrt(16)\n"
                "‚Ä¢ /calculate sin(3.14/2)\n"
                "‚Ä¢ /calculate log(100)\n"
                "‚Ä¢ /calculate pow(2, 10)"
            )
            return
        
        expression = " ".join(context.args)
        
        try:
            import math
            safe_dict = {
                "sqrt": math.sqrt,
                "sin": math.sin,
                "cos": math.cos,
                "tan": math.tan,
                "log": math.log,
                "log10": math.log10,
                "pi": math.pi,
                "e": math.e,
                "pow": pow,
                "abs": abs,
                "round": round
            }
            
            result = eval(expression, {"__builtins__": {}}, safe_dict)
            await update.message.reply_text(f"üßÆ {expression} = {result}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        await self.add_experience(user_data, 2)
    
    # ========================================================================
    # –ö–û–ú–ê–ù–î–´ - –Ø–ó–´–ö –ò –ü–†–û–§–ò–õ–¨
    # ========================================================================
    
    async def language_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/language")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if context.args:
            lang = context.args[0].lower()
            if lang in LANGUAGE_NAMES:
                user_data['language'] = lang
                self.db.save_user(user_data)
                await update.message.reply_text(
                    self.t('language_changed', lang),
                    reply_markup=self.get_keyboard(lang)
                )
                return
        
        keyboard = []
        for code, name in LANGUAGE_NAMES.items():
            keyboard.append([InlineKeyboardButton(name, callback_data=f"lang_{code}")])
        
        await update.message.reply_text(
            "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def rank_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/rank")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        level = user_data.get('level', 1)
        experience = user_data.get('experience', 0)
        required = level * 100
        progress = (experience / required) * 100
        
        filled = int(progress / 10)
        bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
        
        rank_text = f"""
üèÖ –í–ê–® –£–†–û–í–ï–ù–¨

üë§ {user_data.get('nickname') or user_data['first_name']}
üÜô –£—Ä–æ–≤–µ–Ω—å: {level}
‚≠ê –û–ø—ã—Ç: {experience}/{required}

üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%
{bar}

üíé VIP: {"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if self.is_vip(user_data) else "‚ùå –ù–µ—Ç"}
"""
        await update.message.reply_text(rank_text)
        await self.add_experience(user_data, 1)
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/profile")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        notes_count = len(self.db.get_notes(user_data['user_id']))
        reminders_count = len(self.db.get_reminders(user_data['user_id']))
        memory_count = len(self.db.get_all_memory(user_data['user_id']))
        
        conv_summary = self.conversation_memory.get_summary(user_data['user_id'])
        conv_msgs = conv_summary['total_messages'] if conv_summary else 0
        
        created = datetime.datetime.fromisoformat(user_data.get('created_at', datetime.datetime.now().isoformat()))
        days_with_bot = (datetime.datetime.now() - created).days
        
        profile_text = f"""
üë§ –í–ê–® –ü–†–û–§–ò–õ–¨

üìõ –ò–º—è: {user_data.get('nickname') or user_data['first_name']}
üÜî ID: {user_data['user_id']}
üë§ Username: @{user_data.get('username', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}

üÜô –£—Ä–æ–≤–µ–Ω—å: {user_data.get('level', 1)}
‚≠ê –û–ø—ã—Ç: {user_data.get('experience', 0)}/{user_data.get('level', 1) * 100}
üíé VIP: {"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if self.is_vip(user_data) else "‚ùå –ù–µ—Ç"}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ üìù –ó–∞–º–µ—Ç–æ–∫: {notes_count}
‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminders_count}
‚Ä¢ üß† –ó–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏: {memory_count}
‚Ä¢ üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {conv_msgs}
‚Ä¢ üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_data.get('total_messages', 0)}
‚Ä¢ üéØ –ö–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_data.get('total_commands', 0)}

üóìÔ∏è –° –±–æ—Ç–æ–º: {days_with_bot} –¥–Ω–µ–π
üåê –Ø–∑—ã–∫: {LANGUAGE_NAMES.get(user_data.get('language', 'ru'))}
"""
        await update.message.reply_text(profile_text)
        await self.add_experience(user_data, 1)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/stats")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not self.is_creator(user_data['user_id']):
            return await self.profile_command(update, context)
        
        users = self.db.get_all_users()
        vip_count = sum(1 for u in users if u.get('is_vip'))
        
        total_notes = 0
        total_reminders = 0
        for user in users:
            total_notes += len(self.db.get_notes(user['user_id']))
            total_reminders += len(self.db.get_reminders(user['user_id']))
        
        total_convs = len(self.conversation_memory.conversations)
        total_msgs = sum(len(c['messages']) for c in self.conversation_memory.conversations.values())
        
        uptime = datetime.datetime.now() - self.start_time
        uptime_str = str(uptime).split('.')[0]
        
        stats_text = f"""
üìä –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:
‚Ä¢ –í—Å–µ–≥–æ: {len(users)}
‚Ä¢ VIP: {vip_count}
‚Ä¢ –û–±—ã—á–Ω—ã—Ö: {len(users) - vip_count}

üí¨ –†–ê–ó–ì–û–í–û–†–´:
‚Ä¢ –í—Å–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {total_convs}
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_msgs}

üìù –ö–û–ù–¢–ï–ù–¢:
‚Ä¢ –ó–∞–º–µ—Ç–æ–∫: {total_notes}
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {total_reminders}

‚ö° –°–ò–°–¢–ï–ú–ê:
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç: {uptime_str}
‚Ä¢ AI: {"‚úÖ" if self.gemini_model else "‚ùå"}
‚Ä¢ –ë–∞–∑–∞: ‚úÖ SQLite
‚Ä¢ –ü–∞–º—è—Ç—å: ‚úÖ JSON

üîß Maintenance: {"üîß" if self.maintenance_mode else "‚úÖ"}
"""
        await update.message.reply_text(stats_text)
        await self.add_experience(user_data, 1)
    
    # ========================================================================
    # –ö–û–ú–ê–ù–î–´ - –£–¢–ò–õ–ò–¢–´
    # ========================================================================
    
    async def password_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/password")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        length = 16
        if context.args and context.args[0].isdigit():
            length = min(int(context.args[0]), 64)
        
        import string
        chars = string.ascii_letters + string.digits + "!@#$%^&*()-_=+"
        password = ''.join(random.choice(chars) for _ in range(length))
        
        await update.message.reply_text(
            f"üîê –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ü–ê–†–û–õ–¨\n\n"
            f"–î–ª–∏–Ω–∞: {length} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            f"`{password}`\n\n"
            f"üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –Ω–∞–¥—ë–∂–Ω–æ–º –º–µ—Å—Ç–µ!",
            parse_mode='Markdown'
        )
        await self.add_experience(user_data, 1)
    
    async def qr_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/qr")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not context.args:
            await update.message.reply_text(
                "üì± –ì–ï–ù–ï–†–ê–¢–û–† QR-–ö–û–î–û–í\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /qr [—Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∞]\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /qr https://google.com\n"
                "‚Ä¢ /qr –ú–æ–π –∫–æ–Ω—Ç–∞–∫—Ç: +1234567890"
            )
            return
        
        text = " ".join(context.args)
        qr_url = f"https://api.qrserver.com/v1/create-qr-code/?size=300x300&data={requests.utils.quote(text)}"
        
        try:
            await update.message.reply_text("üì± –ì–µ–Ω–µ—Ä–∏—Ä—É—é QR-–∫–æ–¥...")
            await context.bot.send_photo(update.effective_chat.id, qr_url)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        
        await self.add_experience(user_data, 1)
    
    async def shorturl_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/shorturl")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not context.args:
            await update.message.reply_text(
                "üîó –°–û–ö–†–ê–©–ê–¢–ï–õ–¨ –°–°–´–õ–û–ö\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /shorturl [–¥–ª–∏–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞]\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/shorturl https://very-long-url.com/page"
            )
            return
        
        url = context.args[0]
        
        try:
            api_url = f"https://is.gd/create.php?format=simple&url={requests.utils.quote(url)}"
            response = requests.get(api_url, timeout=10)
            
            if response.status_code == 200:
                short_url = response.text
                await update.message.reply_text(
                    f"‚úÖ –°–°–´–õ–ö–ê –°–û–ö–†–ê–©–ï–ù–ê\n\n"
                    f"üìé –ö–æ—Ä–æ—Ç–∫–∞—è: {short_url}\n\n"
                    f"üîó –û—Ä–∏–≥–∏–Ω–∞–ª: {url}"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        await self.add_experience(user_data, 1)
    
    async def ip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/ip")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        try:
            response = requests.get('https://api.ipify.org?format=json', timeout=10)
            data = response.json()
            ip = data['ip']
            
            info_response = requests.get(f'http://ip-api.com/json/{ip}', timeout=10)
            info = info_response.json()
            
            text = f"""
üåê –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û IP

üìç IP –∞–¥—Ä–µ—Å: {ip}
üåç –°—Ç—Ä–∞–Ω–∞: {info.get('country', 'N/A')}
üèôÔ∏è –ì–æ—Ä–æ–¥: {info.get('city', 'N/A')}
üó∫Ô∏è –†–µ–≥–∏–æ–Ω: {info.get('regionName', 'N/A')}
üåê ISP: {info.get('isp', 'N/A')}
"""
            await update.message.reply_text(text)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: {str(e)}")
        
        await self.add_experience(user_data, 1)
    
    async def weather_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/weather")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not context.args:
            await update.message.reply_text(
                "üå§Ô∏è –ü–û–ì–û–î–ê\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /weather [–≥–æ—Ä–æ–¥]\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /weather –ú–æ—Å–∫–≤–∞\n"
                "‚Ä¢ /weather London\n"
                "‚Ä¢ /weather Paris"
            )
            return
        
        city = " ".join(context.args)
        
        if OPENWEATHER_API_KEY:
            try:
                url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
                response = requests.get(url, timeout=10).json()
                
                if response.get("cod") == 200:
                    weather = response["weather"][0]["description"]
                    temp = round(response["main"]["temp"])
                    feels = round(response["main"]["feels_like"])
                    humidity = response["main"]["humidity"]
                    wind = response["wind"]["speed"]
                    
                    text = f"""
üå§Ô∏è –ü–û–ì–û–î–ê –í {city.upper()}

üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C
ü§î –û—â—É—â–∞–µ—Ç—Å—è: {feels}¬∞C
‚òÅÔ∏è {weather.capitalize()}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%
üå™Ô∏è –í–µ—Ç–µ—Ä: {wind} –º/—Å

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.now().strftime('%H:%M')}
"""
                    await update.message.reply_text(text)
                    await self.add_experience(user_data, 2)
                    return
            except Exception as e:
                logger.error(f"OpenWeather error: {e}")
        
        try:
            url = f"https://wttr.in/{city}?format=%C+%t+üíß%h+üå™Ô∏è%w&lang=ru"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                text = f"""
üå§Ô∏è –ü–û–ì–û–î–ê –í {city.upper()}

{response.text.strip()}

‚è∞ –ê–∫—Ç—É–∞–ª—å–Ω–æ: {datetime.datetime.now().strftime('%H:%M')}
"""
                await update.message.reply_text(text)
            else:
                await update.message.reply_text("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {str(e)}")
        
        await self.add_experience(user_data, 2)
    
    async def currency_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/currency")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if len(context.args) < 3:
            await update.message.reply_text(
                "üí± –ö–û–ù–í–ï–†–¢–ï–† –í–ê–õ–Æ–¢\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /currency [—Å—É–º–º–∞] [–∏–∑] [–≤]\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /currency 100 USD EUR\n"
                "‚Ä¢ /currency 50 EUR RUB"
            )
            return
        
        try:
            amount = float(context.args[0])
            from_curr = context.args[1].upper()
            to_curr = context.args[2].upper()
            
            url = f"https://api.exchangerate-api.com/v4/latest/{from_curr}"
            response = requests.get(url, timeout=10).json()
            
            if 'rates' in response and to_curr in response['rates']:
                rate = response['rates'][to_curr]
                result = amount * rate
                
                text = f"""
üí± –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í–ê–õ–Æ–¢

{amount} {from_curr} = {result:.2f} {to_curr}

üìä –ö—É—Ä—Å: 1 {from_curr} = {rate:.4f} {to_curr}
‚è∞ {datetime.datetime.now().strftime('%H:%M')}
"""
                await update.message.reply_text(text)
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        await self.add_experience(user_data, 2)
    
    async def translate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/translate")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if len(context.args) < 2:
            await update.message.reply_text(
                "üåê –ü–ï–†–ï–í–û–î–ß–ò–ö\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç]\n\n"
                "–ö–æ–¥—ã —è–∑—ã–∫–æ–≤: en, ru, es, fr, de, it, ja, zh\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /translate en –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\n"
                "‚Ä¢ /translate ru Hello, world!"
            )
            return
        
        if not self.gemini_model:
            await update.message.reply_text("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (AI –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)")
            return
        
        target_lang = context.args[0]
        text = " ".join(context.args[1:])
        
        try:
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ {target_lang}. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –ø–µ—Ä–µ–≤–æ–¥, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π:\n\n{text}"
            response = self.gemini_model.generate_content(prompt)
            
            await update.message.reply_text(f"üåê –ü–µ—Ä–µ–≤–æ–¥:\n\n{response.text}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
        
        await self.add_experience(user_data, 2)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/help")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        help_text = """
üìã –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î

üè† –ë–ê–ó–û–í–´–ï:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/uptime - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã

üí¨ AI-–ß–ê–¢:
/ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI
/clearhistory - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é

üìù –ó–ê–ú–ï–¢–ö–ò:
/note [—Ç–µ–∫—Å—Ç] - –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É
/notes - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
/delnote [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/findnote [—Ç–µ–∫—Å—Ç] - –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É
/clearnotes - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏

üß† –ü–ê–ú–Ø–¢–¨:
/memorysave [–∫–ª—é—á] [–∑–Ω–∞—á–µ–Ω–∏–µ]
/memoryget [–∫–ª—é—á]
/memorylist - –í—Å—è –ø–∞–º—è—Ç—å
/memorydel [–∫–ª—é—á]

‚è∞ –í–†–ï–ú–Ø –ò –î–ê–¢–ê:
/time - –ú–∏—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è
/date - –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞

üéÆ –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø:
/joke - –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞
/fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
/quote - –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞
/quiz - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
/coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
/dice - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
/8ball [–≤–æ–ø—Ä–æ—Å] - –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä

üî¢ –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê:
/math [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ] - –í—ã—á–∏—Å–ª–µ–Ω–∏—è
/calculate [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ] - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä

üõ†Ô∏è –£–¢–ò–õ–ò–¢–´:
/password [–¥–ª–∏–Ω–∞] - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
/qr [—Ç–µ–∫—Å—Ç] - –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥
/shorturl [url] - –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞
/ip - –ú–æ–π IP –∞–¥—Ä–µ—Å
/weather [–≥–æ—Ä–æ–¥] - –ü–æ–≥–æ–¥–∞
/currency [—Å—É–º–º–∞] [–∏–∑] [–≤] - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä
/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–æ–¥

üìä –ü–†–û–ì–†–ï–°–°:
/rank - –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç
/profile - –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å

üåê –Ø–ó–´–ö:
/language - –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫

üíé VIP –§–£–ù–ö–¶–ò–ò:
/vip - –°—Ç–∞—Ç—É—Å VIP
/remind [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç] - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/reminders - –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
/delreminder [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å
/nickname [–∏–º—è] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º
"""

        if self.is_creator(user_data['user_id']):
            help_text += """
üëë –ö–û–ú–ê–ù–î–´ –°–û–ó–î–ê–¢–ï–õ–Ø:
/grant_vip [id] [week/month/year/permanent]
/revoke_vip [user_id]
/broadcast [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞
/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/stats - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/maintenance [on/off]
/backup - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
"""
        
        await update.message.reply_text(help_text)
        await self.add_experience(user_data, 1)
    
    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/info")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        users = self.db.get_all_users()
        vip_count = sum(1 for u in users if u.get('is_vip'))
        
        total_conversations = len(self.conversation_memory.conversations)
        total_messages = sum(
            len(conv['messages']) 
            for conv in self.conversation_memory.conversations.values()
        )
        
        info_text = f"""
ü§ñ –û –ë–û–¢–ï

üìå –í–µ—Ä—Å–∏—è: 3.0 (–£–ª—É—á—à–µ–Ω–Ω–∞—è)
üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å: Ernest {CREATOR_USERNAME}
üë® –ü–∞–ø–∞: {PAPA_USERNAME}
ü§ñ –ë–æ—Ç: {BOT_USERNAME}

üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
‚Ä¢ AI: {"‚úÖ Gemini 2.0 Flash" if self.gemini_model else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
‚Ä¢ –ë–∞–∑–∞: ‚úÖ SQLite (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
‚Ä¢ –ü–∞–º—è—Ç—å: ‚úÖ JSON (–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è)
‚Ä¢ –•–æ—Å—Ç–∏–Ω–≥: ‚úÖ Render 24/7

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
‚Ä¢ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {vip_count}
‚Ä¢ –†–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {total_conversations}
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
‚Ä¢ –Ø–∑—ã–∫–æ–≤: 6

‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ v3.0:
‚Ä¢ üß† –ü–æ–ª–Ω–∞—è –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
‚Ä¢ ‚è∞ –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø–æ–≥–æ–¥–∞
‚Ä¢ üéÇ –ê–≤—Ç–æ–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ üöÄ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

‚ö° –†–∞–±–æ—Ç–∞–µ—Ç 24/7 —Å –∞–≤—Ç–æ–ø–∏–Ω–≥–æ–º
"""
        await update.message.reply_text(info_text)
        await self.add_experience(user_data, 1)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/status")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        users = self.db.get_all_users()
        uptime = datetime.datetime.now() - self.start_time
        uptime_str = str(uptime).split('.')[0]
        
        conv_size = len(self.conversation_memory.conversations)
        total_msgs = sum(len(c['messages']) for c in self.conversation_memory.conversations.values())
        
        status_text = f"""
‚ö° –°–¢–ê–¢–£–° –ë–û–¢–ê

üü¢ –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω
üìÖ –í–µ—Ä—Å–∏—è: 3.0 (–£–ª—É—á—à–µ–Ω–Ω–∞—è)
‚è∞ –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üïê –†–∞–±–æ—Ç–∞–µ—Ç: {uptime_str}

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
üß† AI: {"‚úÖ Gemini 2.0" if self.gemini_model else "‚ùå"}
üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ SQLite
üí¨ –†–∞–∑–≥–æ–≤–æ—Ä–æ–≤: {conv_size}
üì® –°–æ–æ–±—â–µ–Ω–∏–π: {total_msgs}

üîß Maintenance: {"üîß –í–∫–ª—é—á–µ–Ω" if self.maintenance_mode else "‚úÖ –í—ã–∫–ª—é—á–µ–Ω"}
üì° –ê–≤—Ç–æ–ø–∏–Ω–≥: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ
"""
        await update.message.reply_text(status_text)
        await self.add_experience(user_data, 1)
    
    async def uptime_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/uptime")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        uptime = datetime.datetime.now() - self.start_time
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        uptime_text = f"""
üïê –í–†–ï–ú–Ø –†–ê–ë–û–¢–´

üìÖ –î–Ω–µ–π: {days}
‚è∞ –ß–∞—Å–æ–≤: {hours}
‚è±Ô∏è –ú–∏–Ω—É—Ç: {minutes}
‚ö° –°–µ–∫—É–Ω–¥: {seconds}

üöÄ –ó–∞–ø—É—â–µ–Ω: {self.start_time.strftime('%d.%m.%Y %H:%M:%S')}
‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!
"""
        await update.message.reply_text(uptime_text)
        await self.add_experience(user_data, 1)
    
    # ========================================================================
    # –ö–û–ú–ê–ù–î–´ - –í–†–ï–ú–Ø –ò –î–ê–¢–ê
    # ========================================================================
    
    async def time_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/time")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        lang = user_data.get('language', 'ru')
        
        now_utc = datetime.datetime.now(pytz.utc)
        
        timezones = [
            ('GMT (–õ–æ–Ω–¥–æ–Ω)', 'Europe/London'),
            ('CEST (–ë–µ—Ä–ª–∏–Ω)', 'Europe/Berlin'),
            ('CEST (–ü–∞—Ä–∏–∂)', 'Europe/Paris'),
            ('MSK (–ú–æ—Å–∫–≤–∞)', 'Europe/Moscow'),
            ('EST (–í–∞—à–∏–Ω–≥—Ç–æ–Ω)', 'America/New_York'),
            ('PST (–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å)', 'America/Los_Angeles'),
            ('CST (–ß–∏–∫–∞–≥–æ)', 'America/Chicago'),
            ('JST (–¢–æ–∫–∏–æ)', 'Asia/Tokyo'),
            ('CST (–ü–µ–∫–∏–Ω)', 'Asia/Shanghai'),
            ('IST (–î–µ–ª–∏)', 'Asia/Kolkata'),
            ('AEST (–°–∏–¥–Ω–µ–π)', 'Australia/Sydney')
        ]
        
        time_text = f"‚è∞ –ú–ò–†–û–í–û–ï –í–†–ï–ú–Ø (–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ)\n\n"
        time_text += f"üåç UTC: {now_utc.strftime('%H:%M:%S')}\n\n"
        
        for city_name, tz_name in timezones:
            try:
                tz = pytz.timezone(tz_name)
                local_time = now_utc.astimezone(tz)
                time_text += f"üïê {city_name}: {local_time.strftime('%H:%M:%S')}\n"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ {tz_name}: {e}")
        
        time_text += f"\nüìÖ –î–∞—Ç–∞: {now_utc.strftime('%d.%m.%Y')}"
        
        await update.message.reply_text(time_text)
        await self.add_experience(user_data, 1)
    
    async def date_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/date")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        now = datetime.datetime.now()
        days_ru = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        months_ru = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                     '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
        
        day_name = days_ru[now.weekday()]
        month_name = months_ru[now.month - 1]
        
        date_text = f"""
üìÖ –°–ï–ì–û–î–ù–Ø

üóìÔ∏è {day_name}
üìÜ {now.day} {month_name} {now.year} –≥–æ–¥–∞
‚è∞ –í—Ä–µ–º—è: {now.strftime('%H:%M:%S')}

üìä –î–µ–Ω—å –≥–æ–¥–∞: {now.timetuple().tm_yday}/365
üìà –ù–µ–¥–µ–ª—è: {now.isocalendar()[1]}/52
üåô –ú–µ—Å—è—Ü: {now.month}/12
"""
        await update.message.reply_text(date_text)
        await self.add_experience(user_data, 1)
    
    # ========================================================================
    # –ö–û–ú–ê–ù–î–´ - AI –ß–ê–¢
    # ========================================================================
    
    async def ai_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/ai")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not context.args:
            summary = self.conversation_memory.get_summary(user_data['user_id'])
            if summary:
                await update.message.reply_text(
                    f"üí¨ AI –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É!\n\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {summary['total_messages']}\n"
                    f"‚Ä¢ –í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {summary['user_messages']}\n"
                    f"‚Ä¢ –ú–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤: {summary['ai_messages']}\n\n"
                    f"–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å: /ai [–≤–∞—à –≤–æ–ø—Ä–æ—Å]\n"
                    f"–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ"
                )
            else:
                await update.message.reply_text(
                    "üí¨ AI –≥–æ—Ç–æ–≤! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å\n"
                    "–ü—Ä–∏–º–µ—Ä: /ai –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö"
                )
            return
        
        if not self.gemini_model:
            await update.message.reply_text("‚ùå AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        query = " ".join(context.args)
        
        try:
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            history = self.conversation_memory.get_context(user_data['user_id'], limit=None)
            
            context_str = ""
            if history:
                for msg in history[-10:]:
                    role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg['role'] == 'user' else "AI"
                    context_str += f"{role}: {msg['content'][:200]}\n"
            
            prompt = f"""–¢—ã —É–º–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.

–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
{context_str}

–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}

–û—Ç–≤–µ—Ç—å –ø–æ–ª–µ–∑–Ω–æ, —É—á–∏—Ç—ã–≤–∞—è –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."""

            response = self.gemini_model.generate_content(prompt)
            
            self.conversation_memory.add_message(user_data['user_id'], 'user', query)
            self.conversation_memory.add_message(user_data['user_id'], 'assistant', response.text)
            
            await update.message.reply_text(response.text)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ AI: {str(e)[:100]}")
            logger.error(f"–û—à–∏–±–∫–∞ AI: {e}")
        
        await self.add_experience(user_data, 2)
    
    async def clearhistory_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/clearhistory")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        summary = self.conversation_memory.get_summary(user_data['user_id'])
        if summary:
            msg_count = summary['total_messages']
            self.conversation_memory.clear_history(user_data['user_id'])
            await update.message.reply_text(
                f"üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!\n"
                f"üìä –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {msg_count}\n\n"
                f"–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä!"
            )
        else:
            await update.message.reply_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è —É–∂–µ –ø—É—Å—Ç–∞!")
        
        await self.add_experience(user_data, 1)
    
    # ========================================================================
    # –ö–û–ú–ê–ù–î–´ - –ó–ê–ú–ï–¢–ö–ò
    # ========================================================================
    
    async def note_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/note")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not context.args:
            await update.message.reply_text(
                "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /note [—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏]\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /note –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
                "‚Ä¢ /note –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ 18:00"
            )
            return
        
        note = " ".join(context.args)
        self.db.add_note(user_data['user_id'], note)
        
        notes_count = len(self.db.get_notes(user_data['user_id']))
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
            f"üìù {note}\n\n"
            f"üìä –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {notes_count}"
        )
        await self.add_experience(user_data, 1)
    
    async def notes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/notes")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        notes = self.db.get_notes(user_data['user_id'])
        
        if not notes:
            await update.message.reply_text(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫!\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é: /note [—Ç–µ–∫—Å—Ç]"
            )
            return
        
        text = "üìù –í–ê–®–ò –ó–ê–ú–ï–¢–ö–ò:\n\n"
        for i, note in enumerate(notes, 1):
            created = datetime.datetime.fromisoformat(note['created_at']).strftime('%d.%m %H:%M')
            text += f"{i}. {note['note']}\n   üìÖ {created}\n\n"
        
        text += f"üìä –í—Å–µ–≥–æ: {len(notes)} –∑–∞–º–µ—Ç–æ–∫"
        
        if len(text) > 4000:
            text = text[:4000] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"
        
        await update.message.reply_text(text)
        await self.add_experience(user_data, 1)
    
    async def delnote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/delnote")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not context.args or not context.args[0].isdigit():
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏!\n\n"
                "–ü—Ä–∏–º–µ—Ä: /delnote 1\n\n"
                "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–º–µ—Ä–∞: /notes"
            )
            return
        
        notes = self.db.get_notes(user_data['user_id'])
        index = int(context.args[0]) - 1
        
        if 0 <= index < len(notes):
            deleted_note = notes[index]['note']
            self.db.delete_note(notes[index]['id'], user_data['user_id'])
            await update.message.reply_text(
                f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!\n\n"
                f"üóëÔ∏è {deleted_note}"
            )
        else:
            await update.message.reply_text(f"‚ùå –ó–∞–º–µ—Ç–∫–∏ #{index+1} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        
        await self.add_experience(user_data, 1)
    
    async def findnote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/findnote")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not context.args:
            await update.message.reply_text(
                "üîç –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–∫–∏\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /findnote [—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞]"
            )
            return
        
        search_text = " ".join(context.args).lower()
        notes = self.db.get_notes(user_data['user_id'])
        
        found = [n for n in notes if search_text in n['note'].lower()]
        
        if not found:
            await update.message.reply_text(f"‚ùå –ó–∞–º–µ—Ç–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º '{search_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        text = f"üîç –ù–∞–π–¥–µ–Ω–æ: {len(found)} –∑–∞–º–µ—Ç–æ–∫\n\n"
        for i, note in enumerate(found, 1):
            created = datetime.datetime.fromisoformat(note['created_at']).strftime('%d.%m %H:%M')
            text += f"{i}. {note['note']}\n   üìÖ {created}\n\n"
        
        await update.message.reply_text(text)
        await self.add_experience(user_data, 1)
    
    async def clearnotes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/clearnotes")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        count = self.db.clear_notes(user_data['user_id'])
        
        await update.message.reply_text(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–º–µ—Ç–æ–∫!")
        await self.add_experience(user_data, 1)
    
    # ========================================================================
    # –ö–û–ú–ê–ù–î–´ - –ü–ê–ú–Ø–¢–¨
    # ========================================================================
    
    async def memorysave_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/memorysave")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if len(context.args) < 2:
            await update.message.reply_text(
                "üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /memorysave [–∫–ª—é—á] [–∑–Ω–∞—á–µ–Ω–∏–µ]\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /memorysave –ª—é–±–∏–º—ã–π_—Ü–≤–µ—Ç —Å–∏–Ω–∏–π\n"
                "‚Ä¢ /memorysave email test@example.com"
            )
            return
        
        key = context.args[0]
        value = " ".join(context.args[1:])
        
        self.db.save_memory(user_data['user_id'], key, value)
        
        await update.message.reply_text(
            f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å!\n\n"
            f"üîë –ö–ª—é—á: {key}\n"
            f"üíæ –ó–Ω–∞—á–µ–Ω–∏–µ: {value}"
        )
        await self.add_experience(user_data, 1)
    
    async def memoryget_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/memoryget")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á!\n–ü—Ä–∏–º–µ—Ä: /memoryget –ª—é–±–∏–º—ã–π_—Ü–≤–µ—Ç")
            return
        
        key = context.args[0]
        value = self.db.get_memory(user_data['user_id'], key)
        
        if value:
            await update.message.reply_text(
                f"üîç –ù–∞–π–¥–µ–Ω–æ!\n\n"
                f"üîë {key}\n"
                f"üíæ {value}"
            )
        else:
            await update.message.reply_text(f"‚ùå –ö–ª—é—á '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏")
        
        await self.add_experience(user_data, 1)
    
    async def memorylist_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/memorylist")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        memory = self.db.get_all_memory(user_data['user_id'])
        
        if not memory:
            await update.message.reply_text(
                "üì≠ –ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞!\n\n"
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å: /memorysave [–∫–ª—é—á] [–∑–Ω–∞—á–µ–Ω–∏–µ]"
            )
            return
        
        text = "üß† –í–°–Ø –ü–ê–ú–Ø–¢–¨:\n\n"
        for key, value in memory.items():
            text += f"üîë {key}\nüíæ {value}\n\n"
        
        text += f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(memory)}"
        
        await update.message.reply_text(text)
        await self.add_experience(user_data, 1)
    
    async def memorydel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_data = await self.get_user_data(update)
        self.db.log_command(user_data['user_id'], "/memorydel")
        user_data['total_commands'] = user_data.get('total_commands', 0) + 1
        
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á!\n–ü—Ä–∏–º–µ—Ä: /memorydel –ª—é–±–∏–º—ã–π_—Ü–≤–µ—Ç")
            return
        
        key = context.args[0]
        deleted = self.db.delete_memory(user_data['user_id'], key)
        
        if deleted:
            await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–∞–º—è—Ç–∏: {key}")
        else:
            await update.message.reply_text(f"‚ùå –ö–ª—é—á '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        await self.add_experience(user_data, 1)
