#!/usr/bin/env python3

# -*- coding: utf-8 -*-

TELEGRAM AI BOT v2.1 - –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è
‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç
‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ (GMT, CEST, Washington, Paris, Berlin –∏ –¥—Ä.)
‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—à–∏–±–∫–∏
‚Äú‚Äù‚Äù

import asyncio
import logging
import json
import random
import time
import datetime
import requests
import os
import sys
import sqlite3
from pathlib import Path
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.cron import CronTrigger
import nest_asyncio
from flask import Flask
import pytz

nest_asyncio.apply()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.error import Conflict

import google.generativeai as genai

# ============================================================================

# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï

# ============================================================================

logging.basicConfig(
format=‚Äô%(asctime)s - %(name)s - %(levelname)s - %(message)s‚Äô,
level=logging.INFO,
handlers=[logging.FileHandler(‚Äòbot.log‚Äô), logging.StreamHandler()]
)
logger = logging.getLogger(**name**)

# ============================================================================

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø

# ============================================================================

BOT_TOKEN = os.getenv(‚ÄúBOT_TOKEN‚Äù)
GEMINI_API_KEY = os.getenv(‚ÄúGEMINI_API_KEY‚Äù)
OPENWEATHER_API_KEY = os.getenv(‚ÄúOPENWEATHER_API_KEY‚Äù)

CREATOR_ID = 7108255346
CREATOR_USERNAME = ‚Äú@Ernest_Kostevich‚Äù
BOT_USERNAME = ‚Äú@AI_DISCO_BOT‚Äù

if GEMINI_API_KEY:
genai.configure(api_key=GEMINI_API_KEY)
MODEL = ‚Äúgemini-2.0-flash-exp‚Äù

RENDER_URL = os.getenv(‚ÄúRENDER_EXTERNAL_URL‚Äù, ‚Äúhttps://telegram-ai‚Äìbot.onrender.com‚Äù)

DB_PATH = ‚Äúbot_database.db‚Äù
CONVERSATIONS_PATH = ‚Äúconversations.json‚Äù
BACKUP_PATH = ‚Äúbackups‚Äù
Path(BACKUP_PATH).mkdir(exist_ok=True)

# ============================================================================

# –ü–ï–†–ï–í–û–î–´

# ============================================================================

TRANSLATIONS = {
‚Äòru‚Äô: {
‚Äòwelcome‚Äô: ‚Äòü§ñ –ü—Ä–∏–≤–µ—Ç, {name}!\n–Ø AI-–±–æ—Ç —Å 50+ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!\n\nüåü –û—Å–Ω–æ–≤–Ω–æ–µ:\n‚Ä¢ üí¨ AI-—á–∞—Ç —Å Gemini 2.0\n‚Ä¢ üìù –ó–∞–º–µ—Ç–∫–∏ –∏ –ø–∞–º—è—Ç—å\n‚Ä¢ üå§Ô∏è –ü–æ–≥–æ–¥–∞\n‚Ä¢ üéÆ –ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\n‚Ä¢ ‚è∞ –ú–∏—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è\n\nüíé –•–æ—Ç–∏—Ç–µ VIP? –°–ø—Ä–æ—Å–∏—Ç–µ!\nü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /help‚Äô,
‚Äòhelp‚Äô: ‚Äòüìã –ü–æ–º–æ—â—å‚Äô,
‚Äònotes‚Äô: ‚Äòüìù –ó–∞–º–µ—Ç–∫–∏‚Äô,
‚Äòstats‚Äô: ‚Äòüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞‚Äô,
‚Äòtime‚Äô: ‚Äò‚è∞ –í—Ä–µ–º—è‚Äô,
‚Äòlanguage‚Äô: ‚Äòüåê –Ø–∑—ã–∫‚Äô,
‚Äòai_chat‚Äô: ‚Äòüí¨ AI –ß–∞—Ç‚Äô,
‚Äòcurrent_time‚Äô: ‚Äò‚è∞ –ú–ò–†–û–í–û–ï –í–†–ï–ú–Ø‚Äô,
‚Äòlanguage_changed‚Äô: ‚Äò‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: –†—É—Å—Å–∫–∏–π‚Äô
},
‚Äòen‚Äô: {
‚Äòwelcome‚Äô: ‚Äòü§ñ Hello, {name}!\nI am an AI bot with 50+ features!\n\nüåü Main:\n‚Ä¢ üí¨ AI chat with Gemini 2.0\n‚Ä¢ üìù Notes and memory\n‚Ä¢ üå§Ô∏è Weather\n‚Ä¢ üéÆ Games\n‚Ä¢ ‚è∞ World time\n\nüíé Want VIP? Ask!\nü§ñ Use buttons or /help‚Äô,
‚Äòhelp‚Äô: ‚Äòüìã Help‚Äô,
‚Äònotes‚Äô: ‚Äòüìù Notes‚Äô,
‚Äòstats‚Äô: ‚Äòüìä Stats‚Äô,
‚Äòtime‚Äô: ‚Äò‚è∞ Time‚Äô,
‚Äòlanguage‚Äô: ‚Äòüåê Language‚Äô,
‚Äòai_chat‚Äô: ‚Äòüí¨ AI Chat‚Äô,
‚Äòcurrent_time‚Äô: ‚Äò‚è∞ WORLD TIME‚Äô,
‚Äòlanguage_changed‚Äô: ‚Äò‚úÖ Language changed to: English‚Äô
}
}

LANGUAGE_NAMES = {
‚Äòru‚Äô: ‚Äòüá∑üá∫ –†—É—Å—Å–∫–∏–π‚Äô,
‚Äòen‚Äô: ‚Äòüá∫üá∏ English‚Äô,
‚Äòes‚Äô: ‚Äòüá™üá∏ Espa√±ol‚Äô,
‚Äòfr‚Äô: ‚Äòüá´üá∑ Fran√ßais‚Äô,
‚Äòit‚Äô: ‚ÄòüáÆüáπ Italiano‚Äô,
‚Äòde‚Äô: ‚Äòüá©üá™ Deutsch‚Äô
}

# ============================================================================

# –ë–ê–ó–ê –î–ê–ù–ù–´–•

# ============================================================================

class Database:
def **init**(self, db_path: str = DB_PATH):
self.db_path = db_path
self.init_db()

```
def get_connection(self):
    conn = sqlite3.connect(self.db_path)
    conn.row_factory = sqlite3.Row
    return conn

def init_db(self):
    conn = self.get_connection()
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT,
        is_vip INTEGER DEFAULT 0, vip_expires TEXT, language TEXT DEFAULT 'ru',
        nickname TEXT, level INTEGER DEFAULT 1, experience INTEGER DEFAULT 0,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP, last_activity TEXT DEFAULT CURRENT_TIMESTAMP)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS notes (
        id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, note TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS command_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, command TEXT,
        timestamp TEXT DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

def get_user(self, user_id: int):
    conn = self.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()
    return dict(row) if row else None

def save_user(self, user_data: dict):
    conn = self.get_connection()
    cursor = conn.cursor()
    user_data['last_activity'] = datetime.datetime.now().isoformat()
    if self.get_user(user_data['user_id']):
        cursor.execute('''UPDATE users SET username=?, first_name=?, is_vip=?, vip_expires=?,
            language=?, nickname=?, level=?, experience=?, last_activity=? WHERE user_id=?''',
            (user_data.get('username',''), user_data.get('first_name',''), user_data.get('is_vip',0),
            user_data.get('vip_expires'), user_data.get('language','ru'), user_data.get('nickname'),
            user_data.get('level',1), user_data.get('experience',0), user_data['last_activity'], user_data['user_id']))
    else:
        cursor.execute('''INSERT INTO users (user_id, username, first_name, is_vip, vip_expires,
            language, nickname, level, experience, last_activity) VALUES (?,?,?,?,?,?,?,?,?,?)''',
            (user_data['user_id'], user_data.get('username',''), user_data.get('first_name',''),
            user_data.get('is_vip',0), user_data.get('vip_expires'), user_data.get('language','ru'),
            user_data.get('nickname'), user_data.get('level',1), user_data.get('experience',0), user_data['last_activity']))
    conn.commit()
    conn.close()

def get_all_users(self):
    conn = self.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users")
    rows = cursor.fetchall()
    conn.close()
    return [dict(row) for row in rows]

def log_command(self, user_id: int, command: str):
    conn = self.get_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO command_logs (user_id, command) VALUES (?, ?)", (user_id, command))
    conn.commit()
    conn.close()

def add_note(self, user_id: int, note: str):
    conn = self.get_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO notes (user_id, note) VALUES (?, ?)", (user_id, note))
    conn.commit()
    conn.close()

def get_notes(self, user_id: int):
    conn = self.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM notes WHERE user_id = ? ORDER BY created_at DESC", (user_id,))
    rows = cursor.fetchall()
    conn.close()
    return [dict(row) for row in rows]

def delete_note(self, note_id: int, user_id: int):
    conn = self.get_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM notes WHERE id = ? AND user_id = ?", (note_id, user_id))
    deleted = cursor.rowcount > 0
    conn.commit()
    conn.close()
    return deleted
```

class ConversationMemory:
def **init**(self, filepath: str = CONVERSATIONS_PATH):
self.filepath = filepath
self.conversations = self._load()

```
def _load(self):
    if os.path.exists(self.filepath):
        try:
            with open(self.filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def _save(self):
    try:
        with open(self.filepath, 'w', encoding='utf-8') as f:
            json.dump(self.conversations, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def add_message(self, user_id: int, role: str, content: str):
    uid = str(user_id)
    if uid not in self.conversations:
        self.conversations[uid] = {'messages': [], 'created_at': datetime.datetime.now().isoformat()}
    self.conversations[uid]['messages'].append({'role': role, 'content': content, 'timestamp': datetime.datetime.now().isoformat()})
    if len(self.conversations[uid]['messages']) % 10 == 0:
        self._save()

def get_context(self, user_id: int, limit: int = 50):
    uid = str(user_id)
    if uid not in self.conversations:
        return []
    messages = self.conversations[uid]['messages']
    return messages[-limit:] if len(messages) > limit else messages

def clear_history(self, user_id: int):
    uid = str(user_id)
    if uid in self.conversations:
        del self.conversations[uid]
        self._save()

def save(self):
    self._save()
```

# ============================================================================

# –ë–û–¢

# ============================================================================

class TelegramBot:
def **init**(self):
self.db = Database()
self.conversation_memory = ConversationMemory()
self.gemini_model = None

```
    if GEMINI_API_KEY:
        try:
            self.gemini_model = genai.GenerativeModel(MODEL)
            logger.info("Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Gemini: {e}")
    
    self.scheduler = AsyncIOScheduler()
    self.maintenance_mode = False

def t(self, key: str, lang: str = 'ru', **kwargs):
    text = TRANSLATIONS.get(lang, TRANSLATIONS['ru']).get(key, key)
    return text.format(**kwargs) if kwargs else text

async def get_user_data(self, update: Update):
    user = update.effective_user
    user_data = self.db.get_user(user.id)
    
    if not user_data:
        user_data = {
            'user_id': user.id,
            'username': user.username or "",
            'first_name': user.first_name or "",
            'is_vip': 1 if user.id == CREATOR_ID else 0,
            'vip_expires': None,
            'language': 'ru',
            'nickname': None,
            'level': 1,
            'experience': 0
        }
        self.db.save_user(user_data)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
    
    return user_data

def get_keyboard(self, lang: str = 'ru'):
    keyboard = [
        [KeyboardButton(self.t('ai_chat', lang)), KeyboardButton(self.t('help', lang))],
        [KeyboardButton(self.t('notes', lang)), KeyboardButton(self.t('stats', lang))],
        [KeyboardButton(self.t('time', lang)), KeyboardButton(self.t('language', lang))]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def is_creator(self, user_id: int):
    return user_id == CREATOR_ID

def is_vip(self, user_data: dict):
    if not user_data.get('is_vip'):
        return False
    if user_data.get('vip_expires'):
        try:
            expires = datetime.datetime.fromisoformat(user_data['vip_expires'])
            if datetime.datetime.now() > expires:
                user_data['is_vip'] = 0
                self.db.save_user(user_data)
                return False
        except:
            return False
    return True

async def add_experience(self, user_data: dict, points: int = 1):
    user_data['experience'] = user_data.get('experience', 0) + points
    required = user_data.get('level', 1) * 100
    if user_data['experience'] >= required:
        user_data['level'] = user_data.get('level', 1) + 1
        user_data['experience'] = 0
    self.db.save_user(user_data)

# ========================================================================
# –ö–û–ú–ê–ù–î–´
# ========================================================================

async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/start")
    lang = user_data.get('language', 'ru')
    
    message = self.t('welcome', lang, name=user_data['first_name'])
    keyboard = self.get_keyboard(lang)
    
    await update.message.reply_text(message, reply_markup=keyboard)
    await self.add_experience(user_data, 1)

async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/help")
    
    help_text = """
```

üìã –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î

üè† –ë–ê–ó–û–í–´–ï:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/info - –û –±–æ—Ç–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üí¨ AI-–ß–ê–¢:
/ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI
/clearhistory - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é

üìù –ó–ê–ú–ï–¢–ö–ò:
/note [—Ç–µ–∫—Å—Ç] - –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É
/notes - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
/delnote [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/clearnotes - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏

‚è∞ –í–†–ï–ú–Ø –ò –î–ê–¢–ê:
/time - –ú–∏—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è (GMT, CEST, EST –∏ –¥—Ä.)
/date - –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞

üéÆ –†–ê–ó–í–õ–ï–ß–ï–ù–ò–Ø:
/joke - –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞
/fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
/quote - –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞
/coin - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É
/dice - –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
/8ball [–≤–æ–ø—Ä–æ—Å] - –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä

üî¢ –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê:
/math [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ] - –ü—Ä–æ—Å—Ç—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
/calculate [–≤—ã—Ä–∞–∂–µ–Ω–∏–µ] - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä

üõ†Ô∏è –£–¢–ò–õ–ò–¢–´:
/password [–¥–ª–∏–Ω–∞] - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
/qr [—Ç–µ–∫—Å—Ç] - –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥
/weather [–≥–æ—Ä–æ–¥] - –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ
/translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç] - –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞

üåê –Ø–ó–´–ö:
/language - –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

üìä –ü–†–û–ì–†–ï–°–°:
/rank - –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç
‚Äú‚Äù‚Äù

```
    if self.is_creator(user_data['user_id']):
        help_text += """
```

üëë –°–û–ó–î–ê–¢–ï–õ–¨:
/grant_vip [user_id] [week/month/year/permanent]
/broadcast [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º
/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/backup - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
‚Äú‚Äù‚Äù

```
    await update.message.reply_text(help_text)
    await self.add_experience(user_data, 1)

async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/info")
    
    info_text = f"""
```

ü§ñ –û –ë–û–¢–ï

–í–µ—Ä—Å–∏—è: 2.1 (–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∞—è)
–°–æ–∑–¥–∞—Ç–µ–ª—å: Ernest {CREATOR_USERNAME}
–ë–æ—Ç: {BOT_USERNAME}

üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
‚Ä¢ AI: {‚ÄúGemini 2.0 ‚úÖ‚Äù if self.gemini_model else ‚Äú‚ùå‚Äù}
‚Ä¢ –ë–∞–∑–∞: SQLite ‚úÖ
‚Ä¢ –ü–∞–º—è—Ç—å: JSON ‚úÖ
‚Ä¢ –•–æ—Å—Ç–∏–Ω–≥: Render ‚úÖ

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.db.get_all_users())}
‚Ä¢ –Ø–∑—ã–∫–æ–≤: 6 (ru, en, es, fr, it, de)

‚ö° –†–∞–±–æ—Ç–∞–µ—Ç 24/7 —Å –∞–≤—Ç–æ–ø–∏–Ω–≥–æ–º
‚Äú‚Äù‚Äù
await update.message.reply_text(info_text)
await self.add_experience(user_data, 1)

```
async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/status")
    
    users = self.db.get_all_users()
    
    status_text = f"""
```

‚ö° –°–¢–ê–¢–£–° –ë–û–¢–ê

üü¢ –û–Ω–ª–∞–π–Ω: –†–∞–±–æ—Ç–∞–µ—Ç
üìÖ –í–µ—Ä—Å–∏—è: 2.1
‚è∞ –í—Ä–µ–º—è: {datetime.datetime.now().strftime(‚Äô%d.%m.%Y %H:%M:%S‚Äô)}

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
üß† AI: {‚Äú‚úÖ Gemini 2.0‚Äù if self.gemini_model else ‚Äú‚ùå‚Äù}
üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ SQLite
üí¨ –ü–∞–º—è—Ç—å —á–∞—Ç–∞: ‚úÖ JSON

üîß Maintenance: {‚Äúüîß –í–∫–ª‚Äù if self.maintenance_mode else ‚Äú‚úÖ –í—ã–∫–ª‚Äù}
‚Äú‚Äù‚Äù
await update.message.reply_text(status_text)
await self.add_experience(user_data, 1)

```
async def time_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ /time —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏"""
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/time")
    lang = user_data.get('language', 'ru')
    
    now_utc = datetime.datetime.now(pytz.utc)
    
    # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
    timezones = [
        ('GMT (–õ–æ–Ω–¥–æ–Ω)', 'Europe/London'),
        ('CEST (–ë–µ—Ä–ª–∏–Ω)', 'Europe/Berlin'),
        ('CEST (–ü–∞—Ä–∏–∂)', 'Europe/Paris'),
        ('MSK (–ú–æ—Å–∫–≤–∞)', 'Europe/Moscow'),
        ('EST (–í–∞—à–∏–Ω–≥—Ç–æ–Ω)', 'America/New_York'),
        ('PST (–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å)', 'America/Los_Angeles'),
        ('CST (–ß–∏–∫–∞–≥–æ)', 'America/Chicago'),
        ('JST (–¢–æ–∫–∏–æ)', 'Asia/Tokyo'),
        ('CST (–ü–µ–∫–∏–Ω)', 'Asia/Shanghai'),
        ('IST (–î–µ–ª–∏)', 'Asia/Kolkata')
    ]
    
    time_text = f"{self.t('current_time', lang)}\n\n"
    
    for city_name, tz_name in timezones:
        try:
            tz = pytz.timezone(tz_name)
            local_time = now_utc.astimezone(tz)
            time_text += f"üåç {city_name}: {local_time.strftime('%H:%M:%S')}\n"
        except:
            pass
    
    time_text += f"\nüìÖ –î–∞—Ç–∞ (UTC): {now_utc.strftime('%d.%m.%Y')}"
    
    await update.message.reply_text(time_text)
    await self.add_experience(user_data, 1)

async def date_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/date")
    
    now = datetime.datetime.now()
    days_ru = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    months_ru = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                 '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
    
    day_name = days_ru[now.weekday()]
    month_name = months_ru[now.month - 1]
    
    date_text = f"""
```

üìÖ –°–ï–ì–û–î–ù–Ø

üóìÔ∏è {day_name}
üìÜ {now.day} {month_name} {now.year} –≥–æ–¥–∞
‚è∞ –í—Ä–µ–º—è: {now.strftime(‚Äô%H:%M:%S‚Äô)}

üìä –î–µ–Ω—å –≥–æ–¥–∞: {now.timetuple().tm_yday}/365
üìà –ù–µ–¥–µ–ª—è: {now.isocalendar()[1]}/52
‚Äú‚Äù‚Äù
await update.message.reply_text(date_text)
await self.add_experience(user_data, 1)

```
async def language_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/language")
    
    if context.args:
        lang = context.args[0].lower()
        if lang in LANGUAGE_NAMES:
            user_data['language'] = lang
            self.db.save_user(user_data)
            await update.message.reply_text(
                self.t('language_changed', lang),
                reply_markup=self.get_keyboard(lang)
            )
            return
    
    keyboard = []
    for code, name in LANGUAGE_NAMES.items():
        keyboard.append([InlineKeyboardButton(name, callback_data=f"lang_{code}")])
    
    await update.message.reply_text(
        "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def ai_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/ai")
    
    if not context.args:
        await update.message.reply_text("ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!\n–ü—Ä–∏–º–µ—Ä: /ai –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–æ—Å–º–æ—Å–µ")
        return
    
    if not self.gemini_model:
        await update.message.reply_text("‚ùå AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    query = " ".join(context.args)
    
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        history = self.conversation_memory.get_context(user_data['user_id'], limit=20)
        context_str = ""
        if history:
            for msg in history[-5:]:
                role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg['role'] == 'user' else "AI"
                context_str += f"{role}: {msg['content'][:100]}\n"
        
        prompt = f"–ò—Å—Ç–æ—Ä–∏—è:\n{context_str}\n\n–í–æ–ø—Ä–æ—Å: {query}\n\n–û—Ç–≤–µ—Ç—å –ø–æ–ª–µ–∑–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ."
        response = self.gemini_model.generate_content(prompt)
        
        self.conversation_memory.add_message(user_data['user_id'], 'user', query)
        self.conversation_memory.add_message(user_data['user_id'], 'assistant', response.text)
        
        await update.message.reply_text(response.text)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ AI: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ AI: {e}")
    
    await self.add_experience(user_data, 2)

async def clearhistory_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/clearhistory")
    
    self.conversation_memory.clear_history(user_data['user_id'])
    await update.message.reply_text("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞!")
    await self.add_experience(user_data, 1)

async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    if self.maintenance_mode and not self.is_creator(update.effective_user.id):
        return
    
    user_data = await self.get_user_data(update)
    message = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    lang = user_data.get('language', 'ru')
    if message == self.t('help', lang):
        return await self.help_command(update, context)
    elif message == self.t('notes', lang):
        return await self.notes_command(update, context)
    elif message == self.t('stats', lang):
        return await self.stats_command(update, context)
    elif message == self.t('time', lang):
        return await self.time_command(update, context)
    elif message == self.t('language', lang):
        return await self.language_command(update, context)
    elif message == self.t('ai_chat', lang):
        await update.message.reply_text("üí¨ AI –≥–æ—Ç–æ–≤! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        return
    
    # AI —á–∞—Ç
    if not self.gemini_model:
        return
    
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        history = self.conversation_memory.get_context(user_data['user_id'], limit=20)
        context_str = ""
        if history:
            for msg in history[-5:]:
                role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg['role'] == 'user' else "AI"
                context_str += f"{role}: {msg['content'][:100]}\n"
        
        prompt = f"–ò—Å—Ç–æ—Ä–∏—è:\n{context_str}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}\n\n–û—Ç–≤–µ—Ç—å –ø–æ–ª–µ–∑–Ω–æ."
        response = self.gemini_model.generate_content(prompt)
        
        self.conversation_memory.add_message(user_data['user_id'], 'user', message)
        self.conversation_memory.add_message(user_data['user_id'], 'assistant', response.text)
        
        await update.message.reply_text(response.text)
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    
    await self.add_experience(user_data, 1)

async def note_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/note")
    
    if not context.args:
        await update.message.reply_text("üìù –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç!\n–ü—Ä–∏–º–µ—Ä: /note –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ")
        return
    
    note = " ".join(context.args)
    self.db.add_note(user_data['user_id'], note)
    await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\nüìù {note}")
    await self.add_experience(user_data, 1)

async def notes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/notes")
    
    notes = self.db.get_notes(user_data['user_id'])
    
    if not notes:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫!\n–°–æ–∑–¥–∞–π—Ç–µ: /note [—Ç–µ–∫—Å—Ç]")
        return
    
    text = "üìù –í–ê–®–ò –ó–ê–ú–ï–¢–ö–ò:\n\n"
    for i, note in enumerate(notes, 1):
        created = datetime.datetime.fromisoformat(note['created_at']).strftime('%d.%m %H:%M')
        text += f"{i}. {note['note']}\n   üìÖ {created}\n\n"
    
    if len(text) > 4000:
        text = text[:4000] + "..."
    
    await update.message.reply_text(text)
    await self.add_experience(user_data, 1)

async def delnote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/delnote")
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä!\n–ü—Ä–∏–º–µ—Ä: /delnote 1")
        return
    
    notes = self.db.get_notes(user_data['user_id'])
    index = int(context.args[0]) - 1
    
    if 0 <= index < len(notes):
        self.db.delete_note(notes[index]['id'], user_data['user_id'])
        await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{index+1} —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text(f"‚ùå –ó–∞–º–µ—Ç–∫–∏ #{index+1} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    await self.add_experience(user_data, 1)

async def clearnotes_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/clearnotes")
    
    notes = self.db.get_notes(user_data['user_id'])
    count = len(notes)
    
    conn = self.db.get_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM notes WHERE user_id = ?", (user_data['user_id'],))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–º–µ—Ç–æ–∫!")
    await self.add_experience(user_data, 1)

async def joke_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/joke")
    
    jokes = [
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!",
        "–ó–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤ –±–∞—Ä, –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç 1 –ø–∏–≤–æ. –ó–∞–∫–∞–∑—ã–≤–∞–µ—Ç 0 –ø–∏–≤–∞. –ó–∞–∫–∞–∑—ã–≤–∞–µ—Ç 999999 –ø–∏–≤–∞. –ó–∞–∫–∞–∑—ã–≤–∞–µ—Ç -1 –ø–∏–≤–æ...",
        "–ï—Å—Ç—å 10 —Ç–∏–ø–æ–≤ –ª—é–¥–µ–π: —Ç–µ, –∫—Ç–æ –ø–æ–Ω–∏–º–∞–µ—Ç –¥–≤–æ–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –∏ —Ç–µ, –∫—Ç–æ –Ω–µ—Ç.",
        "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –º–æ–µ—Ç –ø–æ—Å—É–¥—É? –ù–µ –º–æ–µ—Ç - —ç—Ç–æ –Ω–µ –±–∞–≥, —ç—Ç–æ —Ñ–∏—á–∞!",
        "- –î–æ–∫—Ç–æ—Ä, —è –¥—É–º–∞—é, —á—Ç–æ —è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å!\n- –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –ø—Ä–∏–º–∏—Ç–µ —ç—Ç—É —Ç–∞–±–ª–µ—Ç–∫—É.\n- –ê —á—Ç–æ —ç—Ç–æ?\n- –ê–Ω—Ç–∏–≤–∏—Ä—É—Å!"
    ]
    await update.message.reply_text(random.choice(jokes))
    await self.add_experience(user_data, 1)

async def fact_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/fact")
    
    facts = [
        "üß† –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∫–æ–ª–æ 86 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –Ω–µ–π—Ä–æ–Ω–æ–≤!",
        "üåä –í –æ–∫–µ–∞–Ω–µ –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, —á–µ–º –≤–æ –≤—Å–µ—Ö –º—É–∑–µ—è—Ö –º–∏—Ä–∞!",
        "üêô –£ –æ—Å—å–º–∏–Ω–æ–≥–æ–≤ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±–∞—è –∫—Ä–æ–≤—å!",
        "üíª –ü–µ—Ä–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ 1971 –≥–æ–¥—É –∏ –Ω–∞–∑—ã–≤–∞–ª—Å—è 'Creeper'!",
        "ü¶à –ê–∫—É–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–æ–ª—å—à–µ, —á–µ–º –¥–µ—Ä–µ–≤—å—è - –±–æ–ª–µ–µ 400 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç!",
        "üåô –õ—É–Ω–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –æ—Ç –ó–µ–º–ª–∏ –Ω–∞ 3.8 —Å–º –∫–∞–∂–¥—ã–π –≥–æ–¥!"
    ]
    await update.message.reply_text(random.choice(facts))
    await self.add_experience(user_data, 1)

async def quote_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/quote")
    
    quotes = [
        "üí´ '–ë—É–¥—å —Å–æ–±–æ–π. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.' - –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
        "üöÄ '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫—É—é —Ä–∞–±–æ—Ç—É - –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—à—å.' - –°—Ç–∏–≤ –î–∂–æ–±—Å",
        "üéØ '–ù–µ –±–æ–π—Ç–µ—Å—å —Å–æ–≤–µ—Ä—à–∞—Ç—å –æ—à–∏–±–∫–∏ - –±–æ–π—Ç–µ—Å—å –Ω–µ —É—á–∏—Ç—å—Å—è –Ω–∞ –Ω–∏—Ö.'",
        "üåü '–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∏—Ç—å –¥–µ—Ä–µ–≤–æ –±—ã–ª–æ 20 –ª–µ—Ç –Ω–∞–∑–∞–¥. –í—Ç–æ—Ä–æ–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è - —Å–µ–π—á–∞—Å.'",
        "üí™ '–£—Å–ø–µ—Ö - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.' - –£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å"
    ]
    await update.message.reply_text(random.choice(quotes))
    await self.add_experience(user_data, 1)

async def coin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/coin")
    
    result = random.choice(["ü™ô –û—Ä—ë–ª!", "ü™ô –†–µ—à–∫–∞!"])
    await update.message.reply_text(result)
    await self.add_experience(user_data, 1)

async def dice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/dice")
    
    result = random.randint(1, 6)
    dice_faces = ["‚öÄ", "‚öÅ", "‚öÇ", "‚öÉ", "‚öÑ", "‚öÖ"]
    await update.message.reply_text(f"üé≤ {dice_faces[result-1]} –í—ã–ø–∞–ª–æ: {result}")
    await self.add_experience(user_data, 1)

async def eightball_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/8ball")
    
    if not context.args:
        await update.message.reply_text("üîÆ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!\n–ü—Ä–∏–º–µ—Ä: /8ball –°—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ —É—á–∏—Ç—å Python?")
        return
    
    answers = [
        "‚úÖ –î–∞, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ!",
        "‚úÖ –ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω!",
        "‚úÖ –ë–µ—Å—Å–ø–æ—Ä–Ω–æ!",
        "ü§î –í–æ–∑–º–æ–∂–Ω–æ...",
        "ü§î –°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ",
        "ü§î –°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è —Å–∫–∞–∑–∞—Ç—å",
        "‚ùå –ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç",
        "‚ùå –û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ",
        "‚ùå –ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –Ω–∞ —ç—Ç–æ"
    ]
    
    question = " ".join(context.args)
    await update.message.reply_text(f"üîÆ –í–æ–ø—Ä–æ—Å: {question}\n\n{random.choice(answers)}")
    await self.add_experience(user_data, 1)

async def math_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/math")
    
    if not context.args:
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ!\n–ü—Ä–∏–º–µ—Ä: /math 15 + 25 * 2")
        return
    
    expression = " ".join(context.args)
    
    try:
        allowed_chars = set('0123456789+-*/()., ')
        if not all(c in allowed_chars for c in expression):
            await update.message.reply_text("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: —Ü–∏—Ñ—Ä—ã, +, -, *, /, ()")
            return
        
        result = eval(expression)
        await update.message.reply_text(f"üî¢ {expression} = {result}")
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è!")
    
    await self.add_experience(user_data, 1)

async def calculate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/calculate")
    
    if not context.args:
        await update.message.reply_text(
            "üßÆ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†\n\n"
            "–§—É–Ω–∫—Ü–∏–∏: sqrt, sin, cos, tan, log, pi, e\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /calculate sqrt(16)\n"
            "‚Ä¢ /calculate sin(3.14/2)\n"
            "‚Ä¢ /calculate log(100)"
        )
        return
    
    expression = " ".join(context.args)
    
    try:
        import math
        safe_dict = {
            "sqrt": math.sqrt,
            "sin": math.sin,
            "cos": math.cos,
            "tan": math.tan,
            "log": math.log,
            "pi": math.pi,
            "e": math.e,
            "pow": pow,
            "abs": abs
        }
        
        result = eval(expression, {"__builtins__": {}}, safe_dict)
        await update.message.reply_text(f"üßÆ {expression} = {result}")
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è!")
    
    await self.add_experience(user_data, 2)

async def password_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/password")
    
    length = 12
    if context.args and context.args[0].isdigit():
        length = min(int(context.args[0]), 50)
    
    import string
    chars = string.ascii_letters + string.digits + "!@#$%^&*"
    password = ''.join(random.choice(chars) for _ in range(length))
    
    await update.message.reply_text(
        f"üîê –ü–ê–†–û–õ–¨ ({length} —Å–∏–º–≤–æ–ª–æ–≤):\n\n`{password}`\n\n"
        "üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ!",
        parse_mode='Markdown'
    )
    await self.add_experience(user_data, 1)

async def qr_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/qr")
    
    if not context.args:
        await update.message.reply_text("üì± –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç!\n–ü—Ä–∏–º–µ—Ä: /qr https://google.com")
        return
    
    text = " ".join(context.args)
    qr_url = f"https://api.qrserver.com/v1/create-qr-code/?size=300x300&data={requests.utils.quote(text)}"
    
    try:
        await update.message.reply_text("üì± –ì–µ–Ω–µ—Ä–∏—Ä—É—é QR-–∫–æ–¥...")
        await context.bot.send_photo(update.effective_chat.id, qr_url)
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞")
    
    await self.add_experience(user_data, 1)

async def weather_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/weather")
    
    if not context.args:
        await update.message.reply_text("üå§Ô∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥!\n–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")
        return
    
    city = " ".join(context.args)
    
    if OPENWEATHER_API_KEY:
        try:
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
            response = requests.get(url, timeout=10).json()
            
            if response.get("cod") == 200:
                weather = response["weather"][0]["description"]
                temp = round(response["main"]["temp"])
                feels = round(response["main"]["feels_like"])
                humidity = response["main"]["humidity"]
                wind = response["wind"]["speed"]
                
                text = f"""
```

üå§Ô∏è –ü–û–ì–û–î–ê –í {city.upper()}

üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C
ü§î –û—â—É—â–∞–µ—Ç—Å—è: {feels}¬∞C
‚òÅÔ∏è {weather.capitalize()}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%
üå™Ô∏è –í–µ—Ç–µ—Ä: {wind} –º/—Å

‚è∞ {datetime.datetime.now().strftime(‚Äô%H:%M‚Äô)}
‚Äú‚Äù‚Äù
await update.message.reply_text(text)
await self.add_experience(user_data, 2)
return
except:
pass

```
    try:
        url = f"https://wttr.in/{city}?format=%C+%t+üíß%h+üå™Ô∏è%w&lang=ru"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            await update.message.reply_text(f"üå§Ô∏è –ü–û–ì–û–î–ê –í {city.upper()}\n\n{response.text.strip()}")
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
    
    await self.add_experience(user_data, 2)

async def translate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/translate")
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "üåê –ü–ï–†–ï–í–û–î–ß–ò–ö\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /translate [—è–∑—ã–∫] [—Ç–µ–∫—Å—Ç]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /translate en –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!\n"
            "‚Ä¢ /translate es Hello, world!"
        )
        return
    
    if not self.gemini_model:
        await update.message.reply_text("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    target_lang = context.args[0]
    text = " ".join(context.args[1:])
    
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ {target_lang}. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –ø–µ—Ä–µ–≤–æ–¥:\n\n{text}"
        response = self.gemini_model.generate_content(prompt)
        await update.message.reply_text(f"üåê –ü–µ—Ä–µ–≤–æ–¥:\n\n{response.text}")
    except:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞")
    
    await self.add_experience(user_data, 2)

async def rank_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/rank")
    
    level = user_data.get('level', 1)
    experience = user_data.get('experience', 0)
    required = level * 100
    progress = (experience / required) * 100
    
    filled = int(progress / 10)
    bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
    
    rank_text = f"""
```

üèÖ –í–ê–® –£–†–û–í–ï–ù–¨

üë§ {user_data.get(‚Äònickname‚Äô) or user_data[‚Äòfirst_name‚Äô]}
üÜô –£—Ä–æ–≤–µ–Ω—å: {level}
‚≠ê –û–ø—ã—Ç: {experience}/{required}

üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%
{bar}

üíé VIP: {‚Äú‚úÖ‚Äù if self.is_vip(user_data) else ‚Äú‚ùå‚Äù}
‚Äú‚Äù‚Äù
await update.message.reply_text(rank_text)
await self.add_experience(user_data, 1)

```
async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = await self.get_user_data(update)
    self.db.log_command(user_data['user_id'], "/stats")
    
    notes = self.db.get_notes(user_data['user_id'])
    
    text = f"""
```

üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üë§ {user_data.get(‚Äònickname‚Äô) or user_data[‚Äòfirst_name‚Äô]}
üÜô –£—Ä–æ–≤–µ–Ω—å: {user_data.get(‚Äòlevel‚Äô, 1)}
‚≠ê –û–ø—ã—Ç: {user_data.get(‚Äòexperience‚Äô, 0)}/{user_data.get(‚Äòlevel‚Äô, 1) * 100}
üíé VIP: {‚Äú‚úÖ‚Äù if self.is_vip(user_data) else ‚Äú‚ùå‚Äù}
üìù –ó–∞–º–µ—Ç–æ–∫: {len(notes)}
üåê –Ø–∑—ã–∫: {LANGUAGE_NAMES.get(user_data.get(‚Äòlanguage‚Äô, ‚Äòru‚Äô))}
‚Äú‚Äù‚Äù
await update.message.reply_text(text)
await self.add_experience(user_data, 1)

```
async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("lang_"):
        lang = query.data.split("_")[1]
        user_data = await self.get_user_data(update)
        user_data['language'] = lang
        self.db.save_user(user_data)
        
        await query.edit_message_text(self.t('language_changed', lang), reply_markup=None)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚úÖ",
            reply_markup=self.get_keyboard(lang)
        )

# –ö–û–ú–ê–ù–î–´ –°–û–ó–î–ê–¢–ï–õ–Ø

async def grant_vip_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not self.is_creator(update.effective_user.id):
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("üíé /grant_vip [user_id] [week/month/year/permanent]")
        return
    
    try:
        target_id = int(context.args[0])
        duration = context.args[1].lower()
        
        target_user = self.db.get_user(target_id)
        if not target_user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        target_user['is_vip'] = 1
        
        if duration == "week":
            target_user['vip_expires'] = (datetime.datetime.now() + datetime.timedelta(weeks=1)).isoformat()
        elif duration == "month":
            target_user['vip_expires'] = (datetime.datetime.now() + datetime.timedelta(days=30)).isoformat()
        elif duration == "year":
            target_user['vip_expires'] = (datetime.datetime.now() + datetime.timedelta(days=365)).isoformat()
        elif duration == "permanent":
            target_user['vip_expires'] = None
        else:
            await update.message.reply_text("‚ùå week/month/year/permanent")
            return
        
        self.db.save_user(target_user)
        await update.message.reply_text(f"‚úÖ VIP –≤—ã–¥–∞–Ω!\nüë§ {target_user['first_name']}\nüÜî {target_id}\n‚è∞ {duration}")
        
        try:
            await context.bot.send_message(target_id, "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ VIP!")
        except:
            pass
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID!")

async def broadcast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not self.is_creator(update.effective_user.id):
        return
    
    if not context.args:
        await update.message.reply_text("üì¢ /broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ]")
        return
    
    message = " ".join(context.args)
    users = self.db.get_all_users()
    
    sent = 0
    for user in users:
        try:
            await context.bot.send_message(user['user_id'], f"üì¢ –û—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è:\n\n{message}")
            sent += 1
            await asyncio.sleep(0.05)
        except:
            pass
    
    await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}/{len(users)}")

async def users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not self.is_creator(update.effective_user.id):
        return
    
    users = self.db.get_all_users()
    text = f"üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô: {len(users)}\n\n"
    
    for user in users[:20]:
        vip = "üíé" if user.get('is_vip') else "üë§"
        text += f"{vip} {user['first_name']} (ID: {user['user_id']})\n"
    
    if len(users) > 20:
        text += f"\n... –∏ –µ—â—ë {len(users) - 20}"
    
    await update.message.reply_text(text)

async def backup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not self.is_creator(update.effective_user.id):
        return
    
    try:
        self.conversation_memory.save()
        
        backup_data = {
            'timestamp': datetime.datetime.now().isoformat(),
            'users': len(self.db.get_all_users())
        }
        
        filename = f"backup_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = os.path.join(BACKUP_PATH, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, ensure_ascii=False, indent=2)
        
        await update.message.reply_text(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω!\nüìÅ {filename}\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {backup_data['users']}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò

async def self_ping(self):
    try:
        requests.get(RENDER_URL, timeout=10)
        logger.info("Self-ping OK")
    except:
        pass

async def save_data(self):
    try:
        self.conversation_memory.save()
        logger.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

# –ó–ê–ü–£–°–ö

async def run_bot(self):
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ v2.1...")
    
    application = Application.builder().token(BOT_TOKEN).read_timeout(30).write_timeout(30).build()
    
    async def error_handler(update, context):
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    
    application.add_error_handler(error_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –í–°–ï–• –∫–æ–º–∞–Ω–¥
    commands = [
        ("start", self.start_command),
        ("help", self.help_command),
        ("info", self.info_command),
        ("status", self.status_command),
        ("time", self.time_command),
        ("date", self.date_command),
        ("language", self.language_command),
        ("ai", self.ai_command),
        ("clearhistory", self.clearhistory_command),
        ("note", self.note_command),
        ("notes", self.notes_command),
        ("delnote", self.delnote_command),
        ("clearnotes", self.clearnotes_command),
        ("joke", self.joke_command),
        ("fact", self.fact_command),
        ("quote", self.quote_command),
        ("coin", self.coin_command),
        ("dice", self.dice_command),
        ("8ball", self.eightball_command),
        ("math", self.math_command),
        ("calculate", self.calculate_command),
        ("password", self.password_command),
        ("qr", self.qr_command),
        ("weather", self.weather_command),
        ("translate", self.translate_command),
        ("rank", self.rank_command),
        ("stats", self.stats_command),
        ("grant_vip", self.grant_vip_command),
        ("broadcast", self.broadcast_command),
        ("users", self.users_command),
        ("backup", self.backup_command)
    ]
    
    for cmd, handler in commands:
        application.add_handler(CommandHandler(cmd, handler))
    
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
        self.handle_message
    ))
    
    application.add_handler(CallbackQueryHandler(self.button_callback))
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    loop = asyncio.get_running_loop()
    self.scheduler.configure(event_loop=loop)
    self.scheduler.start()
    
    self.scheduler.add_job(self.self_ping, 'interval', minutes=14)
    self.scheduler.add_job(self.save_data, 'interval', minutes=30)
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.db.get_all_users())}")
    
    await application.run_polling(drop_pending_updates=True)
```

async def main():
bot = TelegramBot()
await bot.run_bot()

# Flask

app = Flask(**name**)

@app.route(‚Äô/‚Äô)
def home():
return f‚Äù‚Äù‚Äù
<html>
<head><title>Telegram AI Bot v2.1</title>
<style>
body {{font-family: Arial; background: linear-gradient(135deg, #667eea, #764ba2);
color: white; padding: 50px; text-align: center;}}
.container {{background: rgba(255,255,255,0.1); border-radius: 20px;
padding: 30px; max-width: 600px; margin: 0 auto;}}
h1 {{font-size: 48px;}}
.status {{color: #00ff88; font-weight: bold;}}
</style>
</head>
<body>
<div class="container">
<h1>ü§ñ Telegram AI Bot</h1>
<p class="status">‚úÖ –†–ê–ë–û–¢–ê–ï–¢</p>
<p>üìÖ –í–µ—Ä—Å–∏—è: 2.1 (–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∞—è)</p>
<p>‚è∞ {datetime.datetime.now().strftime(‚Äô%d.%m.%Y %H:%M:%S‚Äô)}</p>
<p>üåê 6 —è–∑—ã–∫–æ–≤ | üß† AI: Gemini 2.0</p>
<p>–ë–æ—Ç: {BOT_USERNAME}</p>
</div>
</body>
</html>
‚Äú‚Äù‚Äù

@app.route(‚Äô/health‚Äô)
def health():
return {‚Äústatus‚Äù: ‚Äúok‚Äù, ‚Äútime‚Äù: datetime.datetime.now().isoformat(), ‚Äúversion‚Äù: ‚Äú2.1‚Äù}

if **name** == ‚Äú**main**‚Äù:
from threading import Thread

```
port = int(os.getenv("PORT", 8080))
flask_thread = Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': port, 'debug': False, 'use_reloader': False})
flask_thread.daemon = True
flask_thread.start()

logger.info(f"üåê Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")

try:
    asyncio.run(main())
except KeyboardInterrupt:
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
except Exception as e:
    logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    sys.exit(1)
